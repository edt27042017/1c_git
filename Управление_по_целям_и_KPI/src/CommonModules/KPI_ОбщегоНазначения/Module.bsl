 //Процедура проверяет возмность изменения даты кадровых документов
 //Параметры:
 // табличная часть документа - табличная часть документа.
 // СтандартнаяОбработка      - тип булево, признак стандартной обработки действия
&НаКлиенте
Процедура ПроверитьВозможностьИзмененияДаты(ОбъектТЧ, СтандартнаяОбработка) Экспорт
	
	Если ОбъектТЧ.Количество() > 0 Тогда
		Сообщить("Перед изменением даты необходимо очистить список сотрудников");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

//Функция для получения структуры компании на определенную дату,
//иначе если просто обращаться к справочнику, то мы не узнаем 
//когда работал какой сотрудник
&НаКлиенте
Функция ОбработкаВыбораПолучитьСтруктуруКомпанииНаДату(Дата, Владелец, СтандартнаяОбработка, ВидимостьДатыФормирования = Ложь, ТекущийОбъектУправления = Неопределено, ДополнительныеПараметры = Неопределено, ЗакрыватьФормуПриВыборе = Истина) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ПараметрыОткрытия = ДополнительныеПараметры;
	Иначе 
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", ЗакрыватьФормуПриВыборе);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Дата"                       , Дата);
	ПараметрыОткрытия.Вставить("ОбъектУправления"           , ТекущийОбъектУправления);
	ПараметрыОткрытия.Вставить("ОтображатьДатуФормирования" , ВидимостьДатыФормирования);
	
	Попытка
		Возврат ОткрытьФормуМодально("РегистрСведений.KPI_СтруктураКомпании.Форма.ФормаВыбора", ПараметрыОткрытия, Владелец);
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
КонецФункции

//Функция для получения элемента справочника Сотрудники на дату
&НаКлиенте
Функция ОбработкаВыбораПолучитьСотрудникаНаДату (Дата, Владелец, СтандартнаяОбработка, ВидимостьДатыФормирования = Ложь)  Экспорт 
	
	Если ВидимостьДатыФормирования = Ложь Тогда
		СтруктураКомпании = ОбработкаВыбораПолучитьСтруктуруКомпанииНаДату(Дата, Владелец, СтандартнаяОбработка, ВидимостьДатыФормирования);
		Если СтруктураКомпании <> Неопределено Тогда
			Возврат KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(СтруктураКомпании, Дата);
		Иначе
			Возврат Владелец.Объект.Сотрудник;
		КонецЕсли;	
	Иначе
		СтандартнаяОбработка = Ложь;
	
		мДата = Новый Структура("Дата", Дата);
		Форма = ПолучитьФорму("РегистрСведений.KPI_СтруктураКомпании.Форма.ФормаВыбора", мДата);
		Форма.ВладелецФормы = Владелец;
		Форма.Элементы.ДатаФормированияСтруктуры.Видимость = ВидимостьДатыФормирования;
		Попытка
			Возврат Форма.ОткрытьМодально().Сотрудник;
		Исключение
			//При отмене выбора
			Возврат Владелец.Объект.Сотрудник;
		КонецПопытки;
	КонецЕсли;	
		
КонецФункции	

&НаКлиенте
//Получим объект внешнего соединения
Функция ПолучитьОбъектВнешнегоСоединения(СтруктураПараметров) Экспорт 
	СисИнфо  = Новый СистемнаяИнформация;
	Платформа = СисИнфо.ТипПлатформы;
	
	Если Платформа = ТипПлатформы.Linux_x86 Или Платформа = ТипПлатформы.Linux_x86_64 Тогда
		Сообщить("Загрузку из внешних баз можно осуществлять только на платформе Windows");
		COM_Объект = Неопределено;
		Возврат COM_Объект;
	КонецЕсли;
	
	
	Если СтруктураПараметров.ВерсияПлатформы = "v.8.0" Тогда
		ОбъектПодключения = "v8.Application";
	ИначеЕсли СтруктураПараметров.ВерсияПлатформы = "v.8.1" Тогда
		ОбъектПодключения = "V81.Application";
	ИначеЕсли СтруктураПараметров.ВерсияПлатформы = "v.8.2" Тогда
		ОбъектПодключения = "V82.Application";
	ИначеЕсли СтруктураПараметров.ВерсияПлатформы = "v.8.3" Тогда
		ОбъектПодключения = "V83.Application";
	КонецЕсли;
	
	
	//Если Платформа = ТипПлатформы.Windows_x86_64 Тогда
	//	ОбъектПодключения = СтрЗаменить(ОбъектПодключения, ".", "_");
	//КонецЕсли;
	
	//ОбъектПодключения = СтрЗаменить(ОбъектПодключения, ".", "_");
	//ОбъектПодключения = "V82.COMConnector";
	//ОбъектПодключения = "V82App";
	
	
	//проверка наличия в системе зарегистрированного COM объекта
	Попытка
		COM_Объект = Новый COMОбъект(ОбъектПодключения);
	Исключение
		Предупреждение("Ошибка создания OLE объекта.
		|Необходимо зарегистрировать в системе OLE объект для платформы 1С:Предприятие " + СтруктураПараметров.ВерсияПлатформы);
		
		Сообщить("--" + ОписаниеОшибки());
		
		COM_Объект = Неопределено;
	КонецПопытки;
	
	Возврат COM_Объект;
КонецФункции

&НаКлиенте
//Получим строку подключения из структуры параметров настроек внешней базы
Функция ПолучитьСтрокуПодключения(СтруктураПараметров) Экспорт 
	Если Не СтруктураПараметров.ТипИБ Тогда 
		СтрокаПодключения = "File=""" + СтруктураПараметров.КаталогИБ + """;";
	Иначе 
		СтрокаПодключения = "Srvr=""" + СтруктураПараметров.ИмяСервераИБ + """;Ref=""" + СтруктураПараметров.ИмяИБНаСервере + """;";
	КонецЕсли;
	
	Если Не СтруктураПараметров.АутентификацияWindows Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ПользовательИБ) Тогда
			СтрокаПодключения = СтрокаПодключения + "Usr=""" + СтруктураПараметров.ПользовательИБ + """;";
		КонецЕсли;
		Если Не ПустаяСтрока(СтруктураПараметров.ПарольИБ) Тогда
			СтрокаПодключения = СтрокаПодключения + "Pwd=""" + СтруктураПараметров.ПарольИБ + """;";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаПодключения;
КонецФункции

//Получим объект соединения с внешней ИБ
&НаКлиенте
Процедура ПроверитьСоединение(СтруктураПараметров) Экспорт
	ОчиститьСообщения();
	
	Если Не КорректностьПараметров(СтруктураПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	COM_Объект = ПолучитьОбъектВнешнегоСоединения(СтруктураПараметров);
	Если COM_Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//проверка связи
	Попытка
		Состояние("Выполняется попытка подключения к базе данных...");
		COM_Подключение = COM_Объект.Connect(ПолучитьСтрокуПодключения(СтруктураПараметров));
		Предупреждение("Подключение к информационной базе выполнено успешно");
		COM_Подключение = Неопределено;
		COM_Объект.ЗавершитьРаботуСистемы(Ложь);
		COM_Объект = Неопределено;
	Исключение
		Предупреждение("Не удалось установить подключение к информационной базе.
		|" + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция КорректностьПараметров(СтруктураПараметров)
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ВерсияПлатформы) Тогда 
		Сообщить("Не выбрана версия платформы для информационной базы");
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураПараметров.ТипИБ) Тогда 
		Сообщить("Не выбран тип информационной базы");
		Возврат Ложь;
	ИначеЕсли Не СтруктураПараметров.ТипИБ И Не ЗначениеЗаполнено(СтруктураПараметров.КаталогИБ) Тогда 
		Сообщить("Не выбран каталог информационной базы");
		Возврат Ложь;
	ИначеЕсли СтруктураПараметров.ТипИБ И Не ЗначениеЗаполнено(СтруктураПараметров.ИмяСервераИБ) Тогда 
		Сообщить("Не указано имя сервера информационной базы");
		Возврат Ложь;
	ИначеЕсли СтруктураПараметров.ТипИБ И Не ЗначениеЗаполнено(СтруктураПараметров.ИмяИБНаСервере) Тогда 
		Сообщить("Не указано имя информационной базы на сервере");
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
КонецФункции

//Позиционирование курсора в дереве
//Параметры:
// нет
&НаКлиенте 
Процедура СпозиционироватьКурсорВДереве(КоллекцияЭлементовДерева, ИмяПоля, ЗначениеЭлемента, ТекущаяСтрокаДерева, ПрерватьПоиск = Ложь) Экспорт
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		Если ПрерватьПоиск Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаДерева[ИмяПоля] = ЗначениеЭлемента Тогда
			ТекущаяСтрокаДерева = СтрокаДерева.ПолучитьИдентификатор();
			ПрерватьПоиск = Истина;
			Возврат;
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			СпозиционироватьКурсорВДереве(КоллекцияЭлементов, ИмяПоля, ЗначениеЭлемента, ТекущаяСтрокаДерева, ПрерватьПоиск)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификаторСтрокиДереваПоЗначению(Значение, Дерево, Колонка) Экспорт
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
        Если Элемент[Колонка] = Значение Тогда
            Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		
        Результат = ПолучитьИдентификаторСтрокиДереваПоЗначению(Значение, Элемент, Колонка);
        Если Результат <> Неопределено Тогда
            Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции