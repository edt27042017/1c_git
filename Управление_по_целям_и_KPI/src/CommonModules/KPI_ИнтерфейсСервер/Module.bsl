//Функция получения запроса рабочего времени сотрудников
//Параметры
// НачалоПериода       - тип дата. (начало периода за который надо получить рабочее время
// КонецПериода        - тип дата. (конецпериода   за который надо получить рабочее время
// ОбъектУправления  
//	типы :   
// 		СправочникСсылка.KPI_Филиалы,   - Филиал, для сотрудников которого необходимо получить рабочее время
// 		СправочникСсылка.KPI_Сотрудники - Сотрудник, сотрудник для которого необходимо получить рабочее время.
//
//УчитыватьНеЯвки - тип булево, признак получения рабочего времени за вычетом невыхода сотрудника
Функция РабочееВремяСотрудников(НачалоПериода,КонецПериода,ОбъектУправления,УчитыватьНеЯвки = Истина) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ОписаниеТипаСтроки  = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(2));
	ОписаниеТипаЧисла   = Новый ОписаниеТипов("Число" ,Новый КвалификаторыЧисла(2,0));
	ТЗ.Колонки.Добавить("НомерДеньСтрока",ОписаниеТипаСтроки);
	ТЗ.Колонки.Добавить("НомерДеньЧисло" ,ОписаниеТипаЧисла);
	
	Для НомерДень = 1 по 31 Цикл
		Стр = ТЗ.Добавить();
		Стр.НомерДеньСтрока = Строка(НомерДень);
		Стр.НомерДеньЧисло  = НомерДень;
	КонецЦикла;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТЗ_НумерацияДней.НомерДеньСтрока,
	|	ТЗ_НумерацияДней.НомерДеньЧисло
	|ПОМЕСТИТЬ НумерацияДней
	|ИЗ
	|	&ТЗ КАК ТЗ_НумерацияДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	KPI_КадроваяИсторияСотрудников.Сотрудник.СтруктураКомпании.Филиал КАК Филиал,
	|	KPI_КадроваяИсторияСотрудников.ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА KPI_КадроваяИсторияСотрудников.Период < &НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ KPI_КадроваяИсторияСотрудников.Период
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ ДанныеСотрудников
	|ИЗ
	|	РегистрСведений.KPI_КадроваяИсторияСотрудников КАК KPI_КадроваяИсторияСотрудников
	|ГДЕ
	|	KPI_КадроваяИсторияСотрудников.Период <= &КонецПериода
	|	И &УсловиеСотрудник
	|	И KPI_КадроваяИсторияСотрудников.Сотрудник.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	KPI_КадроваяИсторияСотрудников.Сотрудник,
	|	KPI_КадроваяИсторияСотрудников.Сотрудник.СтруктураКомпании.Филиал,
	|	KPI_КадроваяИсторияСотрудников.ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА KPI_КадроваяИсторияСотрудников.Период < &НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ KPI_КадроваяИсторияСотрудников.Период
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(KPI_ГрафикиРабот.Часы) КАК Часы,
	|	""Часов"" + НумерацияДней.НомерДеньСтрока КАК РабочийДень,
	|	ДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(KPI_ГрафикиРабот.Дата) КАК Дата
	|ПОМЕСТИТЬ РабочееВремяПоГрафику
	|ИЗ
	|	ДанныеСотрудников КАК ДанныеСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.KPI_ГрафикиРабот КАК KPI_ГрафикиРабот
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НумерацияДней КАК НумерацияДней
	|			ПО (ДЕНЬ(KPI_ГрафикиРабот.Дата) = НумерацияДней.НомерДеньЧисло)
	|		ПО ДанныеСотрудников.ГрафикРаботы = KPI_ГрафикиРабот.ГрафикРаботы
	|			И ДанныеСотрудников.Период <= KPI_ГрафикиРабот.Дата
	|ГДЕ
	|	KPI_ГрафикиРабот.Дата >= &НачалоПериода
	|	И KPI_ГрафикиРабот.Дата <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСотрудников.Сотрудник,
	|	""Часов"" + НумерацияДней.НомерДеньСтрока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочееВремяПоГрафику.РабочийДень КАК РабочийДень,
	|	РабочееВремяПоГрафику.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(РабочееВремяПоГрафику.Дата) КАК Дата,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЯвкиРаботников.Явка, ИСТИНА)
	|				ТОГДА РабочееВремяПоГрафику.Часы
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Часы
	|ИЗ
	|	РабочееВремяПоГрафику КАК РабочееВремяПоГрафику
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			KPI_РабочееВремяСотрудников.Явка КАК Явка,
	|			KPI_РабочееВремяСотрудников.Сотрудник КАК Сотрудник,
	|			KPI_РабочееВремяСотрудников.Период КАК Период
	|		ИЗ
	|			РегистрНакопления.KPI_РабочееВремяСотрудников КАК KPI_РабочееВремяСотрудников
	|		ГДЕ
	|			KPI_РабочееВремяСотрудников.Период >= &НачалоПериода
	|			И KPI_РабочееВремяСотрудников.Период <= &КонецПериода
	|			И &УсловиеЯвка) КАК ЯвкиРаботников
	|		ПО РабочееВремяПоГрафику.Сотрудник = ЯвкиРаботников.Сотрудник
	|			И РабочееВремяПоГрафику.Дата = ЯвкиРаботников.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочееВремяПоГрафику.Сотрудник,
	|	РабочееВремяПоГрафику.РабочийДень
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Часы)
	|ПО
	|	Сотрудник,
	|	РабочийДень";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода" ,КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ТЗ",ТЗ);
	Если ТипЗнч(ОбъектУправления) = Тип("СправочникСсылка.KPI_Сотрудники") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеСотрудник"," KPI_КадроваяИсторияСотрудников.Сотрудник = &Сотрудник");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеЯвка"     ," KPI_РабочееВремяСотрудников.Сотрудник = &Сотрудник");
		Запрос.УстановитьПараметр("Сотрудник" ,ОбъектУправления)
	ИначеЕсли ТипЗнч(ОбъектУправления) = Тип("СправочникСсылка.KPI_Филиалы") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеСотрудник"," KPI_КадроваяИсторияСотрудников.Сотрудник.СтруктураКомпании.Филиал = &Филиал");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеЯвка"     ," KPI_РабочееВремяСотрудников.Сотрудник.СтруктураКомпании.Филиал = &Филиал");
		Запрос.УстановитьПараметр("Филиал" ,ОбъектУправления);
	КонецЕсли;
	Запрос.Текст       = ТекстЗапроса;
	РезультатЗапроса   = Запрос.Выполнить();
	ВыборкаСотрудников = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Возврат ВыборкаСотрудников;
	
КонецФункции

//Функция для получения ссылки на фото из РС "KPI_ФотоСотрудников"
//Параметры:
// ФизЛицоСотрудника - тип СправочникСсылка.ФизическиеЛица
//Возвращаемое значение
// ссылка на фото из РС "KPI_ФотоСотрудников", тип строка 
Функция ФотоСотрудников(ФизЛицоСотрудника) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	KPI_ФотоСотрудников.ФизЛицо,
	|	KPI_ФотоСотрудников.Фото,
	|	KPI_ФотоСотрудников.ФотоСсылка
	|ИЗ
	|	РегистрСведений.KPI_ФотоСотрудников КАК KPI_ФотоСотрудников
	|ГДЕ
	|	KPI_ФотоСотрудников.ФизЛицо = &ФизЛица";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ФизЛица",ФизЛицоСотрудника);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ФотоСсылка;
	КонецЕсли;
	
КонецФункции

//функция установки параметров сеанса при запуске системы
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция МодульСеанса_УстановкаПараметровСеанса() Экспорт
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//   При выпуске релиза заменить KPI_РежимЗащиты на Истина !!!                                        //
	//   P.S. Для пользователей: При смене данного режима конфигурация становится неработоспособной !!!   //
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	ПараметрыСеанса.KPI_РежимЗащиты = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	KPI_СтруктураКомпанииСрезПоследних.Сотрудник
	|ИЗ
	|	РегистрСведений.KPI_СтруктураКомпании.СрезПоследних(&Период, Сотрудник.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ) КАК KPI_СтруктураКомпанииСрезПоследних";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ",ТекущийПользователь.УникальныйИдентификатор);

	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыСеанса.KPI_ТекущийСотрудник = Справочники.KPI_Сотрудники.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		ПараметрыСеанса.KPI_ТекущийСотрудник = Выборка.Сотрудник;
	Иначе
		Если KPI_ПереопределяемыйСервер.ИнтегрированныйФункционал() Тогда
			KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Пользователь не сопоставлен с сотрудником. Функционал KPI не будет работать");
		КонецЕсли;
	КонецЕсли;
	
	////Тест
	//элСпр = Справочники.KPI_Сотрудники.НайтиПоКоду("00000007");
	////СпМ
	//элСпр = Справочники.KPI_Сотрудники.НайтиПоКоду("00000034");
	////СпМ
	//Если Не ЗначениеЗаполнено(элСпр) Тогда	
	//	Объект = Справочники.KPI_Сотрудники.СоздатьЭлемент();
	//	Объект.Код = "00000001";
	//	Объект.Наименование = "Тест";
	//	Объект.Записать();
	//	элСпр = Объект.Ссылка;
	//КонецЕсли;
	//
	//ПараметрыСеанса.KPI_ТекущийСотрудник = элСпр;
	//
	////Конец теста
	
КонецФункции

//Процедура добавлвления подписи в сформированные отчеты
//Парамерты:
// Отчет - тип табличный документ
// Период - тип дата, дата из периода за который формируется отчет
Процедура ДобавитьПодписьСформированногоОтчета(Отчет,Период) Экспорт
	
	ОбщиеОбласти       = ПолучитьОбщийМакет("KPI_ОбщиеОбластиОтчетов");
	
	ОбластьПробел      = ОбщиеОбласти.ПолучитьОбласть("ОбластьПробел");
    ОбластьПодвал      = ОбщиеОбласти.ПолучитьОбласть("ОбластьПодвал");
	
	Отчет.Вывести(ОбластьПробел);
	Отчет.Вывести(ОбластьПробел);
	Отчет.Вывести(ОбластьПробел);
	
	ТекстПодвала = "Отчет сформирован пользователем %Пользователь% %ДатаФормирования% на %Период%";
	ТекстПодвала = СтрЗаменить(ТекстПодвала, "%ДатаФормирования%",Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy"));
	ТекстПодвала = СтрЗаменить(ТекстПодвала, "%Пользователь%"    ,ПараметрыСеанса.KPI_ТекущийСотрудник);
	ТекстПодвала = СтрЗаменить(ТекстПодвала, "%Период%"    ,Формат(Период,"ДФ=dd.MM.yyyy"));
	ОбластьПодвал.Параметры.ТекстПримечание = ТекстПодвала;
	
	Отчет.Вывести(ОбластьПодвал);
	
КонецПроцедуры

//Функция для получения среза плановых начислений из РС "ПлановыеНачисления"
//Параметры:
// Период                   - тип дата, период за котрый получается срез
// ОбъектУправления         - тип СправочникСслыка.KPI_Сотрудники, сотрудник по которму надо получить срез
// Таблицей                 - тип булево, признак возврата среза в виде таблицы значений,
// (если Истина, то ТЗ, иначе ВыборкаИзРезультатаЗапроса)
// ДополнительныеПараметры  - тип структура
//
// Возвращаемое значение:
// 	Срез плановых начислений, тип таблица значений или ВыборкаИзРезультатаЗапроса
Функция СрезПлановыхНачисленийОбъектаУправления(Период,ОбъектУправления = Неопределено,Таблицей = Истина,ДополнительныеПараметры = Неопределено) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	KPI_ПлановыеНачисленияСрезПоследних.Сотрудник,
	|	KPI_ПлановыеНачисленияСрезПоследних.Начисление КАК ВидНачисления,
	|	KPI_ПлановыеНачисленияСрезПоследних.Сумма КАК Результат,
	|	KPI_ПлановыеНачисленияСрезПоследних.ДатаНачала КАК НачалоПериода,
	|	KPI_ПлановыеНачисленияСрезПоследних.ДатаОкончания КАК КонецПериода
	|ИЗ
	|	РегистрСведений.KPI_ПлановыеНачисления.СрезПоследних(&Период, &УсловиеОтбора) КАК KPI_ПлановыеНачисленияСрезПоследних
	|ГДЕ
	|	KPI_ПлановыеНачисленияСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос = Новый Запрос;
	Если  ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ОбъектУправления) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора","Сотрудник = &Сотрудник");
	ИначеЕсли ДополнительныеПараметры.Свойство("Филиал") 
		И ЗначениеЗаполнено(ДополнительныеПараметры.Филиал) Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора","Сотрудник.СтруктураКомпании.Филиал = &Филиал");
		Запрос.УстановитьПараметр("Филиал",ДополнительныеПараметры.Филиал);
	Иначе  
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора","");	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Период"    , Период);
	Запрос.УстановитьПараметр("Сотрудник" , ОбъектУправления);
	Если Таблицей Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе 
		Возврат Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
КонецФункции


