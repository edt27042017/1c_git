//Функция получает даты границ периода
//Параметры 
// Дата 		 - тип дата, дата внутри периода
// Периодичность - тип ПеречислениеСсылка.KPI_ПериодичностьПланирования
//Возвращаемое значение
// тип Структура
// элементы
// НачалоПериода - тип дата
// КонецПериода  - тип дата
Функция ГраницыПериода(Дата, Периодичность) Экспорт

	Возврат KPI_ОбщегоНазначенияСервер.ГраницыПериода(Дата, Периодичность);
	
КонецФункции

//Процедура получает список оценок по шкале
//Параметры
// Стандарт - тип СправочникСсылка.KPI_Стандарты
//Возвращаемое значение
// тип массив, элементы массива СправочникСсылка.KPI_ВидыОценок
Функция ОценкиСтандарта(Стандарт) Экспорт
	
	Возврат Справочники.KPI_Стандарты.ОценкиСтандарта(Стандарт);
	
КонецФункции

//Функция формирует строковое представление периода планирования
//Параметры:
// Дата 		 - тип дата, дата внутри периода
// Периодичность - тип ПеречислениеСсылка.KPI_ПериодичностьПланирования
//Возвращаемое значение:
// ПредставлениеПериода, тип строка
Функция ПредставлениеПериодаПланирования(Дата, ПериодичностьПланирования) Экспорт
	 
	ПредставлениеПериода = "";
	ГраницыПериода = ГраницыПериода(Дата  ,ПериодичностьПланирования);
	Если ПериодичностьПланирования = Перечисления.KPI_ПериодичностьПланирования.Месяц Тогда
		ПредставлениеПериода = Формат(Дата,"ДФ='ММММ гггг'") + " г.";
	ИначеЕсли ПериодичностьПланирования = Перечисления.KPI_ПериодичностьПланирования.Неделя Тогда
		ПредставлениеПериода = Формат(ГраницыПериода.НачалоПериода,"ДФ='дд ММММ'")
		+ " - " + Формат(ГраницыПериода.КонецПериода,"ДФ='дд ММММ'") + " " + Формат(Дата,"ДФ='гггг'") + " г.";
	ИначеЕсли ПериодичностьПланирования = Перечисления.KPI_ПериодичностьПланирования.День Тогда
		ПредставлениеПериода = Формат(Дата,"ДФ='дд ММММ гггг'")+" г.";
	ИначеЕсли ПериодичностьПланирования = Перечисления.KPI_ПериодичностьПланирования.Квартал Тогда
		НомерМесяца = Месяц(Дата);
        Квартал = "";
		Если НомерМесяца < 4 Тогда
			Квартал = "I";
		ИначеЕсли НомерМесяца < 7 Тогда
			Квартал = "II";
		ИначеЕсли НомерМесяца < 10 Тогда 
			Квартал = "III";
		Иначе 
			Квартал = "IV";
		КонецЕсли;
		ПредставлениеПериода = Квартал + " квартал " + Формат(Дата,"ДФ=' гггг'") + " г.";
	ИначеЕсли ПериодичностьПланирования = Перечисления.KPI_ПериодичностьПланирования.Полугодие Тогда
		ПредставлениеПериода = "1";
		Если Месяц(Дата) > 6 Тогда
			ПредставлениеПериода = "2";
		КонецЕсли;
		ПредставлениеПериода = ПредставлениеПериода + "-ое полугодие " + Формат(Дата,"ДФ=' гггг'") + " г.";
	ИначеЕсли ПериодичностьПланирования = Перечисления.KPI_ПериодичностьПланирования.Год Тогда
		ПредставлениеПериода = Формат(Дата,"ДФ='гггг'") + " г.";
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

//Функция проверки заполнености РС "СтруктураКомпании"
//Параметры
// нет
//Возвращаемое значение
// Признак заполнености регистра, тип булево
// Истина - регистр содержит записи
// Ложь   - регистр не содержит записей
Функция СтруктураКомпанииЗаполнена() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	KPI_СтруктураКомпанииСрезПоследних.Сотрудник
	|ИЗ
	|	РегистрСведений.KPI_СтруктураКомпании.СрезПоследних(
	|			&Период,
	|			НЕ Уволен
	|				И НЕ СтруктураУдалена) КАК KPI_СтруктураКомпанииСрезПоследних";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	
	Возврат НЕ Запрос.Выполнить().Пустой();
		
КонецФункции

//Функция получает набор ролей конфигурации
//Параметры:
// нет
//Возвращаемое значение:
// Роли KPI, тип список значений
Функция РолиKPI() Экспорт
	
	КриптоМодуль = KPI_ОбщегоНазначенияСервер.ПолучитьКриптоМодуль();
	Возврат КриптоМодуль.РолиKPI(Истина,Ложь);
	
КонецФункции

//функция установки параметров сеанса при запуске системы
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция МодульСеанса_УстановкаПараметровСеанса() Экспорт
	
	Возврат KPI_ИнтерфейсСервер.МодульСеанса_УстановкаПараметровСеанса();
	
КонецФункции

//Функция получает КлючАналитики 
//Параметры
// Аналитика1, 				тип ЛюбаяСсылка, строка, число, дата, булево
// Аналитика2, 				тип ЛюбаяСсылка, строка, число, дата, булево
// Аналитика3, 				тип ЛюбаяСсылка, строка, число, дата, булево
// Аналитика4, 				тип ЛюбаяСсылка, строка, число, дата, булево
// Аналитика5, 				тип ЛюбаяСсылка, строка, число, дата, булево
//Возвращаемое значение
// СправочникСсылка.KPI_КлючиАналитики
Функция КлючАналитики (Аналитика1 = Неопределено, Аналитика2 = Неопределено, Аналитика3 = Неопределено, Аналитика4 = Неопределено, Аналитика5 = Неопределено) Экспорт
	
	Возврат KPI_ИнтерфейсСерверПовтИсп.КлючАналитики(Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5);					   
	
КонецФункции

//Функция получения запроса рабочего времени сотрудников
//Параметры
// НачалоПериода       - тип дата. (начало периода за который надо получить рабочее время
// КонецПериода        - тип дата. (конецпериода   за который надо получить рабочее время
// ОбъектУправления  
//	типы :   
// 		СправочникСсылка.KPI_Филиалы,   - Филиал, для сотрудников которого необходимо получить рабочее время
// 		СправочникСсылка.KPI_Сотрудники - Сотрудник, сотрудник для которого необходимо получить рабочее время.
//
//УчитыватьНеЯвки - тип булево, признак получения рабочего времени за вычетом невыхода сотрудника
Функция РабочееВремяСотрудников(НачалоПериода,КонецПериода,ОбъектУправления,УчитыватьНеЯвки = Истина) Экспорт
	
	Возврат KPI_ИнтерфейсСервер.РабочееВремяСотрудников(НачалоПериода,КонецПериода,ОбъектУправления,УчитыватьНеЯвки);
	
КонецФункции

//Процедура добавлвления подписи в сформированные отчеты
//Парамерты:
// Отчет - тип табличный документ
// Период - тип дата, дата из периода за который формируется отчет
Процедура ДобавитьПодписьСформированногоОтчета(Отчет,Период) Экспорт

	KPI_ИнтерфейсСервер.ДобавитьПодписьСформированногоОтчета(Отчет,Период);
	
КонецПроцедуры

//Функция для получения среза плановых начислений из РС "ПлановыеНачисления"
//Параметры:
// Период                   - тип дата, период за котрый получается срез
// ОбъектУправления         - тип СправочникСслыка.KPI_Сотрудники, сотрудник по которму надо получить срез
// Таблицей                 - тип булево, признак возврата среза в виде таблицы значений,
// (если Истина, то ТЗ, иначе ВыборкаИзРезультатаЗапроса)
// ДополнительныеПараметры  - тип структура
//
// Возвращаемое значение:
// 	Срез плановых начислений, тип таблица значений или ВыборкаИзРезультатаЗапроса 
Функция СрезПлановыхНачисленийОбъектаУправления(Период,ОбъектУправления = Неопределено,Таблицей = Истина,ДополнительныеПараметры = Неопределено) Экспорт
	
	 Возврат KPI_ИнтерфейсСервер.СрезПлановыхНачисленийОбъектаУправления(Период,ОбъектУправления,Таблицей,ДополнительныеПараметры);
	
КонецФункции

//Функция для получения ссылки на фото из РС "KPI_ФотоСотрудников"
//Параметры:
// ФизЛицоСотрудника - тип СправочникСсылка.ФизическиеЛица
//Возвращаемое значение
// ссылка на фото из РС "KPI_ФотоСотрудников", тип строка 
Функция ФотоСотрудников(ФизЛицоСотрудника) Экспорт

	Возврат KPI_ИнтерфейсСервер.ФотоСотрудников(ФизЛицоСотрудника);
	
КонецФункции