//Функция
//Параметры
// СтруктураКомпании - тип СправочникСсылка.KPI_СтруктураКомпании
// Дата              - тип дата, дата на которую надо получить сотрудника по структуре компании
//Возвращаемое значение
// тип СправочникСсылка.KPI_Сотрудник
Функция ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(СтруктураКомпании, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	KPI_СтруктураКомпанииСрезПоследних.Сотрудник
	|ИЗ
	|	РегистрСведений.KPI_СтруктураКомпании.СрезПоследних(
	|			&Дата,
	|			СтруктураКомпании = &СтруктураКомпании
	|				И НЕ Уволен
	|				И НЕ СтруктураУдалена) КАК KPI_СтруктураКомпанииСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("СтруктураКомпании", СтруктураКомпании);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда	
		Возврат Выборка.Сотрудник;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

//Функция
//Параметры
// СтруктураКомпании - тип СправочникСсылка.KPI_СтруктураКомпании
// Дата              - тип дата, дата на которую надо получить представление структуры компании
//Возвращаемое значение
// тип строка, представление компании
Функция ПолучитьПредставлениеПоСтруктуреКомпанииНаДату(СтруктураКомпании, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(KPI_СтруктураКомпанииСрезПоследних.СтруктураКомпании.Должность.Наименование, """") + "" ("" + ЕСТЬNULL(KPI_СтруктураКомпанииСрезПоследних.Сотрудник.ФизическоеЛицо.Наименование, """") + "")"" + ЕСТЬNULL("" *("" + KPI_СтруктураКомпанииСрезПоследних.Сотрудник.Квалификация.Наименование + "")"", """") КАК СтруктураКомпанииПредставление
	|ИЗ
	|	РегистрСведений.KPI_СтруктураКомпании.СрезПоследних(
	|			&ДатаФормирования,
	|			НЕ СтруктураУдалена
	|				И НЕ Уволен
	|				И СтруктураКомпании = &СтруктураКомпании) КАК KPI_СтруктураКомпанииСрезПоследних";
	
	
	Запрос.УстановитьПараметр("ДатаФормирования", КонецДня(Дата));
	Запрос.УстановитьПараметр("СтруктураКомпании", СтруктураКомпании);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда	
		Возврат Выборка.СтруктураКомпанииПредставление;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

//Функция
//Параметры
// СтруктураКомпании - тип СправочникСсылка.KPI_Сотрудники
//Возвращаемое значение
// тип СправочникСсылка.KPI_СтруктураКомпании
Функция ПолучитьСтруктуруКомпанииПоСотруднику(Сотрудник) Экспорт 
	Возврат Сотрудник.СтруктураКомпании;
КонецФункции

// Функция проверяет наличие аналитик для целевого показателя
Функция ЕстьАналитикиЦП(ЦП) Экспорт 
	ЕстьАналитики = Ложь;
	
	Для НомерАналитики = 1 по 5 Цикл
		Если Не ПустаяСтрока(ЦП["ТипАналитики" + НомерАналитики + "Представление"]) Тогда 
			ЕстьАналитики = Истина;
			Прервать; //найдена хотя бы одна аналитика
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьАналитики;
КонецФункции

// Функция получает вид расчета для смарт задачи из соответствующего документа планирования в этом периоде
Функция ПолучитьВидРасчетаСмартЗадачи(Дат, СтруктураКомпании, ПериодичностьПланирования) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_Планы.ВидРасчетаСмартЗадач
	|ИЗ
	|	РегистрНакопления.KPI_Планы КАК KPI_Планы
	|ГДЕ
	|	KPI_Планы.Регистратор ССЫЛКА Документ.KPI_Планирование
	|	И KPI_Планы.ЦелевойПоказатель = ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.СмартЗадача)
	|	И KPI_Планы.СтруктураКомпании = &СтруктураКомпании
	|	И KPI_Планы.ПериодичностьПланирования = &ПериодичностьПланирования
	|	И KPI_Планы.Период = &Дат";
	
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Дат, ПериодичностьПланирования);
	
	Запрос.УстановитьПараметр("Дат"                      , ГраницыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("СтруктураКомпании"        , СтруктураКомпании);
	Запрос.УстановитьПараметр("ПериодичностьПланирования", ПериодичностьПланирования);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Выгрузить().Количество() = 0 Тогда
		Возврат Перечисления.KPI_ВидыРасчетаСмартЗадач.Абсолютный;
	Иначе 
		Возврат Результат.Выгрузить()[0].ВидРасчетаСмартЗадач;
	КонецЕсли;
	
КонецФункции

//Функция получает даты границ периода
//Параметры 
// Дата 		 - тип дата, дата внутри периода
// Периодичность - тип ПеречислениеСсылка.KPI_ПериодичностьПланирования
//Возвращаемое значение
// тип Структура
// элементы
// НачалоПериода - тип дата
// КонецПериода  - тип дата
Функция ГраницыПериода(Дата, Периодичность) Экспорт
	
	Если Периодичность = Перечисления.KPI_ПериодичностьПланирования.День Тогда
		НачалоПериода           = НачалоДня(Дата);
		КонецПериода            = КонецДня(Дата);
	ИначеЕсли Периодичность = Перечисления.KPI_ПериодичностьПланирования.Неделя Тогда
		НачалоПериода           = НачалоНедели(Дата);
		КонецПериода            = КонецНедели(Дата);
	ИначеЕсли Периодичность = Перечисления.KPI_ПериодичностьПланирования.Месяц Тогда
		НачалоПериода           = НачалоМесяца(Дата);
		КонецПериода            = КонецМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.KPI_ПериодичностьПланирования.Квартал Тогда
		НачалоПериода           = НачалоКвартала(Дата);
		КонецПериода            = КонецКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.KPI_ПериодичностьПланирования.Полугодие Тогда
		Если Месяц(Дата) <= 6 Тогда
			НачалоПериода       = НачалоГода(Дата);
			КонецПериода        = КонецДня(Дата(Год(Дата), 6, 30));
		Иначе
			НачалоПериода       = НачалоДня(Дата(Год(Дата), 7, 1));
			КонецПериода        = КонецГода(Дата);
		КонецЕсли;
	ИначеЕсли Периодичность = Перечисления.KPI_ПериодичностьПланирования.Год Тогда
		НачалоПериода           = НачалоГода(Дата);
		КонецПериода            = КонецГода(Дата);
	ИначеЕсли Периодичность = Перечисления.KPI_ПериодичностьПланирования.ПустаяСсылка() Тогда
		НачалоПериода           = Дата('00010101');
		КонецПериода            = Дата('00010101');
	КонецЕсли;
	
	СтруктураГраницыПериода = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	Возврат СтруктураГраницыПериода;
	
КонецФункции

&НаСервере
//Функция получает планы факты с задаными интервалами периодичности
//Параметры
//  ДатаСбораФактов           - тип дата, дата на которую выбираются факты
//  НачалоПериодаПланирования - тип дата начала периода за который получают планы
//  КонецПериодаПланирования  - тип дата конец периода за который получают планы
//  ПериодичностьПланирования - тип ПеричислениеСсылка.ПериодичностьПланирования
//  ОбъектыУправления         - тип массив (элементы СправочникСслыка.KPI_Сотрудники или СправочникСслыка.KPI_СтруктураКомпании) или СправочникСслыка.KPI_Сотрудники или СправочникСслыка.KPI_СтруктураКомпании
//  ЦелевыеПоказатели         - тип массив (элементы СправочникСслыка.KPI_ЦелевыеПоказатели) или СправочникСслыка.KPI_ЦелевыеПоказатели
//  ПредставлениеАналитик     - тип булево, выводит представления по аналитикам
//  Ответственные             - тип массив (элементы СправочникСслыка.KPI_СтруктураКомпании) или СправочникСслыка.KPI_СтруктураКомпании
//Возвращаемое значение
//  ПланыФакты                - тип таблица значений.
Функция ПолучитьПланыИФакты(ДатаСбораФактов, НачалоПериодаПланирования, КонецПериодаПланирования, ПериодичностьПланирования, Знач ОбъектыУправления, Знач ЦелевыеПоказатели = Неопределено, ПредставлениеАналитик = Ложь, Знач Ответственные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_Планы.СтруктураКомпании КАК СтруктураКомпании,
	|	KPI_Планы.ЦелевойПоказатель КАК ЦелевойПоказатель,
	|	СУММА(KPI_Планы.План) КАК План,
	|	СУММА(ВЫБОР
	|			КОГДА KPI_Планы.Регистратор ССЫЛКА Документ.KPI_Планирование
	|				ТОГДА KPI_Планы.Вес
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Вес,
	|	МАКСИМУМ(KPI_Планы.НижняяГраница) КАК НижняяГраница,
	|	МАКСИМУМ(KPI_Планы.ВерхняяГраница) КАК ВерхняяГраница,
	|	KPI_Планы.ВидРасчетаСмартЗадач,
	|	KPI_Планы.Ответственный,
	|	KPI_Планы.Регистратор,
	|	KPI_Планы.КлючАналитики,
	|	ПланыСмартЗадач.ПланСмартЗадач
	|ПОМЕСТИТЬ Планы
	|ИЗ
	|	РегистрНакопления.KPI_Планы КАК KPI_Планы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			KPI_Планы.СтруктураКомпании КАК СтруктураКомпании,
	|			СУММА(KPI_Планы.План) КАК ПланСмартЗадач,
	|			KPI_Планы.ВидРасчетаСмартЗадач КАК ВидРасчетаСмартЗадач,
	|			KPI_Планы.Ответственный КАК Ответственный,
	|			KPI_Планы.КлючАналитики КАК КлючАналитики
	|		ИЗ
	|			РегистрНакопления.KPI_Планы КАК KPI_Планы
	|		ГДЕ
	|			KPI_Планы.Период МЕЖДУ &ДатНач И &ДатКон
	|			И KPI_Планы.ПериодичностьПланирования = &ПериодичностьПланирования
	|			И KPI_Планы.Регистратор ССЫЛКА Документ.KPI_СмартЗадача
	|			И &ОтборПланСтруктураКомпании
	|		
	|		СГРУППИРОВАТЬ ПО
	|			KPI_Планы.СтруктураКомпании,
	|			KPI_Планы.ВидРасчетаСмартЗадач,
	|			KPI_Планы.Ответственный,
	|			KPI_Планы.КлючАналитики) КАК ПланыСмартЗадач
	|		ПО KPI_Планы.СтруктураКомпании = ПланыСмартЗадач.СтруктураКомпании
	|			И KPI_Планы.КлючАналитики = ПланыСмартЗадач.КлючАналитики
	|ГДЕ
	|	KPI_Планы.Период МЕЖДУ &ДатНач И &ДатКон
	|	И KPI_Планы.ПериодичностьПланирования = &ПериодичностьПланирования
	|	И &ОтборПланЦелевойПоказатель
	|	И KPI_Планы.Регистратор ССЫЛКА Документ.KPI_Планирование
	|	И &ОтборПланОтветственный
	|	И &ОтборПланСтруктураКомпании
	|
	|СГРУППИРОВАТЬ ПО
	|	KPI_Планы.СтруктураКомпании,
	|	KPI_Планы.ЦелевойПоказатель,
	|	KPI_Планы.Ответственный,
	|	KPI_Планы.ВидРасчетаСмартЗадач,
	|	KPI_Планы.Регистратор,
	|	KPI_Планы.КлючАналитики,
	|	KPI_Планы.План,
	|	ПланыСмартЗадач.ПланСмартЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	KPI_Факты.ЦелевойПоказатель КАК ЦелевойПоказатель,
	|	KPI_Факты.СтруктураКомпании КАК СтруктураКомпании,
	|	СУММА(KPI_Факты.Факт) КАК Факт,
	|	KPI_Факты.КлючАналитики
	|ПОМЕСТИТЬ Факты
	|ИЗ
	|	РегистрНакопления.KPI_Факты КАК KPI_Факты
	|ГДЕ
	|	KPI_Факты.Период МЕЖДУ &ДатНач И &ДатаСбораФактов
	|	И ВЫБОР
	|			КОГДА KPI_Факты.ЦелевойПоказатель = ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.Стандарт)
	|					И KPI_Факты.КлючАналитики.Аналитика3 = KPI_Факты.КлючАналитики.Аналитика4
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И &ОтборФактЦелевойПоказатель
	|	И &ОтборФактСтруктураКомпании
	|
	|СГРУППИРОВАТЬ ПО
	|	KPI_Факты.ЦелевойПоказатель,
	|	KPI_Факты.СтруктураКомпании,
	|	KPI_Факты.КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Планы.ВидРасчетаСмартЗадач,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Планы.ЦелевойПоказатель = ЗНАЧЕНИЕ(Справочник.KPI_Целевыепоказатели.СмартЗадача)
	|				ТОГДА ВЫБОР
	|						КОГДА Планы.ВидРасчетаСмартЗадач = ЗНАЧЕНИЕ(Перечисление.KPI_ВидыРасчетаСмартЗадач.Относительный)
	|							ТОГДА 100
	|						ИНАЧЕ ВЫБОР
	|								КОГДА Планы.План = 0
	|									ТОГДА Планы.ПланСмартЗадач
	|								ИНАЧЕ Планы.План
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ Планы.План
	|		КОНЕЦ, 0) КАК План,
	|	Планы.Вес,
	|	Планы.НижняяГраница,
	|	Планы.ВерхняяГраница,
	|	Планы.Ответственный,
	|	ИСТИНА КАК СветофорКартинка,
	|	Планы.Регистратор,
	|	Планы.ЦелевойПоказатель,
	|	Планы.ЦелевойПоказатель.Описание,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Планы.ВидРасчетаСмартЗадач = ЗНАЧЕНИЕ(Перечисление.KPI_ВидыРасчетаСмартЗадач.Относительный)
	|					И Факты.ЦелевойПоказатель = ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.СмартЗадача)
	|				ТОГДА ВЫБОР
	|						КОГДА Планы.ПланСмартЗадач = 0
	|							ТОГДА 0
	|						ИНАЧЕ 100 * Факты.Факт / Планы.ПланСмартЗадач
	|					КОНЕЦ
	|			ИНАЧЕ Факты.Факт
	|		КОНЕЦ, 0) КАК Факт,
	|	Планы.СтруктураКомпании,
	|	Планы.КлючАналитики,
	|	Планы.ПланСмартЗадач
	|ПОМЕСТИТЬ ПланыФактыБезСверткиПоСтандартам
	|ИЗ
	|	Планы КАК Планы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Факты КАК Факты
	|		ПО Планы.ЦелевойПоказатель = Факты.ЦелевойПоказатель
	|			И Планы.СтруктураКомпании = Факты.СтруктураКомпании
	|			И (ВЫБОР
	|				КОГДА Планы.КлючАналитики = ЗНАЧЕНИЕ(Справочник.KPI_КлючиАналитики.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Планы.КлючАналитики = Факты.КлючАналитики
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыФактыБезСверткиПоСтандартам.ВидРасчетаСмартЗадач,
	|	ПланыФактыБезСверткиПоСтандартам.Вес,
	|	ПланыФактыБезСверткиПоСтандартам.НижняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.ВерхняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.Ответственный,
	|	ПланыФактыБезСверткиПоСтандартам.СветофорКартинка,
	|	ПланыФактыБезСверткиПоСтандартам.Регистратор,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказательОписание,
	|	СРЕДНЕЕ(ПланыФактыБезСверткиПоСтандартам.Факт) КАК Факт,
	|	ПланыФактыБезСверткиПоСтандартам.СтруктураКомпании,
	|	ПланыФактыБезСверткиПоСтандартам.План,
	|	ПланыФактыБезСверткиПоСтандартам.КлючАналитики
	|ПОМЕСТИТЬ ПланыИФактыБезАнализа
	|ИЗ
	|	ПланыФактыБезСверткиПоСтандартам КАК ПланыФактыБезСверткиПоСтандартам
	|ГДЕ
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель.АгрегированиеФакта = ЗНАЧЕНИЕ(Перечисление.KPI_Агрегирование.Среднее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель,
	|	ПланыФактыБезСверткиПоСтандартам.ВидРасчетаСмартЗадач,
	|	ПланыФактыБезСверткиПоСтандартам.Вес,
	|	ПланыФактыБезСверткиПоСтандартам.НижняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.ВерхняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.Ответственный,
	|	ПланыФактыБезСверткиПоСтандартам.СветофорКартинка,
	|	ПланыФактыБезСверткиПоСтандартам.Регистратор,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказательОписание,
	|	ПланыФактыБезСверткиПоСтандартам.СтруктураКомпании,
	|	ПланыФактыБезСверткиПоСтандартам.План,
	|	ПланыФактыБезСверткиПоСтандартам.КлючАналитики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыФактыБезСверткиПоСтандартам.ВидРасчетаСмартЗадач,
	|	ПланыФактыБезСверткиПоСтандартам.Вес,
	|	ПланыФактыБезСверткиПоСтандартам.НижняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.ВерхняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.Ответственный,
	|	ПланыФактыБезСверткиПоСтандартам.СветофорКартинка,
	|	ПланыФактыБезСверткиПоСтандартам.Регистратор,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказательОписание,
	|	МИНИМУМ(ПланыФактыБезСверткиПоСтандартам.Факт),
	|	ПланыФактыБезСверткиПоСтандартам.СтруктураКомпании,
	|	ПланыФактыБезСверткиПоСтандартам.План,
	|	ПланыФактыБезСверткиПоСтандартам.КлючАналитики
	|ИЗ
	|	ПланыФактыБезСверткиПоСтандартам КАК ПланыФактыБезСверткиПоСтандартам
	|ГДЕ
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель.АгрегированиеФакта = ЗНАЧЕНИЕ(Перечисление.KPI_Агрегирование.Минимум)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель,
	|	ПланыФактыБезСверткиПоСтандартам.ВидРасчетаСмартЗадач,
	|	ПланыФактыБезСверткиПоСтандартам.Вес,
	|	ПланыФактыБезСверткиПоСтандартам.НижняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.ВерхняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.Ответственный,
	|	ПланыФактыБезСверткиПоСтандартам.СветофорКартинка,
	|	ПланыФактыБезСверткиПоСтандартам.Регистратор,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказательОписание,
	|	ПланыФактыБезСверткиПоСтандартам.СтруктураКомпании,
	|	ПланыФактыБезСверткиПоСтандартам.План,
	|	ПланыФактыБезСверткиПоСтандартам.КлючАналитики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыФактыБезСверткиПоСтандартам.ВидРасчетаСмартЗадач,
	|	ПланыФактыБезСверткиПоСтандартам.Вес,
	|	ПланыФактыБезСверткиПоСтандартам.НижняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.ВерхняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.Ответственный,
	|	ПланыФактыБезСверткиПоСтандартам.СветофорКартинка,
	|	ПланыФактыБезСверткиПоСтандартам.Регистратор,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказательОписание,
	|	МАКСИМУМ(ПланыФактыБезСверткиПоСтандартам.Факт),
	|	ПланыФактыБезСверткиПоСтандартам.СтруктураКомпании,
	|	ПланыФактыБезСверткиПоСтандартам.План,
	|	ПланыФактыБезСверткиПоСтандартам.КлючАналитики
	|ИЗ
	|	ПланыФактыБезСверткиПоСтандартам КАК ПланыФактыБезСверткиПоСтандартам
	|ГДЕ
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель.АгрегированиеФакта = ЗНАЧЕНИЕ(Перечисление.KPI_Агрегирование.Максимум)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель,
	|	ПланыФактыБезСверткиПоСтандартам.ВидРасчетаСмартЗадач,
	|	ПланыФактыБезСверткиПоСтандартам.Вес,
	|	ПланыФактыБезСверткиПоСтандартам.НижняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.ВерхняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.Ответственный,
	|	ПланыФактыБезСверткиПоСтандартам.СветофорКартинка,
	|	ПланыФактыБезСверткиПоСтандартам.Регистратор,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказательОписание,
	|	ПланыФактыБезСверткиПоСтандартам.СтруктураКомпании,
	|	ПланыФактыБезСверткиПоСтандартам.План,
	|	ПланыФактыБезСверткиПоСтандартам.КлючАналитики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыФактыБезСверткиПоСтандартам.ВидРасчетаСмартЗадач,
	|	ПланыФактыБезСверткиПоСтандартам.Вес,
	|	ПланыФактыБезСверткиПоСтандартам.НижняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.ВерхняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.Ответственный,
	|	ПланыФактыБезСверткиПоСтандартам.СветофорКартинка,
	|	ПланыФактыБезСверткиПоСтандартам.Регистратор,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказательОписание,
	|	СУММА(ПланыФактыБезСверткиПоСтандартам.Факт),
	|	ПланыФактыБезСверткиПоСтандартам.СтруктураКомпании,
	|	ПланыФактыБезСверткиПоСтандартам.План,
	|	ПланыФактыБезСверткиПоСтандартам.КлючАналитики
	|ИЗ
	|	ПланыФактыБезСверткиПоСтандартам КАК ПланыФактыБезСверткиПоСтандартам
	|ГДЕ
	|	(ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель = ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.Стандарт)
	|			ИЛИ ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель = ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.СмартЗадача)
	|			ИЛИ ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель.АгрегированиеФакта = ЗНАЧЕНИЕ(Перечисление.KPI_Агрегирование.Сумма))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказатель,
	|	ПланыФактыБезСверткиПоСтандартам.ВидРасчетаСмартЗадач,
	|	ПланыФактыБезСверткиПоСтандартам.Вес,
	|	ПланыФактыБезСверткиПоСтандартам.НижняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.ВерхняяГраница,
	|	ПланыФактыБезСверткиПоСтандартам.Ответственный,
	|	ПланыФактыБезСверткиПоСтандартам.СветофорКартинка,
	|	ПланыФактыБезСверткиПоСтандартам.Регистратор,
	|	ПланыФактыБезСверткиПоСтандартам.ЦелевойПоказательОписание,
	|	ПланыФактыБезСверткиПоСтандартам.СтруктураКомпании,
	|	ПланыФактыБезСверткиПоСтандартам.План,
	|	ПланыФактыБезСверткиПоСтандартам.КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыИФактыБезАнализа.ВидРасчетаСмартЗадач,
	|	ПланыИФактыБезАнализа.Вес,
	|	ПланыИФактыБезАнализа.НижняяГраница,
	|	ПланыИФактыБезАнализа.ВерхняяГраница,
	|	ПланыИФактыБезАнализа.Ответственный,
	|	ПланыИФактыБезАнализа.СветофорКартинка,
	|	ПланыИФактыБезАнализа.Регистратор,
	|	ПланыИФактыБезАнализа.ЦелевойПоказатель,
	|	ПланыИФактыБезАнализа.ЦелевойПоказательОписание,
	|	ПланыИФактыБезАнализа.Факт,
	|	ПланыИФактыБезАнализа.СтруктураКомпании,
	|	ПланыИФактыБезАнализа.План,
	|	ВЫБОР
	|		КОГДА KPI_Анализ.Анализ ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ""...""
	|	КОНЕЦ КАК Анализ,
	|	ПланыИФактыБезАнализа.КлючАналитики
	|ИЗ
	|	ПланыИФактыБезАнализа КАК ПланыИФактыБезАнализа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.KPI_Анализ КАК KPI_Анализ
	|		ПО ПланыИФактыБезАнализа.Регистратор = KPI_Анализ.Основание
	|			И ПланыИФактыБезАнализа.ЦелевойПоказатель = KPI_Анализ.ЦелевойПоказатель";
	
	Запрос.УстановитьПараметр("ДатНач"                   , НачалоПериодаПланирования);
	Запрос.УстановитьПараметр("ДатКон"                   , КонецПериодаПланирования);
	Запрос.УстановитьПараметр("ДатаСбораФактов"          , ДатаСбораФактов);
	Запрос.УстановитьПараметр("ПериодичностьПланирования", ПериодичностьПланирования);
	
	
	Если ЗначениеЗаполнено(ОбъектыУправления) Тогда	
		Если НЕ ТипЗнч(ОбъектыУправления) = Тип("Массив") Тогда
			мОбъектыУправления = Новый Массив;
			мОбъектыУправления.Добавить(ОбъектыУправления);
			ОбъектыУправления = мОбъектыУправления;
		КонецЕсли;
		
		//Если дан массив сотрудников, то вместо него подставим массив структур компании
		СтруктурныеПодразделения = Новый Массив;
		Для Каждого ОбъектУправления из ОбъектыУправления Цикл
			Если ТипЗнч(ОбъектУправления) = Тип("СправочникСсылка.KPI_Сотрудники") Тогда
				СтруктурныеПодразделения.Добавить(ОбъектУправления.СтруктураКомпании);
			Иначе 
				СтруктурныеПодразделения.Добавить(ОбъектУправления);
			КонецЕсли;
		КонецЦикла;
		ОбъектыУправления = СтруктурныеПодразделения;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПланСтруктураКомпании", "И KPI_Планы.СтруктураКомпании В (&ОбъектыУправления)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборФактСтруктураКомпании", "И KPI_Факты.СтруктураКомпании В (&ОбъектыУправления)");
		Запрос.УстановитьПараметр("ОбъектыУправления", ОбъектыУправления);
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПланСтруктураКомпании", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборФактСтруктураКомпании", "");
	КонецЕсли;
	
	
	
	Если ЗначениеЗаполнено(Ответственные) Тогда	
		Если НЕ ТипЗнч(Ответственные) = Тип("Массив") Тогда
			мОтветственные = Новый Массив;
			мОтветственные.Добавить(Ответственные);
			Ответственные = мОтветственные;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПланОтветственный", "И KPI_Планы.Ответственный В (&Ответственные)");
		Запрос.УстановитьПараметр("Ответственные", Ответственные);
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПланОтветственный", "");
	КонецЕсли;
	
	
	
	Если ЗначениеЗаполнено(ЦелевыеПоказатели) Тогда
		Если НЕ ТипЗнч(ЦелевыеПоказатели) = Тип("Массив") Тогда
			мЦелевыеПоказатели = Новый Массив;
			мЦелевыеПоказатели.Добавить(ЦелевыеПоказатели);
			ЦелевыеПоказатели = мЦелевыеПоказатели;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПланЦелевойПоказатель", "И KPI_Планы.ЦелевойПоказатель В (&ЦелевыеПоказатели)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборФактЦелевойПоказатель", "И KPI_Факты.ЦелевойПоказатель В (&ЦелевыеПоказатели)");
		Запрос.УстановитьПараметр("ЦелевыеПоказатели", ЦелевыеПоказатели);
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПланЦелевойПоказатель", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборФактЦелевойПоказатель", "");
	КонецЕсли;
	
	
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	
	
	//добавим колонки, зависящие от планов и фактов
	ТЗ.Колонки.Добавить("Прогноз");
	ТЗ.Колонки.Добавить("Светофор");
	ТЗ.Колонки.Добавить("ПроцентВыполнения");
	ТЗ.Колонки.Добавить("КПР");
	
	
	ВидПоказателяПрямой = Перечисления.KPI_ВидыПоказателей.Прямой;
	ВидПоказателяОбратный = Перечисления.KPI_ВидыПоказателей.Обратный;
	ВидПоказателяПредельный = Перечисления.KPI_ВидыПоказателей.Предельный;
	ВидПоказателяПоФормуле = Перечисления.KPI_ВидыПоказателей.ПоФормуле;
	
	ЦПСмартЗадача = Справочники.KPI_ЦелевыеПоказатели.СмартЗадача;
	ЦПСтандарт = Справочники.KPI_ЦелевыеПоказатели.Стандарт;
	
	ТипРасчетаПланаВручную = Перечисления.KPI_ТипыРасчетаПлана.Вручную;
	ТипРасчетаПланаПоФормуле = Перечисления.KPI_ТипыРасчетаПлана.ПоФормуле;
	
	ТипРасчетаФактаВручную = Перечисления.KPI_ТипыРасчетаФакта.Вручную;
	ТипРасчетаФактаПоФормуле = Перечисления.KPI_ТипыРасчетаФакта.ПоФормуле;
	
	
	//Рассчитаем планы для целевых показателей с типом расчета значения "ПоФормуле"
	Для Каждого Стр из ТЗ Цикл
		Если Не Стр.ЦелевойПоказатель = ЦПСмартЗадача
			И Не Стр.ЦелевойПоказатель = ЦПСтандарт Тогда
			
			Если Стр.ЦелевойПоказатель.ТипРасчетаЗначенияПлана = ТипРасчетаПланаПоФормуле Тогда
				//считаем план рекурсивной функцией
				//Стр.План = ПолучитьПланПоФормуле(Стр.ЦелевойПоказатель, ТабЗначПланы);
				Стр.План = ПолучитьПланВРекурсии(Стр.ЦелевойПоказатель, ДатаСбораФактов, ПериодичностьПланирования, Стр.СтруктураКомпании);
			КонецЕсли;
			
			Если Стр.ЦелевойПоказатель.ТипРасчетаЗначенияФакта = ТипРасчетаФактаПоФормуле Тогда
				//считаем факт рекурсивной функцией
				Стр.Факт = ПолучитьФактВРекурсии(Стр.ЦелевойПоказатель, ДатаСбораФактов, ПериодичностьПланирования, Стр.СтруктураКомпании);
			КонецЕсли;
		КонецЕсли;
		
		//рассчитаем зависимые от планов и фактов показатели
		Если ДатаСбораФактов = НачалоПериодаПланирования Тогда
			Стр.Прогноз = Стр.Факт;	
		Иначе 
			Стр.Прогноз = Стр.Факт * (КонецПериодаПланирования - НачалоПериодаПланирования) / (ДатаСбораФактов - НачалоПериодаПланирования);
		КонецЕсли;
		
		
		Если Не Стр.ЦелевойПоказатель.Инвертирование      И Стр.Прогноз >= Стр.ВерхняяГраница Тогда
			Стр.Светофор = "Зеленый";
		ИначеЕсли Не Стр.ЦелевойПоказатель.Инвертирование И Стр.Прогноз < Стр.НижняяГраница Тогда
			Стр.Светофор = "Красный";
		ИначеЕсли Не Стр.ЦелевойПоказатель.Инвертирование И Стр.Прогноз >= Стр.НижняяГраница И Стр.Прогноз < Стр.ВерхняяГраница Тогда
			Стр.Светофор = "Желтый";
		ИначеЕсли Стр.ЦелевойПоказатель.Инвертирование    И Стр.Прогноз > Стр.ВерхняяГраница Тогда
			Стр.Светофор = "Красный";
		ИначеЕсли Стр.ЦелевойПоказатель.Инвертирование    И Стр.Прогноз <= Стр.НижняяГраница Тогда
			Стр.Светофор = "Зеленый";
		ИначеЕсли Стр.ЦелевойПоказатель.Инвертирование    И Стр.Прогноз > Стр.НижняяГраница И Стр.Прогноз <= Стр.ВерхняяГраница Тогда
			Стр.Светофор = "Желтый";
		КонецЕсли;
		
		Стр.ПроцентВыполнения = 0;
		Если Не Стр.ЦелевойПоказатель = ЦПСмартЗадача И Не Стр.ЦелевойПоказатель = ЦПСтандарт Тогда
			
			Если Стр.ЦелевойПоказатель.РасчетРезультативности = ВидПоказателяПрямой И Не Стр.План = 0 Тогда
				Стр.ПроцентВыполнения = 100 * Стр.Факт / Стр.План;
			ИначеЕсли Стр.ЦелевойПоказатель.РасчетРезультативности = ВидПоказателяОбратный И Не Стр.Факт = 0 Тогда
				Стр.ПроцентВыполнения = 100 * Стр.План / Стр.Факт;
			ИначеЕсли Стр.ЦелевойПоказатель.РасчетРезультативности = ВидПоказателяПредельный И Не Стр.План = 0 Тогда
				Стр.ПроцентВыполнения = 100 * (1 - Стр.Факт / Стр.План);
			ИначеЕсли Стр.ЦелевойПоказатель.РасчетРезультативности = ВидПоказателяПоФормуле Тогда 
				Формула = Стр.ЦелевойПоказатель.Формула;
				Формула = СтрЗаменить(Формула, "[ФЗ]", Формат(Число(Стр.Факт),           "ЧГ=; ЧН=0"));
				Формула = СтрЗаменить(Формула, "[МЗ]", Формат(Число(Стр.ВерхняяГраница), "ЧГ=; ЧН=0"));
				Формула = СтрЗаменить(Формула, "[ПЗ]", Формат(Число(Стр.НижняяГраница),  "ЧГ=; ЧН=0"));
				Формула = СтрЗаменить(Формула, "[ЦЗ]", Формат(Число(Стр.План),           "ЧГ=; ЧН=0"));
				
				Формула = СтрЗаменить(Формула,",",".");
				Формула = СтрЗаменить(Формула," ","");
				Выполнить("Стр.ПроцентВыполнения = " + Формула);
				
				Стр.ПроцентВыполнения = Справочники.KPI_Шкалы.ЗначениеРесурсаЦелевогоПоказателяПоШкале(Стр.ЦелевойПоказатель.Шкала, Стр.ПроцентВыполнения);
				
			КонецЕсли;
			
			
		ИначеЕсли (Стр.ЦелевойПоказатель = ЦПСмартЗадача Или Стр.ЦелевойПоказатель = ЦПСтандарт) И Не Стр.План = 0 Тогда
			Стр.ПроцентВыполнения = 100 * Стр.Факт / Стр.План
		КонецЕсли;
		
		
		Стр.КПР = Стр.ПроцентВыполнения * Стр.Вес / 100;
		
		Стр.КПР               = Окр(Стр.КПР, 1);
		Стр.Прогноз           = Окр(Стр.Прогноз, 1);
		Стр.ПроцентВыполнения = Окр(Стр.ПроцентВыполнения, 1);
		
	КонецЦикла;	
	
	//Для Каждого стр из ТЗ Цикл 
	//	Если стр.ПроцентВыполнения = Неопределено Тогда
	//		Формула = стр.ЦелевойПоказатель.Формула;
	//		Формула = СтрЗаменить(Формула, "[ФЗ]", стр.Факт);
	//		Формула = СтрЗаменить(Формула, "[МЗ]", стр.ВерхняяГраница);
	//		Формула = СтрЗаменить(Формула, "[ПЗ]", стр.НижняяГраница);
	//		Формула = СтрЗаменить(Формула, "[ЦЗ]", стр.План);
	//		Выполнить("стр.ПроцентВыполнения = " + Формула);
	//	КонецЕсли;
	//	
	//	стр.КПР = стр.ПроцентВыполнения * стр.Вес / 100;
	//КонецЦикла;
	
	Массив = Новый Массив();
	Массив.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(999);
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , , КС);
	
	Если ПредставлениеАналитик Тогда
		ТЗ.Колонки.Добавить("ПредставлениеАналитики", ОписаниеТиповС);
		Для Каждого Стр из ТЗ Цикл
			Стр.ПредставлениеАналитики = KPI_ИнтерфейсСерверПовтИсп.ПредставлениеКлючаАналитики(Стр.КлючАналитики);
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат ТЗ;
	
КонецФункции

//Получает значение плана для целевых показателей использующих формулу
//Параметры:
// ЦП                - тип СправочникСсылка.KPI_ЦелевыеПоказатели, 
//							целевой показатель для которого необходимо получить план
// Дат               - тип дата, дата на которую получают план
// Периодичность     - тип ПеречислениеСсылка.KPI_ПериодичностьПланирования
// СтруктураКомпании - тип СправочникСсылка.KPI_СтруктураКомпании, для которой получается план
&НаСервере
Функция ПолучитьПланВРекурсии(ЦП, Дат, Периодичность, СтруктураКомпании)
	
	ПланЗначение = 0;
	
	Если ЦП.КолВоПериодовНазад <> 0 Тогда
		ДатаПлановНач = KPI_ИнтерфейсКлиентСервер.ПолучитьДатуВПредыдущемПериоде(Дат, Периодичность, ЦП.КолВоПериодовНазад);
		ДатаПлановКон = Дат;
	Иначе 
		ДатаПлановНач = Дат;
		ДатаПлановКон = Дат;
	КонецЕсли;
	
	ГраницыПериодаНач = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ДатаПлановНач, Периодичность);
	ГраницыПериодаКон = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ДатаПлановКон, Периодичность);
	
	ФормулаПлана = ЦП.ФормулаСписокПлан;
	
	//получим таблицу значений с подчиненными целевыми показателями, представлениями и значениями планов
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_ЦелевыеПоказателиФормулаПлана.ЦелевойПоказатель КАК ЦелевойПоказатель,
	|	KPI_ЦелевыеПоказателиФормулаПлана.Представление,
	|	KPI_ЦелевыеПоказателиФормулаПлана.КлючАналитики
	|ПОМЕСТИТЬ ГлавныйЦП
	|ИЗ
	|	Справочник.KPI_ЦелевыеПоказатели.ФормулаПлана КАК KPI_ЦелевыеПоказателиФормулаПлана
	|ГДЕ
	|	KPI_ЦелевыеПоказателиФормулаПлана.Ссылка = &ЦП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_ПланыОбороты.ПланОборот,
	|	KPI_ПланыОбороты.ЦелевойПоказатель КАК ЦелевойПоказатель,
	|	KPI_ПланыОбороты.СтруктураКомпании,
	|	KPI_ПланыОбороты.КлючАналитики
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	РегистрНакопления.KPI_Планы.Обороты(
	|			&ДатНач,
	|			&ДатКон,
	|			Авто,
	|			ПериодичностьПланирования = &Периодичность
	|				И ЦелевойПоказатель В
	|					(ВЫБРАТЬ
	|						ГлавныйЦП.ЦелевойПоказатель
	|					ИЗ
	|						ГлавныйЦП КАК ГлавныйЦП)
	|				И СтруктураКомпании В (&Массив)) КАК KPI_ПланыОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГлавныйЦП.ЦелевойПоказатель,
	|	ГлавныйЦП.Представление,
	|	СУММА(ЕСТЬNULL(Обороты.ПланОборот, 0)) КАК ПланОборот
	|ИЗ
	|	ГлавныйЦП КАК ГлавныйЦП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО (Обороты.КлючАналитики = ГлавныйЦП.КлючАналитики)
	|			И (Обороты.ЦелевойПоказатель = ГлавныйЦП.ЦелевойПоказатель)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГлавныйЦП.ЦелевойПоказатель,
	|	ГлавныйЦП.Представление";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Авто", Периодичность);	
	
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("ДатНач", ГраницыПериодаНач.НачалоПериода);
	Запрос.УстановитьПараметр("ДатКон", КонецДня(Дат));
	Запрос.УстановитьПараметр("ЦП", ЦП);
	
	Массив = Новый Массив;
	Если ЦП.ВидСвязиПлана = Перечисления.KPI_ВидыСвязиФормулы.ПоТекущейСтруктуре Тогда
		Массив.Добавить(СтруктураКомпании);
	ИначеЕсли ЦП.ВидСвязиПлана = Перечисления.KPI_ВидыСвязиФормулы.ВСписке Тогда
		Массив = ЗначениеИзСтрокиВнутр(ЦП.ЭлементыСвязейПлан);
	ИначеЕсли ЦП.ВидСвязиПлана = Перечисления.KPI_ВидыСвязиФормулы.ВИерархии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СтруктураКомпании В (&Массив)", "И СтруктураКомпании В ИЕРАРХИИ (&Массив)");
		Массив = ЗначениеИзСтрокиВнутр(ЦП.ЭлементыСвязейПлан);
	ИначеЕсли ЦП.ВидСвязиПлана = Перечисления.KPI_ВидыСвязиФормулы.ПоВсейСтруктуре Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СтруктураКомпании В (&Массив)", "");	
	КонецЕсли;
	Запрос.УстановитьПараметр("Массив", Массив);
	
	Если ЦП.АгрегированиеПлана = Перечисления.KPI_Агрегирование.Среднее Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА", "СРЕДНЕЕ");
	ИначеЕсли ЦП.АгрегированиеПлана = Перечисления.KPI_Агрегирование.Максимум Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА", "МАКСИМУМ");
	ИначеЕсли ЦП.АгрегированиеПлана = Перечисления.KPI_Агрегирование.Минимум Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА", "МИНИМУМ");
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	РезТаблЗнач = Результат.Выгрузить();
	
	//уберем из таблицы целевые показатели, которых нет в формуле расчета плана
	н = 0;
	Пока н < РезТаблЗнач.Количество() Цикл
		Если Найти(ФормулаПлана, "[" + СокрЛП(РезТаблЗнач.Получить(н).Представление) + "]") = 0 Тогда
			РезТаблЗнач.Удалить(н);
		Иначе 
			н = н + 1;	
		КонецЕсли;
	КонецЦикла;
	
	
	Для каждого Стр Из РезТаблЗнач Цикл
		Если Стр.ЦелевойПоказатель.ТипРасчетаЗначенияПлана = Перечисления.KPI_ТипыРасчетаПлана.ПоФормуле Тогда
			//рассчитываем значение плана рекурсивно
			Стр.ПланОборот = ПолучитьПланВРекурсии(Стр.ЦелевойПоказатель, Дат, Периодичность, СтруктураКомпании);
		КонецЕсли;
		
		ФормулаПлана = СтрЗаменить(ФормулаПлана, "[" + Стр.Представление + "]", "(" + СтрЗаменить(Формат(Стр.ПланОборот, "ЧГ=; ЧН=0"), ",", ".") + ")");
	КонецЦикла;
	
	ФормулаФакта = СтрЗаменить(ФормулаФакта, " ", ""); // удалим простые пробелы в формуле (пробелы в представлении сюда уже не дойдут)
	ФормулаПлана = СтрЗаменить(ФормулаПлана, " ", ""); // !!! Неразрывный пробел (код символа = 160)
	ПланЗначение = Вычислить(ФормулаПлана);
	
	Возврат ПланЗначение;
	
КонецФункции

//Получает значение факта для целевых показателей использующих формулу
//Параметры:
// ЦП                - тип СправочникСсылка.KPI_ЦелевыеПоказатели, 
//							целевой показатель для которого необходимо получить план
// Дат               - тип дата, дата на которую получают план
// Периодичность     - тип ПеречислениеСсылка.KPI_ПериодичностьПланирования
// СтруктураКомпании - тип СправочникСсылка.KPI_СтруктураКомпании, для которой получается факт
&НаСервере
Функция ПолучитьФактВРекурсии(ЦП, Дат, Периодичность, СтруктураКомпании)
	
	ФактЗначение = 0;
	
	ДатаФактов = Дат;
	
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ДатаФактов, Периодичность);
	
	ФормулаФакта = ЦП.ФормулаСписокФакт;
	
	//получим таблицу значений с подчиненными целевыми показателями, представлениями и значениями Фактов
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_ЦелевыеПоказателиФормулаФакта.ЦелевойПоказатель,
	|	KPI_ЦелевыеПоказателиФормулаФакта.Представление,
	|	KPI_ЦелевыеПоказателиФормулаФакта.КлючАналитики
	|ПОМЕСТИТЬ ГлавныйЦП
	|ИЗ
	|	Справочник.KPI_ЦелевыеПоказатели.ФормулаФакта КАК KPI_ЦелевыеПоказателиФормулаФакта
	|ГДЕ
	|	KPI_ЦелевыеПоказателиФормулаФакта.Ссылка = &ЦП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_ФактыОбороты.ФактОборот,
	|	KPI_ФактыОбороты.ЦелевойПоказатель,
	|	KPI_ФактыОбороты.СтруктураКомпании,
	|	KPI_ФактыОбороты.КлючАналитики
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	РегистрНакопления.KPI_Факты.Обороты(
	|			&ДатНач,
	|			&ДатКон,
	|			Авто,
	|			ЦелевойПоказатель В
	|					(ВЫБРАТЬ
	|						ГлавныйЦП.ЦелевойПоказатель
	|					ИЗ
	|						ГлавныйЦП КАК ГлавныйЦП)
	|				И СтруктураКомпании В (&Массив)) КАК KPI_ФактыОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГлавныйЦП.ЦелевойПоказатель,
	|	ГлавныйЦП.Представление,
	|	СУММА(ЕСТЬNULL(Обороты.ФактОборот, 0)) КАК ФактОборот
	|ИЗ
	|	ГлавныйЦП КАК ГлавныйЦП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО (Обороты.КлючАналитики = ГлавныйЦП.КлючАналитики)
	|			И (Обороты.ЦелевойПоказатель = ГлавныйЦП.ЦелевойПоказатель)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГлавныйЦП.ЦелевойПоказатель,
	|	ГлавныйЦП.Представление";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Авто", Периодичность);	
	
	Запрос.УстановитьПараметр("ДатНач", ГраницыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ДатКон", Дат);
	Запрос.УстановитьПараметр("ЦП", ЦП);
	
	Массив = Новый Массив;
	Если ЦП.ВидСвязиФакта = Перечисления.KPI_ВидыСвязиФормулы.ПоТекущейСтруктуре Тогда
		Массив.Добавить(СтруктураКомпании);
	ИначеЕсли ЦП.ВидСвязиФакта = Перечисления.KPI_ВидыСвязиФормулы.ВСписке Тогда
		Массив = ЗначениеИзСтрокиВнутр(ЦП.ЭлементыСвязейФакт);
	ИначеЕсли ЦП.ВидСвязиФакта = Перечисления.KPI_ВидыСвязиФормулы.ВИерархии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СтруктураКомпании В (&Массив)", "И СтруктураКомпании В ИЕРАРХИИ (&Массив)");
		Массив = ЗначениеИзСтрокиВнутр(ЦП.ЭлементыСвязейФакт);
	ИначеЕсли ЦП.ВидСвязиФакта = Перечисления.KPI_ВидыСвязиФормулы.ПоВсейСтруктуре Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СтруктураКомпании В (&Массив)", "");	
	КонецЕсли;
	Запрос.УстановитьПараметр("Массив", Массив);
	
	Если ЦП.АгрегированиеФакта = Перечисления.KPI_Агрегирование.Среднее Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА", "СРЕДНЕЕ");
	ИначеЕсли ЦП.АгрегированиеФакта = Перечисления.KPI_Агрегирование.Максимум Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА", "МАКСИМУМ");
	ИначеЕсли ЦП.АгрегированиеФакта = Перечисления.KPI_Агрегирование.Минимум Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА", "МИНИМУМ");
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	РезТаблЗнач = Результат.Выгрузить();
	
	//уберем из таблицы целевые показатели, которых нет в формуле расчета факта
	н = 0;
	Пока н < РезТаблЗнач.Количество() Цикл
		Если Найти(ФормулаФакта, "[" + СокрЛП(РезТаблЗнач.Получить(н).Представление) + "]") = 0 Тогда
			РезТаблЗнач.Удалить(н);
		Иначе 
			н = н + 1;	
		КонецЕсли;
	КонецЦикла;
	
	
	Для каждого Стр Из РезТаблЗнач Цикл
		Если Стр.ЦелевойПоказатель.ТипРасчетаЗначенияФакта = Перечисления.KPI_ТипыРасчетаФакта.ПоФормуле Тогда
			//рассчитываем значение плана рекурсивно
			Стр.ФактОборот = ПолучитьФактВРекурсии(Стр.ЦелевойПоказатель, Дат, Периодичность, СтруктураКомпании);
		КонецЕсли;
		
		ФормулаФакта = СтрЗаменить(ФормулаФакта, "[" + Стр.Представление + "]", "(" + СтрЗаменить(Формат(Стр.ФактОборот, "ЧГ=; ЧН=0"), ",", ".") + ")");
	КонецЦикла;
	
	ФормулаФакта = СтрЗаменить(ФормулаФакта, " ", ""); // удалим простые пробелы в формуле (пробелы в представлении сюда уже не дойдут)
	ФормулаФакта = СтрЗаменить(ФормулаФакта, " ", ""); // !!! Неразрывный пробел (код символа = 160)
	ФактЗначение = Вычислить(ФормулаФакта);
		
	Возврат ФактЗначение;
КонецФункции

//Получает данные для построения графика динамики ПланФакты
//Параметры:
//ПериодичностьПланов   - тип ПеречислениеСсылка.KPI_Периодичность, за какой период
//													взять планы,для построения графика
//Периодичность графика - тип ПеречислениеСсылка.KPI_Периодичность, за какой период 
//													взять факты, для построения графика
//ДатаНачала            - тип дата, дата с котрой необходимо получить план/факты
//ДатаОкончания         - тип дата, дата по котроую необходимо получить план/факты
//СтруктураКомпании     - тип СправочникСсылка.KPI_СтруктураКомпании, структура компании для которой получаются план/факты
//ЦелевойПоказатель     - тип СправочникСсылка.KPI_ЦелевойПоказтель, целевой показатель по которому собираются план/факты
//Аппроксимация         - тип булево, признак аппроксимирования данных
//Суммирование          - тип булево, признак суммирования получаемых данных
//Возвращаемое значение:
// Таблица план/фактов  - тип таблица значений.
&НаСервере
Функция ПолучитьДанныеДляГрафика(ДатаФормирования, ПериодичностьПланов, ПериодичностьГрафика, ДатаНачала, ДатаОкончания,
								СтруктураКомпании, ЦелевойПоказатель, Аппроксимация, Суммирование) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_Факты.Период КАК Период,
	|	KPI_Планы.План,
	|	KPI_Факты.Факт
	|ИЗ
	|	РегистрНакопления.KPI_Планы КАК KPI_Планы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.KPI_Факты КАК KPI_Факты
	|		ПО KPI_Планы.ЦелевойПоказатель = KPI_Факты.ЦелевойПоказатель
	|			И KPI_Планы.СтруктураКомпании = KPI_Факты.СтруктураКомпании
	|ГДЕ
	|	KPI_Планы.Период МЕЖДУ &ДатНач И &ДатКон
	|	И KPI_Планы.ЦелевойПоказатель = &ЦелевойПоказатель
	|	И KPI_Планы.СтруктураКомпании = &СтруктураКомпании
	|	И KPI_Планы.ПериодичностьПланирования = &Периодичность
	|	И KPI_Планы.Регистратор ССЫЛКА Документ.KPI_Планирование
	|	И ВЫБОР
	|			КОГДА KPI_Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.День)
	|				ТОГДА KPI_Факты.Период МЕЖДУ НАЧАЛОПЕРИОДА(KPI_Планы.Период, ДЕНЬ) И КОНЕЦПЕРИОДА(KPI_Планы.Период, ДЕНЬ)
	|			КОГДА KPI_Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.Неделя)
	|				ТОГДА KPI_Факты.Период МЕЖДУ НАЧАЛОПЕРИОДА(KPI_Планы.Период, НЕДЕЛЯ) И КОНЕЦПЕРИОДА(KPI_Планы.Период, НЕДЕЛЯ)
	|			КОГДА KPI_Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.Месяц)
	|				ТОГДА KPI_Факты.Период МЕЖДУ НАЧАЛОПЕРИОДА(KPI_Планы.Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(KPI_Планы.Период, МЕСЯЦ)
	|			КОГДА KPI_Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.Квартал)
	|				ТОГДА KPI_Факты.Период МЕЖДУ НАЧАЛОПЕРИОДА(KPI_Планы.Период, КВАРТАЛ) И КОНЕЦПЕРИОДА(KPI_Планы.Период, КВАРТАЛ)
	|			КОГДА KPI_Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.полугодие)
	|				ТОГДА KPI_Факты.Период МЕЖДУ НАЧАЛОПЕРИОДА(KPI_Планы.Период, ПОЛУГОДИЕ) И КОНЕЦПЕРИОДА(KPI_Планы.Период, ПОЛУГОДИЕ)
	|			КОГДА KPI_Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.год)
	|				ТОГДА KPI_Факты.Период МЕЖДУ НАЧАЛОПЕРИОДА(KPI_Планы.Период, ГОД) И КОНЕЦПЕРИОДА(KPI_Планы.Период, ГОД)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И KPI_Факты.ЦелевойПоказатель <> ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.СмартЗадача)
	|	И KPI_Факты.ЦелевойПоказатель <> ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.Стандарт)
	|	И KPI_Факты.СтруктураКомпании = &СтруктураКомпании
	|	И KPI_Факты.Регистратор ССЫЛКА Документ.KPI_ВводФактовВыполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	
	СтруктНачПериод = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ДатаНачала   , ПериодичностьПланов);
	СтруктКонПериод = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ДатаОкончания, ПериодичностьПланов);
	
	Запрос.УстановитьПараметр("ДатНач"           , СтруктНачПериод.НачалоПериода);
	Запрос.УстановитьПараметр("ДатКон"           , СтруктКонПериод.КонецПериода);
	Запрос.УстановитьПараметр("Периодичность"    , ПериодичностьПланов);
	Запрос.УстановитьПараметр("СтруктураКомпании", СтруктураКомпании);
	Запрос.УстановитьПараметр("ЦелевойПоказатель", ЦелевойПоказатель);
	
	
	
	ТЗ = Новый ТаблицаЗначений;	 
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	
	ТЗ.Колонки.Добавить("Дата");
	ТЗ.Колонки.Добавить("Флаг");//хранит статус начала или окончания периода
	Для каждого стр Из Тз Цикл
		стр.Дата = НачалоДня(стр.Период);
	КонецЦикла;
	
	ТЗ.Колонки.Удалить("Период");
	
	
	//заменим в таблице значения фактов
	РасчетФактаПоФормуле = Перечисления.KPI_ТипыРасчетаФакта.ПоФормуле;
	Для каждого Стр Из ТЗ Цикл
		Если ЦелевойПоказатель.ТипРасчетаЗначенияФакта = РасчетФактаПоФормуле Тогда
			//считаем факт рекурсивной функцией
			Стр.Факт = ПолучитьФактВРекурсии(ЦелевойПоказатель, Стр.Дата, ПериодичностьПланов, СтруктураКомпании);
		КонецЕсли;
	КонецЦикла;
	
	
	
	//сформируем таблицу с начальными и конечными датами периодов
	ТЗПериоды = Новый ТаблицаЗначений;
	ТЗПериоды.Колонки.Добавить("Дата");
	ТЗПериоды.Колонки.Добавить("Флаг");
	
	СтруктНачПериодГраф = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ДатаНачала, ПериодичностьГрафика);
	НоваяСтрока = ТЗПериоды.Добавить();
	НоваяСтрока.Дата = НачалоДня(ДатаНачала);
	Если НачалоДня(ДатаНачала) = СтруктНачПериодГраф.НачалоПериода Тогда
		НоваяСтрока.Флаг = "Н";
	ИначеЕсли НачалоДня(ДатаНачала) = НачалоДня(СтруктНачПериодГраф.КонецПериода) Тогда
		НоваяСтрока.Флаг = "К";
	Иначе 
		НоваяСтрока.Флаг = "А"; //первая строка
	КонецЕсли;
	
	
	Дат = ДатаНачала;
	Пока Дат <= ДатаОкончания Цикл
		Если ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.День Тогда
			ДатК = КонецДня(Дат);
			ДатН = ДатК + 1;
		ИначеЕсли ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.Неделя Тогда
			ДатК = КонецНедели(Дат);
			ДатН = ДатК + 1;
		ИначеЕсли ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.Месяц Тогда
			ДатК = КонецМесяца(Дат);
			ДатН = ДатК + 1;
		ИначеЕсли ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.Квартал Тогда
			ДатК = КонецКвартала(Дат);
			ДатН = ДатК + 1;
		ИначеЕсли ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.Полугодие Тогда
			ДатК = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Дат, Перечисления.KPI_ПериодичностьПланирования.Полугодие).КонецПериода;
			ДатН = ДатК + 1;
		ИначеЕсли ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.Год Тогда
			ДатК = КонецГода(Дат);
			ДатН = ДатК + 1;
		КонецЕсли;
		
		Если Формат(ДатК, "ДЛФ=Д") <> Формат(ДатаНачала, "ДЛФ=Д") И КонецДня(ДатК) <= КонецДня(ДатаОкончания) Тогда
			НоваяСтрока = ТЗПериоды.Добавить();
			НоваяСтрока.Дата = НачалоДня(ДатК);
			Если ПериодичностьГрафика <> Перечисления.KPI_ПериодичностьПланирования.День Тогда
				НоваяСтрока.Флаг = "К";
			Иначе
				НоваяСтрока.Флаг = "Н";
			КонецЕсли;
		КонецЕсли;
		
		Если ПериодичностьГрафика <> Перечисления.KPI_ПериодичностьПланирования.День Тогда
			Если КонецДня(ДатН) <= КонецДня(ДатаОкончания) Тогда
				НоваяСтрока = ТЗПериоды.Добавить();
				НоваяСтрока.Дата = НачалоДня(ДатН);
				НоваяСтрока.Флаг = "Н";
			КонецЕсли;
		КонецЕсли;
		
		Дат = ДатН;
	КонецЦикла;
	
	СтруктКонПериодГраф = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ДатаОкончания, ПериодичностьГрафика);
	Если КонецДня(ДатК) <> КонецДня(ДатаОкончания) И КонецДня(ДатН) <> КонецДня(ДатаОкончания) Тогда
		НоваяСтрока = ТЗПериоды.Добавить();
		НоваяСтрока.Дата = НачалоДня(ДатаОкончания);
		Если НачалоДня(ДатаОкончания) = СтруктКонПериодГраф.НачалоПериода Тогда
			НоваяСтрока.Флаг = "Н";
		ИначеЕсли НачалоДня(ДатаОкончания) = НачалоДня(СтруктКонПериодГраф.КонецПериода) Тогда
			НоваяСтрока.Флаг = "К";
		Иначе 
			НоваяСтрока.Флаг = "Я"; //последняя строка
		КонецЕсли;
	КонецЕсли;
	
	
	
	//добавим в таблицу начальные и конечные даты периодов
	Для каждого запись Из ТЗПериоды Цикл
		НайденнаяСтрока = ТЗ.Найти(запись.Дата, "Дата");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Дата = запись.Дата;
			НоваяСтрока.Флаг = запись.Флаг;
			НоваяСтрока.План = 0;
			НоваяСтрока.Факт = 0;
		Иначе
			НайденнаяСтрока.Флаг = запись.Флаг;
		КонецЕсли;
	КонецЦикла;
	
	
	ТЗ.Сортировать("Дата");
	
	
	
	//подставим в таблицу значения планов
	ТЗ2 = Новый ТаблицаЗначений;
	
	МассивД = Новый Массив;
	МассивД.Добавить(Тип("Дата"));
	МассивЧ = Новый Массив;
	МассивЧ.Добавить(Тип("Число"));
	МассивС = Новый Массив;
	МассивС.Добавить(Тип("Строка"));
	
	ТипДатаД = Новый ОписаниеТипов (МассивД);
	ТипДатаЧ = Новый ОписаниеТипов (МассивЧ);
	ТипДатаС = Новый ОписаниеТипов (МассивС);
	
	ТЗ2.Колонки.Добавить("Дата", ТипДатаД);
	ТЗ2.Колонки.Добавить("Факт", ТипДатаЧ);
	ТЗ2.Колонки.Добавить("Флаг", ТипДатаС);
	Для Каждого стр из ТЗ Цикл
		НовСтрока = ТЗ2.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, стр);
	КонецЦикла;	
	
	ЗапросВрем = Новый Запрос;
	ЗапросВрем.Текст = "ВЫБРАТЬ
	|	ТЗ.Дата,
	|	ТЗ.Факт,
	|	ТЗ.Флаг
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ2 КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Дата КАК Дата,
	|	ЕСТЬNULL(Планы.План, 0) КАК План,
	|	ВТ.Факт,
	|	ВТ.Флаг
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			KPI_Планы.План КАК План,
	|			KPI_Планы.Период КАК Период,
	|			KPI_Планы.ПериодичностьПланирования КАК ПериодичностьПланирования
	|		ИЗ
	|			РегистрНакопления.KPI_Планы КАК KPI_Планы
	|		ГДЕ
	|			KPI_Планы.Регистратор ССЫЛКА Документ.KPI_Планирование
	|			И KPI_Планы.СтруктураКомпании = &СтруктураКомпании
	|			И KPI_Планы.ЦелевойПоказатель = &ЦелевойПоказатель
	|			И KPI_Планы.ПериодичностьПланирования = &Периодичность) КАК Планы
	|		ПО (ВЫБОР
	|				КОГДА Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.День)
	|					ТОГДА НАЧАЛОПЕРИОДА(ВТ.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(Планы.Период, ДЕНЬ)
	|				КОГДА Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.Неделя)
	|					ТОГДА НАЧАЛОПЕРИОДА(ВТ.Дата, НЕДЕЛЯ) = НАЧАЛОПЕРИОДА(Планы.Период, НЕДЕЛЯ)
	|				КОГДА Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.Месяц)
	|					ТОГДА НАЧАЛОПЕРИОДА(ВТ.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Планы.Период, МЕСЯЦ)
	|				КОГДА Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.квартал)
	|					ТОГДА НАЧАЛОПЕРИОДА(ВТ.Дата, КВАРТАЛ) = НАЧАЛОПЕРИОДА(Планы.Период, КВАРТАЛ)
	|				КОГДА Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.полугодие)
	|					ТОГДА НАЧАЛОПЕРИОДА(ВТ.Дата, ПОЛУГОДИЕ) = НАЧАЛОПЕРИОДА(Планы.Период, ПОЛУГОДИЕ)
	|				КОГДА Планы.ПериодичностьПланирования = ЗНАЧЕНИЕ(Перечисление.KPI_ПериодичностьПланирования.год)
	|					ТОГДА НАЧАЛОПЕРИОДА(ВТ.Дата, ГОД) = НАЧАЛОПЕРИОДА(Планы.Период, ГОД)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ЗапросВрем.УстановитьПараметр("ТЗ2", ТЗ2);
	ЗапросВрем.УстановитьПараметр("Периодичность", ПериодичностьПланов);
	ЗапросВрем.УстановитьПараметр("СтруктураКомпании", СтруктураКомпании);
	ЗапросВрем.УстановитьПараметр("ЦелевойПоказатель", ЦелевойПоказатель);
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач = ЗапросВрем.Выполнить().Выгрузить();
	
	
	//заменим в таблице значения планов
	НачалоПериода = Дата(1, 1, 1);
	ЗначПлана = 0;
	РасчетПланаПоФормуле = Перечисления.KPI_ТипыРасчетаПлана.ПоФормуле;
	Если ЦелевойПоказатель.ТипРасчетаЗначенияПлана = РасчетПланаПоФормуле Тогда
		Для каждого Стр Из ТабЗнач Цикл
			НачалоПериодаДляДаты = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Стр.Дата, ПериодичностьПланов).НачалоПериода;
			Если НачалоПериодаДляДаты <> НачалоПериода Тогда
				//считаем план рекурсивной функцией
				Стр.План = ПолучитьПланВРекурсии(ЦелевойПоказатель, Стр.Дата, ПериодичностьПланов, СтруктураКомпании);
				
				НачалоПериода = НачалоПериодаДляДаты;
				ЗначПлана = Стр.План;
			Иначе 
				Стр.План = ЗначПлана;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
		
	//просуммируем факты от начала периода до конца периода (в каждом периоде)
	БуферФакт = ТабЗнач.Получить(0).Факт;
	Если НЕ Суммирование Тогда 
		Для н = 1 По ТабЗнач.Количество() - 1 Цикл
			Если ТабЗнач.Получить(н).Флаг <> "Н" Тогда //это не начало периода
				ТабЗнач.Получить(н).Факт = ТабЗнач.Получить(н).Факт + БуферФакт;
			КонецЕсли;
			
			Если ТабЗнач.Получить(н).Флаг = "К" Тогда //это конец периода, обнуляем буфер
				БуферФакт = 0;
			Иначе 
				БуферФакт = ТабЗнач.Получить(н).Факт;
			КонецЕсли;
		КонецЦикла;
	Иначе // если используем Суммирование, то суммируем факты за весь интервал
		Для н = 1 По ТабЗнач.Количество() - 1 Цикл
			ТабЗнач.Получить(н).Факт = ТабЗнач.Получить(н).Факт + БуферФакт;
			БуферФакт = ТабЗнач.Получить(н).Факт;
		КонецЦикла;
	КонецЕсли;
	
	
	//если аппроксимируем план
	Если Аппроксимация Тогда
		//просуммируем планы, если включено суммирование
		Если Суммирование Тогда
			//сделаем аппроксимацию на всем интервале
			БуфПлан = 0;
			БуфПланДляСлед = ТабЗнач.Получить(0).План;
			ТабЗнач.Получить(0).План = 0;
			НачПериод = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ТабЗнач.Получить(0).Дата, ПериодичностьПланов).НачалоПериода;
			Для м = 1 По ТабЗнач.Количество() - 1 Цикл
				Если KPI_ОбщегоНазначенияСервер.ГраницыПериода(ТабЗнач.Получить(м).Дата, ПериодичностьПланов).НачалоПериода <> НачПериод Тогда
					БуфПлан = БуфПланДляСлед;
					БуфПланДляСлед = БуфПланДляСлед + ТабЗнач.Получить(м).План;
					НачПериод = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ТабЗнач.Получить(м).Дата, ПериодичностьПланов).НачалоПериода;
				КонецЕсли;
				
				СтруктураГраницыПериодаПлана = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ТабЗнач.Получить(м).Дата, ПериодичностьПланов);
				ТабЗнач.Получить(м).План = Формат((ТабЗнач.Получить(м).План * (ТабЗнач.Получить(м).Дата - СтруктураГраницыПериодаПлана.НачалоПериода) / (НачалоДня(СтруктураГраницыПериодаПлана.КонецПериода) - СтруктураГраницыПериодаПлана.НачалоПериода)) + БуфПлан, "ЧЦ=10; ЧДЦ=2; ЧН=");	
			КонецЦикла;
		Иначе //Суммирование отключено
			//сделаем аппроксимацию по периодам без суммирования по периодам
			Для каждого тзстр Из ТабЗнач Цикл
				СтруктураГраницыПериодаПлана = KPI_ОбщегоНазначенияСервер.ГраницыПериода(тзстр.Дата, ПериодичностьПланов);
				тзстр.План = Формат((тзстр.План * (тзстр.Дата - СтруктураГраницыПериодаПлана.НачалоПериода) / (НачалоДня(СтруктураГраницыПериодаПлана.КонецПериода) - СтруктураГраницыПериодаПлана.НачалоПериода)), "ЧЦ=10; ЧДЦ=2; ЧН=");
			//SpM
			Если ПериодичностьПланов = ПериодичностьГрафика И тзстр.Флаг = "Н" Тогда
                 ТабЗнач.Удалить(тзстр);
			КонецЕсли;
			//SpM NB	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	//удалим из таблицы лишние строки и колонки
	//к = 0;
	//Пока к < ТабЗнач.Количество() Цикл
	//	Если ТабЗнач.Получить(к).Дата < ДатаНачала Или ТабЗнач.Получить(к).Флаг = "" Тогда
	//		ТабЗнач.Удалить(к);
	//	Иначе 
	//		к = к + 1;			 
	//	КонецЕсли;
	//КонецЦикла;
	
	к = ТабЗнач.Количество() - 1;
	Пока к >= 0 Цикл
		Если ТабЗнач.Получить(к).Дата < ДатаНачала Или ТабЗнач.Получить(к).Флаг = "" Тогда
			ТабЗнач.Удалить(к);
		КонецЕсли;
		к = к - 1;			 
	КонецЦикла;
	
	
	ТабЗнач.Колонки.Удалить("Флаг");
	
	//SpM NB
	
	
	//ФорматнаяСтрока = "ДЛФ=Д";
	//Если ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.Месяц 
	//	Или ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.Квартал 
	//	ИЛИ ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.Полугодие Тогда
	//	ФорматнаяСтрока = "ДФ=MM.yyyy"; 
	//ИначеЕсли ПериодичностьГрафика = Перечисления.KPI_ПериодичностьПланирования.Год Тогда 
	//	ФорматнаяСтрока = "ДФ=yyyy";
	//КонецЕсли;
	//
	//ТабЗнач.Колонки.Добавить("ПериодДиаграммы");
	//Для Каждого Стр из ТабЗнач Цикл
	//	Стр.ПериодДиаграммы = Формат(KPI_ОбщегоНазначенияСервер.ГраницыПериода(Стр.Дата,ПериодичностьГрафика).КонецПериода,ФорматнаяСтрока); 	
	//КонецЦикла;
	//
	//ТабЗнач.Свернуть("ПериодДиаграммы","План,Факт");
	
	//SpM

	
	
	Возврат ТабЗнач;
КонецФункции

//Функция для получения списка Смарт-задача
//Параметры:
// нет
//Возвращаемое значение:
// нет
&НаСервере
Функция ПолучитьСмартЗадачи(Дата, ПериодичностьПланирования, СтруктураКомпании, ГруппаСмартЗадач, НеВыполненные,ЧастичноВыполненные = Ложь,Таблицей = Истина) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_СмартЗадача.АвторДокумента,
	|	KPI_СмартЗадача.НаименованиеЗадачи,
	|	KPI_СмартЗадача.ГруппаСмартЗадач,
	|	KPI_СмартЗадача.ВыполнитьДо,
	|	ВЫБОР
	|		КОГДА KPI_СмартЗадача.ВыполнитьДо > &ТекущаяДата
	|			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, KPI_СмартЗадача.ВыполнитьДо, ДЕНЬ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсталосьДней,
	|	KPI_СмартЗадача.Вес,
	|	KPI_СмартЗадача.Факт,
	|	KPI_СмартЗадача.Утверждено,
	|	KPI_СмартЗадача.Выполнено,
	|	KPI_СмартЗадача.Проверено,
	|	KPI_СмартЗадача.Дата,
	|	KPI_СмартЗадача.Приоритет,
	|	KPI_СмартЗадача.КритерийВыполнения,
	|	KPI_СмартЗадача.Комментарий,
	|	KPI_СмартЗадача.ЕдиницаИзмерения,
	|	KPI_СмартЗадача.АвторУтверждения,
	|	KPI_СмартЗадача.АвторПроверки,
	|	KPI_СмартЗадача.Ссылка,
	|	KPI_СмартЗадача.Номер,
	|	KPI_СмартЗадача.СтруктураКомпании,
	|	KPI_СтруктураКомпанииСрезПоследних.Сотрудник,
	|	KPI_ФотоСотрудников.ФотоСсылка КАК ФотоСсылкаАвтор,
	|	KPI_ФотоСотрудников1.ФотоСсылка КАК ФотоСсылкаУтвердивший,
	|	KPI_СмартЗадача.Этап.Владелец КАК Проект,
	|	KPI_СмартЗадача.Делегирована,
	|	KPI_ФотоСотрудников2.ФотоСсылка КАК ФотоСсылкаПроверивший
	|ПОМЕСТИТЬ Смарты
	|ИЗ
	|	Документ.KPI_СмартЗадача КАК KPI_СмартЗадача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.KPI_СтруктураКомпании.СрезПоследних(
	|				&ДатаСреза,
	|				НЕ Уволен
	|					И НЕ СтруктураУдалена) КАК KPI_СтруктураКомпанииСрезПоследних
	|		ПО KPI_СмартЗадача.СтруктураКомпании = KPI_СтруктураКомпанииСрезПоследних.СтруктураКомпании
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.KPI_ФотоСотрудников КАК KPI_ФотоСотрудников
	|		ПО KPI_СмартЗадача.АвторДокумента.ФизическоеЛицо = KPI_ФотоСотрудников.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.KPI_ФотоСотрудников КАК KPI_ФотоСотрудников1
	|		ПО KPI_СмартЗадача.АвторУтверждения.ФизическоеЛицо = KPI_ФотоСотрудников1.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.KPI_ФотоСотрудников КАК KPI_ФотоСотрудников2
	|		ПО KPI_СмартЗадача.АвторПроверки.ФизическоеЛицо = KPI_ФотоСотрудников2.ФизЛицо
	|ГДЕ
	|	KPI_СмартЗадача.ВыполнитьДо МЕЖДУ &ДатНач И &ДатКон
	|	И KPI_СмартЗадача.ПериодичностьПланирования = &ПериодичностьПланирования
	|	И KPI_СмартЗадача.СтруктураКомпании = &СтруктураКомпании
	|	И НЕ KPI_СмартЗадача.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСмарты.АвторДокумента,
	|	ВсеСмарты.НаименованиеЗадачи,
	|	ВсеСмарты.ГруппаСмартЗадач,
	|	ВсеСмарты.ВыполнитьДо,
	|	ВсеСмарты.ОсталосьДней,
	|	ВсеСмарты.Вес,
	|	ВсеСмарты.Факт,
	|	ВсеСмарты.Утверждено,
	|	ВсеСмарты.Выполнено,
	|	ВсеСмарты.Проверено,
	|	ВсеСмарты.Дата,
	|	ВсеСмарты.Приоритет,
	|	ВсеСмарты.КритерийВыполнения,
	|	ВсеСмарты.Комментарий,
	|	ВсеСмарты.ЕдиницаИзмерения,
	|	ВсеСмарты.АвторУтверждения,
	|	ВсеСмарты.АвторПроверки,
	|	ВсеСмарты.Ссылка,
	|	ВсеСмарты.Номер,
	|	ВсеСмарты.СтруктураКомпании,
	|	ВсеСмарты.Сотрудник,
	|	ВсеСмарты.Проект,
	|	ВсеСмарты.Период,
	|	ВсеСмарты.Делегирована,
	|	ВсеСмарты.ФотоСсылкаАвтор,
	|	ВсеСмарты.ФотоСсылкаУтвердивший,
	|	ВсеСмарты.ФотоСсылкаПроверивший
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(KPI_ИсторияСмартЗадачСрезПоследних.Период) КАК Период,
	|		KPI_ИсторияСмартЗадачСрезПоследних.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.KPI_ИсторияСмартЗадач.СрезПоследних(
	|				&ТекущаяДата,
	|				Регистратор В
	|					(ВЫБРАТЬ
	|						Смарты.Ссылка
	|					ИЗ
	|						Смарты КАК Смарты)) КАК KPI_ИсторияСмартЗадачСрезПоследних
	|	
	|	СГРУППИРОВАТЬ ПО
	|		KPI_ИсторияСмартЗадачСрезПоследних.Регистратор) КАК История
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Смарты.АвторДокумента КАК АвторДокумента,
	|			Смарты.НаименованиеЗадачи КАК НаименованиеЗадачи,
	|			Смарты.ГруппаСмартЗадач КАК ГруппаСмартЗадач,
	|			Смарты.ВыполнитьДо КАК ВыполнитьДо,
	|			Смарты.ОсталосьДней КАК ОсталосьДней,
	|			Смарты.Вес КАК Вес,
	|			Смарты.Факт КАК Факт,
	|			Смарты.Утверждено КАК Утверждено,
	|			Смарты.Выполнено КАК Выполнено,
	|			Смарты.Проверено КАК Проверено,
	|			Смарты.Дата КАК Дата,
	|			Смарты.Приоритет КАК Приоритет,
	|			Смарты.КритерийВыполнения КАК КритерийВыполнения,
	|			Смарты.Комментарий КАК Комментарий,
	|			Смарты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			Смарты.АвторУтверждения КАК АвторУтверждения,
	|			Смарты.АвторПроверки КАК АвторПроверки,
	|			Смарты.Ссылка КАК Ссылка,
	|			Смарты.Номер КАК Номер,
	|			Смарты.СтруктураКомпании КАК СтруктураКомпании,
	|			Смарты.Сотрудник КАК Сотрудник,
	|			Смарты.Проект КАК Проект,
	|			KPI_ИсторияСмартЗадачСрезПоследних.Период КАК Период,
	|			Смарты.Делегирована КАК Делегирована,
	|			Смарты.ФотоСсылкаАвтор КАК ФотоСсылкаАвтор,
	|			Смарты.ФотоСсылкаУтвердивший КАК ФотоСсылкаУтвердивший,
	|			Смарты.ФотоСсылкаПроверивший КАК ФотоСсылкаПроверивший
	|		ИЗ
	|			РегистрСведений.KPI_ИсторияСмартЗадач.СрезПоследних(
	|					&ТекущаяДата,
	|					Регистратор В
	|							(ВЫБРАТЬ
	|								Смарты.Ссылка
	|							ИЗ
	|								Смарты КАК Смарты)
	|						И Этап = ЗНАЧЕНИЕ(Перечисление.KPI_ЭтапыВыполненияСмартЗадач.Создание)) КАК KPI_ИсторияСмартЗадачСрезПоследних
	|				ПОЛНОЕ СОЕДИНЕНИЕ Смарты КАК Смарты
	|				ПО KPI_ИсторияСмартЗадачСрезПоследних.СмартЗадача = Смарты.Ссылка) КАК ВсеСмарты
	|		ПО История.Регистратор = ВсеСмарты.Ссылка
	|ГДЕ
	|	НЕ История.Регистратор = ЗНАЧЕНИЕ(Документ.KPI_СмартЗадача.ПустаяСсылка)";
	
	
	Если ЗначениеЗаполнено(ГруппаСмартЗадач) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ВсеСмарты.ГруппаСмартЗадач = &ГруппаСмартЗадач";
	КонецЕсли;
	
	Если НеВыполненные И ЧастичноВыполненные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ( НЕ ВсеСмарты.Выполнено ИЛИ ВсеСмарты.Факт < ВсеСмарты.Вес )";
	ИначеЕсли  НеВыполненные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И НЕ ВсеСмарты.Выполнено";
	ИначеЕсли ЧастичноВыполненные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ВсеСмарты.Факт < ВсеСмарты.Вес";	
	КонецЕсли;
	
	Если ЧастичноВыполненные Тогда
		
	КонецЕсли;
	
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Дата, ПериодичностьПланирования);
	
	Запрос.УстановитьПараметр("ДатНач"                    , ГраницыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ДатКон"                    , ГраницыПериода.КонецПериода);
	Запрос.УстановитьПараметр("ДатаСреза"                 , КонецДня(Дата));
	Запрос.УстановитьПараметр("ПериодичностьПланирования" , ПериодичностьПланирования);
	Запрос.УстановитьПараметр("СтруктураКомпании"         , СтруктураКомпании);
	Запрос.УстановитьПараметр("ТекущаяДата"               , ТекущаяДата());
	Запрос.УстановитьПараметр("ГруппаСмартЗадач"          , ГруппаСмартЗадач);
	
	Результат = Запрос.Выполнить();
	Если Таблицей Тогда
		Возврат Результат.Выгрузить();		
	Иначе 
		Возврат Результат.Выбрать();
	КонецЕсли;
КонецФункции

&НаСервере
//Функция получает стандарты сотрудника из соотвествующего периода планирования
//Параметры
//Дата          			  - тип дата, дата на которую получаются стандарты
//ПериодичностьПланирования   - тип ПеречислениеСсылка.KPI_ПериодичностьПланирования,
//							    периодичность планов из которой необходимо получить стандарты
//Не обязательные параметры
//	Сотрудник                 - тип СправочникСсылка.KPI_Сотрудники, 
//								передается если стандарты необходимо получить только по одному сотруднику
// НепроставленныеОценки      - тип булево, опрделяет выбирать все стандарты или только те что еще не оцененны
Функция СтандартыСотрудников(Дата, ПериодичностьПланирования, СтруктураКомпании = Неопределено, НепроставленныеОценки = Ложь,Отвественный = Неопределено,Стандарт = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_Стандарты.Стандарт КАК Стандарт,
	|	KPI_Стандарты.ПериодичностьПланирования,
	|	KPI_Стандарты.ДатаОценки КАК ДатаОценки,
	|	KPI_Стандарты.Ответственный КАК Ответственный,
	|	KPI_Стандарты.Основание,
	|	KPI_Стандарты.ВесСтандарта КАК ВесСтандарта,
	|	KPI_Стандарты.Оцениваемый КАК Оцениваемый,
	|	KPI_Стандарты.ВесОтветственного КАК ВесОценкиОтветственного
	|ПОМЕСТИТЬ СтандартыПлан
	|ИЗ
	|	РегистрСведений.KPI_Стандарты КАК KPI_Стандарты
	|ГДЕ
	|	KPI_Стандарты.ДатаОценки МЕЖДУ &ДатНач И &ДатКон
	|	И KPI_Стандарты.Основание ССЫЛКА Документ.KPI_Планирование
	|	И KPI_Стандарты.Оцениваемый = &Оцениваемый
	|	И &ОтборСотрудника
	|	И &ОтборСтандартПлан
	|	И KPI_Стандарты.ПериодичностьПланирования = &ПериодичностьПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_Факты.КлючАналитики.Аналитика1 КАК Стандарт,
	|	KPI_Факты.КлючАналитики.Аналитика2 КАК ПереодичностьПланирования,
	|	KPI_Факты.КлючАналитики.Аналитика3 КАК Ответственный,
	|	KPI_Факты.КлючАналитики.Аналитика4 КАК Оцениваемый,
	|	KPI_Факты.КлючАналитики.Аналитика5 КАК ДатаОценки,
	|	KPI_Факты.Факт КАК Факт,
	|	KPI_Факты.ОценкаСтандарта,
	|	KPI_Факты.Регистратор,
	|	KPI_Факты.Комментарий
	|ПОМЕСТИТЬ СтандартыФакт
	|ИЗ
	|	РегистрНакопления.KPI_Факты КАК KPI_Факты
	|ГДЕ
	|	KPI_Факты.Период МЕЖДУ &ДатНач И &ДатКон
	|	И KPI_Факты.Регистратор ССЫЛКА Документ.KPI_ВводОценокСтандартов
	|	И KPI_Факты.ЦелевойПоказатель = ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.Стандарт)
	|	И KPI_Факты.КлючАналитики.Аналитика4 = &Оцениваемый
	|	И &АналитикаСотрудник
	|	И &ОтборСтандартФакт
	|	И KPI_Факты.КлючАналитики.Аналитика2 = &ПериодичностьПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартыПлан.Стандарт КАК Стандарт,
	|	СтандартыПлан.Ответственный,
	|	СтандартыПлан.ВесСтандарта,
	|	ЕСТЬNULL(СтандартыФакт.Факт, 0) КАК Факт,
	|	ЕСТЬNULL(СтандартыФакт.Факт, ЛОЖЬ) КАК Гашение,
	|	СтандартыПлан.ВесОценкиОтветственного,
	|	СтандартыФакт.ОценкаСтандарта,
	|	СтандартыПлан.Основание,
	|	СтандартыФакт.Регистратор КАК ДокументВводОценокСтандартов,
	|	СтандартыПлан.ДатаОценки,
	|	СтандартыФакт.Комментарий,
	|	СтандартыПлан.ПериодичностьПланирования
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	СтандартыПлан КАК СтандартыПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтандартыФакт КАК СтандартыФакт
	|		ПО СтандартыПлан.Стандарт = СтандартыФакт.Стандарт
	|			И СтандартыПлан.Ответственный = СтандартыФакт.Ответственный
	|			И СтандартыПлан.Оцениваемый = СтандартыФакт.Оцениваемый
	|			И СтандартыПлан.ПериодичностьПланирования = СтандартыФакт.ПереодичностьПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Стандарт КАК Стандарт,
	|	МАКСИМУМ(ВТ.ВесСтандарта) КАК ВесСтандарта,
	|	СРЕДНЕЕ(ВТ.Факт) КАК Факт,
	|	МИНИМУМ(ВТ.Гашение) КАК Гашение,
	|	ВТ.Ответственный КАК Ответственный,
	|	МАКСИМУМ(ВТ.ВесОценкиОтветственного) КАК ВесОценкиОтветственного,
	|	МАКСИМУМ(ВТ.ОценкаСтандарта) КАК ОценкаСтандарта,
	|	МАКСИМУМ(ВТ.Основание) КАК Основание,
	|	ВТ.ДокументВводОценокСтандартов,
	|	ВТ.ДатаОценки,
	|	МАКСИМУМ(ВТ.Комментарий) КАК Комментарий,
	|	KPI_СтруктураКомпанииСрезПоследних.СтруктураКомпании КАК ОтветственныйСтруктураКомпании,
	|	KPI_СтруктураКомпанииСрезПоследних.Сотрудник КАК ОтветственныйСотрудник
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.KPI_СтруктураКомпании.СрезПоследних(&ДатКон, ) КАК KPI_СтруктураКомпанииСрезПоследних
	|		ПО ВТ.Ответственный = KPI_СтруктураКомпанииСрезПоследних.СтруктураКомпании
	|ГДЕ
	|	&УсловиеПроставленностиОценки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Стандарт,
	|	ВТ.Ответственный,
	|	ВТ.ДокументВводОценокСтандартов,
	|	ВТ.ДатаОценки,
	|	KPI_СтруктураКомпанииСрезПоследних.СтруктураКомпании,
	|	KPI_СтруктураКомпанииСрезПоследних.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВесОценкиОтветственного УБЫВ,
	|	Ответственный УБЫВ";
	
	Если ЗначениеЗаполнено(Отвественный) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &ОтборСотрудника"," И KPI_Стандарты.Ответственный = &Ответственный");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &АналитикаСотрудник"," И KPI_Факты.КлючАналитики.Аналитика3 = &Ответственный");	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &ОтборСотрудника"," ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &АналитикаСотрудник"," ");	
	КонецЕсли;

	Если ЗначениеЗаполнено(Стандарт) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &ОтборСтандартПлан"," И KPI_Стандарты.Стандарт = &Стандарт");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &ОтборСтандартФакт"," И KPI_Факты.КлючАналитики.Аналитика1 = &Стандарт");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &ОтборСтандартПлан"," ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &ОтборСтандартФакт"," ");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Стандарт"                 ,Стандарт);
	Запрос.УстановитьПараметр("Ответственный"            ,Отвественный);
	Запрос.УстановитьПараметр("ПериодичностьПланирования",ПериодичностьПланирования);
	
	Если НепроставленныеОценки Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПроставленностиОценки","  ВТ.Гашение = ЛОЖЬ ");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПроставленностиОценки","  ИСТИНА ");
	КонецЕсли;
	
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Дата,ПериодичностьПланирования);
	
	Запрос.УстановитьПараметр("ДатНач", ГраницыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ДатКон", ГраницыПериода.КонецПериода);
	Запрос.УстановитьПараметр("Оцениваемый", СтруктураКомпании);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

//Функция для получения списка Смарт-задача
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьДанныеДляПолеДиаграммыПлан(Дата, ПериодичностьПланирования, СтруктураКомпании) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_Планы.ЦелевойПоказатель КАК ЦелевойПоказатель,
	|	СУММА(KPI_Планы.Вес) КАК Вес
	|ИЗ
	|	РегистрНакопления.KPI_Планы КАК KPI_Планы
	|ГДЕ
	|	KPI_Планы.Период МЕЖДУ &ДатНач И &ДатКон
	|	И KPI_Планы.СтруктураКомпании = &СтруктураКомпании
	|	И KPI_Планы.ПериодичностьПланирования = &ПериодичностьПланирования
	|	И KPI_Планы.Регистратор ССЫЛКА Документ.KPI_Планирование
	|
	|СГРУППИРОВАТЬ ПО
	|	KPI_Планы.ЦелевойПоказатель";
	
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Дата, ПериодичностьПланирования);
	
	Запрос.УстановитьПараметр("ДатНач"                    , ГраницыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ДатКон"                    , ГраницыПериода.КонецПериода);
	Запрос.УстановитьПараметр("ПериодичностьПланирования" , ПериодичностьПланирования);
	Запрос.УстановитьПараметр("СтруктураКомпании"         , СтруктураКомпании);
	
	Результат = Запрос.Выполнить();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ = Результат.Выгрузить();	
	
	Возврат ТЗ;
КонецФункции

//Функция для автоматического сбора фактов
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура СобиратьФактыАвтоматически() Экспорт
	КриптоМодуль = KPI_ОбщегоНазначенияСервер.ПолучитьКриптоМодуль();
	
	//получим ТЗ из регистра данных для автоматического сбора фактов
	Данные = РегистрыСведений.KPI_ДанныеДляАвтоматическогоСбораФактов.СоздатьНаборЗаписей();
	Данные.Прочитать();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ЦелевойПоказатель");
	ТЗ.Колонки.Добавить("Параметр");
	ТЗ.Колонки.Добавить("Значение");
	
	Для каждого Стр Из Данные Цикл
		НовСтр = ТЗ.Добавить();
		НовСтр.ЦелевойПоказатель = Стр.ЦелевойПоказатель;
		НовСтр.Параметр = Стр.Параметр;
		НовСтр.Значение = Стр.Значение;
	КонецЦикла;
	
	
	//получим уникальные ЦП из таблицы параметров
	ТЗЦП = ПолучитьЦПИзПараметров(ТЗ);
	
	
	Задание = РегламентныеЗадания.НайтиПредопределенное("KPI_АвтоматическийСборФактов");
	ДН = Задание.Расписание.ДатаНачала - Задание.Расписание.ПериодПовтораДней * 86400; //т.к. задание первый раз стартует по прошествии "ПериодПовтораДней"
	ДК = Задание.Расписание.ДатаКонца;
	
	
	Если Константы.KPI_ПроверкаНаложенияФактов.Получить() Тогда
		ТЗНаложенныхПериодов = УдалитьПересекающиесяЗаписи(ТЗ, ДН, ДК);
	КонецЕсли;
	
	
	ТЗМаксимальныхПериодов = ПолучитьТЗМаксимальныхПериодовДляДат(ТЗЦП, ТЗНаложенныхПериодов, ДН, ДК);
	
	
	
	ТЗФакты = КриптоМодуль.ПолучитьФакты(ТЗ, ТЗМаксимальныхПериодов);
	
	
	ЗаписатьФактыВРегистр(Новый Структура("ТЗПараметры, ТЗФакты, ЦП, Автомат", ТЗ, ТЗФакты, ТЗМаксимальныхПериодов, Истина));
КонецПроцедуры

//Функция для удаления пересекающихся записей
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция УдалитьПересекающиесяЗаписи(ТЗ, ДН, ДК, ДляКорректировки = Ложь) Экспорт
	//Получим параметризированную таблицу значений уникальных целевых показателей
	ТЗЦП = Новый ТаблицаЗначений;
	МассивЦ = Новый Массив;
	МассивЦ.Добавить(Тип("СправочникСсылка.KPI_ЦелевыеПоказатели"));
	ТипДатаЦ = Новый ОписаниеТипов (МассивЦ);
	ТЗЦП.Колонки.Добавить("ЦелевойПоказатель", ТипДатаЦ);
	
	
	ЦП = Справочники.KPI_ЦелевыеПоказатели.ПустаяСсылка();
	Для каждого СтрТЗ Из ТЗ Цикл
		Если СтрТЗ.ЦелевойПоказатель <> ЦП Тогда
			НовСтр = ТЗЦП.Добавить();
			НовСтр.ЦелевойПоказатель = СтрТЗ.ЦелевойПоказатель;
			
			ЦП = СтрТЗ.ЦелевойПоказатель;
		КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗЦП.ЦелевойПоказатель
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗЦП КАК ТЗЦП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_ИнтервалыСбораФактов.ЦелевойПоказатель,
	|	KPI_ИнтервалыСбораФактов.ДатаНачалаИнтервала,
	|	KPI_ИнтервалыСбораФактов.ДатаОкончанияИнтервала,
	|	KPI_ИнтервалыСбораФактов.Документ
	|ПОМЕСТИТЬ РС
	|ИЗ
	|	РегистрСведений.KPI_ИнтервалыСбораФактов КАК KPI_ИнтервалыСбораФактов
	|ГДЕ
	|	(KPI_ИнтервалыСбораФактов.ДатаНачалаИнтервала МЕЖДУ &ДН И &ДК
	|			ИЛИ KPI_ИнтервалыСбораФактов.ДатаОкончанияИнтервала МЕЖДУ &ДН И &ДК
	|			ИЛИ KPI_ИнтервалыСбораФактов.ДатаНачалаИнтервала < &ДН
	|				И KPI_ИнтервалыСбораФактов.ДатаОкончанияИнтервала > &ДК)
	|	И KPI_ИнтервалыСбораФактов.ЦелевойПоказатель В
	|			(ВЫБРАТЬ
	|				ВТ.ЦелевойПоказатель
	|			ИЗ
	|				ВТ КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_Факты.Регистратор,
	|	KPI_Факты.ЦелевойПоказатель
	|ИЗ
	|	РегистрНакопления.KPI_Факты КАК KPI_Факты
	|ГДЕ
	|	KPI_Факты.ЦелевойПоказатель В
	|			(ВЫБРАТЬ
	|				ВТ.ЦелевойПоказатель
	|			ИЗ
	|				ВТ КАК ВТ)
	|	И KPI_Факты.Регистратор В
	|			(ВЫБРАТЬ
	|				РС.Документ
	|			ИЗ
	|				РС КАК РС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РС.ЦелевойПоказатель,
	|	РС.ДатаНачалаИнтервала,
	|	РС.ДатаОкончанияИнтервала
	|ИЗ
	|	РС КАК РС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РС.ЦелевойПоказатель,
	|	МИНИМУМ(РС.ДатаНачалаИнтервала) КАК ДатаНачалаИнтервала,
	|	МАКСИМУМ(РС.ДатаОкончанияИнтервала) КАК ДатаОкончанияИнтервала
	|ИЗ
	|	РС КАК РС
	|
	|СГРУППИРОВАТЬ ПО
	|	РС.ЦелевойПоказатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РС.ЦелевойПоказатель,
	|	МАКСИМУМ(РС.Документ.Дата) КАК ДокументДата
	|ПОМЕСТИТЬ МаксДатыДок
	|ИЗ
	|	РС КАК РС
	|
	|СГРУППИРОВАТЬ ПО
	|	РС.ЦелевойПоказатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РС.ЦелевойПоказатель,
	|	РС.Документ
	|ИЗ
	|	РС КАК РС
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксДатыДок КАК МаксДатыДок
	|		ПО РС.ЦелевойПоказатель = МаксДатыДок.ЦелевойПоказатель";
	
	Запрос.УстановитьПараметр("ТЗЦП", ТЗЦП);
	Запрос.УстановитьПараметр("ДН", ДН);
	Запрос.УстановитьПараметр("ДК", ДК);
	
	Результат = Запрос.ВыполнитьПакет();
	
	
	
	Если Не ДляКорректировки Тогда
		
		ТЗИзРН = Результат[2].Выгрузить();
		ТЗИзРС = Результат[3].Выгрузить();
		
		
		НачатьТранзакцию();
		
		Для каждого СтрРН Из ТЗИзРН Цикл
			ЗаписьРН = РегистрыНакопления.KPI_Факты.СоздатьНаборЗаписей();
			ЗаписьРН.Отбор.Регистратор.Использование = Истина;
			ЗаписьРН.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
			ЗаписьРН.Отбор.Регистратор.Значение = СтрРН.Регистратор;
			ЗаписьРН.Прочитать();
			Для каждого мЗапись Из ЗаписьРН Цикл
				Если мЗапись.ЦелевойПоказатель = СтрРН.ЦелевойПоказатель Тогда
					ЗаписьРН.Удалить(мЗапись);
				КонецЕсли;
			КонецЦикла;
			ЗаписьРН.Записать();
		КонецЦикла;
		
		Для каждого СтрРС Из ТЗИзРС Цикл
			ЗаписьРС = РегистрыСведений.KPI_ИнтервалыСбораФактов.СоздатьМенеджерЗаписи();
			ЗаписьРС.ЦелевойПоказатель = СтрРС.ЦелевойПоказатель;
			ЗаписьРС.ДатаНачалаИнтервала = СтрРС.ДатаНачалаИнтервала;
			ЗаписьРС.ДатаОкончанияИнтервала = СтрРС.ДатаОкончанияИнтервала;
			ЗаписьРС.Прочитать();
			ЗаписьРС.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		
		Возврат Результат[4].Выгрузить();
	Иначе 
		Возврат Результат[6].Выгрузить();
	КонецЕсли;
КонецФункции

//Функция для получения параметрои
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьЦПИзПараметров(ТЗ) Экспорт
	ТЗЦП = Новый ТаблицаЗначений;
	ТЗЦП.Колонки.Добавить("ЦелевойПоказатель");
	
	ЦП = Справочники.KPI_ЦелевыеПоказатели.ПустаяСсылка();
	Для каждого СтрТЗ Из ТЗ Цикл
		Если СтрТЗ.ЦелевойПоказатель <> ЦП Тогда
			НовСтр = ТЗЦП.Добавить();
			НовСтр.ЦелевойПоказатель = СтрТЗ.ЦелевойПоказатель;
			
			ЦП = СтрТЗ.ЦелевойПоказатель;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗЦП;
КонецФункции

//Функция для получения максимальных периодов
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьТЗМаксимальныхПериодовДляДат(Знач ТЗЦП, ТЗНаложенныхПериодов, ДН, ДК) Экспорт
	ТЗЦП.Колонки.Добавить("ДатаНачалаИнтервала");
	ТЗЦП.Колонки.Добавить("ДатаОкончанияИнтервала");
	
	Для каждого СтрЦП Из ТЗЦП Цикл
		Если ТЗНаложенныхПериодов <> Неопределено Тогда 
			НайденныеСтроки = ТЗНаложенныхПериодов.НайтиСтроки(Новый Структура("ЦелевойПоказатель", СтрЦП.ЦелевойПоказатель));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Если НайденныеСтроки[0].ДатаНачалаИнтервала > ДН Тогда
					СтрЦП.ДатаНачалаИнтервала = ДН;
				Иначе 
					СтрЦП.ДатаНачалаИнтервала = НайденныеСтроки[0].ДатаНачалаИнтервала;
				КонецЕсли;
				
				Если НайденныеСтроки[0].ДатаОкончанияИнтервала < ДК Тогда
					СтрЦП.ДатаОкончанияИнтервала = ДК;
				Иначе 
					СтрЦП.ДатаОкончанияИнтервала = НайденныеСтроки[0].ДатаОкончанияИнтервала;
				КонецЕсли;
			Иначе 
				СтрЦП.ДатаНачалаИнтервала = ДН;
				СтрЦП.ДатаОкончанияИнтервала = ДК;
			КонецЕсли;
		Иначе 
			СтрЦП.ДатаНачалаИнтервала = ДН;
			СтрЦП.ДатаОкончанияИнтервала = ДК;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗЦП;
КонецФункции

//процедура записи фактов в регистры
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура ЗаписатьФактыВРегистр(СтруктураПараметров) Экспорт
	
	ТЗПараметры = СтруктураПараметров.ТЗПараметры;
	ТЗФакты = СтруктураПараметров.ТЗФакты;
	ЦП = СтруктураПараметров.ЦП;
	Автомат = СтруктураПараметров.Автомат;
	
	
	НачатьТранзакцию();
	
	
	Док      = Документы.KPI_ВводФактовВыполнения.СоздатьДокумент();
	Док.Дата = ТекущаяДата();
	
	Для каждого СтрТЗП Из ТЗПараметры Цикл
		НовСтр                   = Док.ПараметрыЗапроса.Добавить();
		НовСтр.ЦелевойПоказатель = СтрТЗП.ЦелевойПоказатель;
		НовСтр.Параметр          = СтрТЗП.Параметр;
		НовСтр.Значение          = СтрТЗП.Значение;
	КонецЦикла;
	
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	
	НаборЗаписей = РегистрыНакопления.KPI_Факты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Док.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для каждого Стр Из ТЗФакты Цикл
		Если Не ЗначениеЗаполнено(Стр.Сотрудник) Или Не ЗначениеЗаполнено(Стр.Период) Или Не ЗначениеЗаполнено(Стр.Факт) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Стр); 
		Аналитика1               = Стр.Аналитика1;
		Аналитика2               = Стр.Аналитика2;
		Аналитика3               = Стр.Аналитика3;
		Аналитика4               = Стр.Аналитика4;
		Аналитика5               = Стр.Аналитика5;
		КлючАналитики            = KPI_ИнтерфейсВызовСервера.КлючАналитики(Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5);
		Запись.КлючАналитики     = КлючАналитики;
		Запись.Регистратор       = Док.Ссылка;
		Запись.СтруктураКомпании = Стр.Сотрудник;
		Если Автомат Тогда
			Запись.Комментарий = "Запись создана автоматически";
		Иначе 
			Запись.Комментарий = "Запись с ручной корректировкой";
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	
	ЗаписиИнтервалы = РегистрыСведений.KPI_ИнтервалыСбораФактов.СоздатьНаборЗаписей();
	ЗаписиИнтервалы.Прочитать();
	Для каждого Стр Из ЦП Цикл
		НовСтр                        = ЗаписиИнтервалы.Добавить();
		НовСтр.ЦелевойПоказатель      = Стр.ЦелевойПоказатель;
		НовСтр.ДатаНачалаИнтервала    = Стр.ДатаНачалаИнтервала;
		НовСтр.ДатаОкончанияИнтервала = Стр.ДатаОкончанияИнтервала;
		НовСтр.Документ               = Док.Ссылка;
	КонецЦикла;
	
	ЗаписиИнтервалы.Записать();
	
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

//Функция для получения Спр
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьПараметрыСпр(Ссылка) Экспорт
	ОбъектСпр = Ссылка.ПолучитьОбъект();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВерсияПлатформы", ОбъектСпр.ВерсияПлатформы);
	СтруктураПараметров.Вставить("ТипИБ", ОбъектСпр.ТипИБ);
	СтруктураПараметров.Вставить("КаталогИБ", ОбъектСпр.КаталогИБ);
	СтруктураПараметров.Вставить("ИмяСервераИБ", ОбъектСпр.ИмяСервераИБ);
	СтруктураПараметров.Вставить("ИмяИБНаСервере", ОбъектСпр.ИмяИБНаСервере);
	СтруктураПараметров.Вставить("АутентификацияWindows", ОбъектСпр.АутентификацияWindows);
	СтруктураПараметров.Вставить("ПользовательИБ", ОбъектСпр.ПользовательИБ);
	СтруктураПараметров.Вставить("ПарольИБ", ОбъектСпр.ПарольИБ);
	
	Возврат СтруктураПараметров;
КонецФункции

//Функция для получения объекта внешнего соединения
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьОбъектВнешнегоСоединения(СтруктураПараметров) Экспорт 
	Если СтруктураПараметров.ВерсияПлатформы = "v.8.0" Тогда
		ОбъектПодключения = "v8.Application";
	ИначеЕсли СтруктураПараметров.ВерсияПлатформы = "v.8.1" Тогда
		ОбъектПодключения = "V81.Application";
	ИначеЕсли СтруктураПараметров.ВерсияПлатформы = "v.8.2" Тогда
		ОбъектПодключения = "V82.Application";
	ИначеЕсли СтруктураПараметров.ВерсияПлатформы = "v.8.3" Тогда
		ОбъектПодключения = "V83.Application";
	КонецЕсли;
	
	//проверка наличия в системе зарегистрированного COM объекта
	Попытка
		COM_Объект = Новый COMОбъект(ОбъектПодключения);
		
	Исключение
		Сообщить("Ошибка создания OLE объекта.
		|Необходимо зарегистрировать в системе OLE объект для платформы 1С:Предприятие " + СтруктураПараметров.ВерсияПлатформы);
		COM_Объект = Неопределено;
	КонецПопытки;
	
	Возврат COM_Объект;
КонецФункции

//Функция для получения строки подключения из структуры параметров настроек внешней базы
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьСтрокуПодключения(СтруктураПараметров) Экспорт 
	Если Не СтруктураПараметров.ТипИБ Тогда 
		СтрокаПодключения = "File=""" + СтруктураПараметров.КаталогИБ + """";
	Иначе 
		СтрокаПодключения = "Srvr=""" + СтруктураПараметров.ИмяСервераИБ + """; Ref=""" + СтруктураПараметров.ИмяИБНаСервере + """";
	КонецЕсли;
	
	Если Не СтруктураПараметров.АутентификацияWindows Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ПользовательИБ) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr=""" + СтруктураПараметров.ПользовательИБ + """";
		КонецЕсли;
		Если Не ПустаяСтрока(СтруктураПараметров.ПарольИБ) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd=""" + СтруктураПараметров.ПарольИБ + """";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Возврат СтрокаПодключения;
КонецФункции

//Функция для проверки коректности параметров
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция КорректностьПараметров(СтруктураПараметров) Экспорт
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ВерсияПлатформы) Тогда 
		Сообщить("Не выбрана версия платформы для информационной базы");
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураПараметров.ТипИБ) Тогда 
		Сообщить("Не выбран тип информационной базы");
		Возврат Ложь;
	ИначеЕсли Не СтруктураПараметров.ТипИБ И Не ЗначениеЗаполнено(СтруктураПараметров.КаталогИБ) Тогда 
		Сообщить("Не выбран каталог информационной базы");
		Возврат Ложь;
	ИначеЕсли СтруктураПараметров.ТипИБ И Не ЗначениеЗаполнено(СтруктураПараметров.ИмяСервераИБ) Тогда 
		Сообщить("Не указано имя сервера информационной базы");
		Возврат Ложь;
	ИначеЕсли СтруктураПараметров.ТипИБ И Не ЗначениеЗаполнено(СтруктураПараметров.ИмяИБНаСервере) Тогда 
		Сообщить("Не указано имя информационной базы на сервере");
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
КонецФункции

//Функция для проверки возможности проведения документа задним числом
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПроверкаНаВозможностьПроведенияЗаднимЧислом(СтруктураКомпании, Дата, Уволен = Ложь)  Экспорт
	Уволен = ?(Уволен, "", "НЕ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(KPI_СтруктураКомпании.Сотрудник) КАК Сотрудник
	|ИЗ
	|	РегистрСведений.KPI_СтруктураКомпании КАК KPI_СтруктураКомпании
	|ГДЕ
	|	KPI_СтруктураКомпании.Период >= &Дата
	|	И KPI_СтруктураКомпании.СтруктураКомпании = &СтруктураКомпании
	|	И KPI_СтруктураКомпании.Сотрудник <> ЗНАЧЕНИЕ(Справочник.KPI_Сотрудники.ПустаяСсылка)
	|	И " + Уволен + " KPI_СтруктураКомпании.Уволен
	|	И НЕ KPI_СтруктураКомпании.СтруктураУдалена";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("СтруктураКомпании", СтруктураКомпании);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Выборка.Следующий();		
	
	Если Выборка.Сотрудник > 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

//Функция для проверки доступности роли
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ДоступностьРоли(ИмяРоли) Экспорт
	
	Если РольДоступна(ИмяРоли) Тогда	
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Функция для получения криптомодуля
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьКриптоМодуль() Экспорт
	Если ПараметрыСеанса.KPI_РежимЗащиты Тогда
		Возврат KPI_МодульСЛК.СоздатьОбъект("KPI_КриптоМодуль");
	Иначе 
		Возврат Обработки.KPI_КриптоМодуль.Создать();
	КонецЕсли;
КонецФункции

//Функция для получения лицензии
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьЛицензии() Экспорт
	Если ПараметрыСеанса.KPI_РежимЗащиты Тогда
		Возврат KPI_МодульСЛК.СоздатьОбъект("KPI_Лицензии");
	Иначе 
		Возврат Обработки.KPI_Лицензии.Создать();
	КонецЕсли;
КонецФункции

//Функция для получения обработки "KPI_ПроформаПлановИФактов"
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьПроформуПлановИФактов() Экспорт
	Если ПараметрыСеанса.KPI_РежимЗащиты Тогда
		Возврат KPI_МодульСЛК.СоздатьОбъект("KPI_ПроформаПлановИФактов");
	Иначе 
		Возврат Обработки.KPI_ПроформаПлановИФактов.Создать();
	КонецЕсли;
КонецФункции

//Функция для получения статуса режима защиты
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьРежимЗащиты() Экспорт
	Возврат ПараметрыСеанса.KPI_РежимЗащиты;
КонецФункции

//Функция для получения Версии конфигуратора
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция ПолучитьВерсиюКонфигурации() Экспорт
	Возврат Константы.KPI_ВерсияКонфигурации.Получить();
КонецФункции

//Функция для установки монопольного режима работы
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура РаботатьМонопольно(Флаг) Экспорт
	УстановитьМонопольныйРежим(Флаг);
КонецПроцедуры

//Функция для выполнения обновления ИБ
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура ВыполнитьОбновлениеИБ() Экспорт
	Обработки.KPI_ОбновлениеИБ.Создать().ВыполнитьОбновление();
КонецПроцедуры

//Функция для установки первоначальной версии ИБ
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура УстановитьПервоначальнуюВерсиюИБ(НачальнаяВерсия) Экспорт
	Константы.KPI_ВерсияКонфигурации.Установить(НачальнаяВерсия);
КонецПроцедуры







