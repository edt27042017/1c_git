// Процедура добавления показателя в формулу 
Процедура ВставитьВФормулу(Представление, Формула, Префикс = "", ПозицияКурсора = Неопределено) Экспорт
	
	Если ПустаяСтрока(Представление) Тогда
		Сообщить("Представление показателя не может быть пустым");
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПозицияКурсора) Тогда
		ПозицияКурсора = Новый Структура(
			"НачалоСтроки,	НачалоКолонки,		КонецСтроки,	КонецКолонки",
			1,				СтрДлина(Формула),	1,				СтрДлина(Формула));	
	КонецЕсли;
		
	ПозицияКурсора.НачалоСтроки	 = ?(ПозицияКурсора.НачалоСтроки  = 0, 1, ПозицияКурсора.НачалоСтроки);
	ПозицияКурсора.НачалоКолонки = ?(ПозицияКурсора.НачалоКолонки = 0, 1, ПозицияКурсора.НачалоКолонки);
	ПозицияКурсора.КонецСтроки	 = ?(ПозицияКурсора.КонецСтроки   = 0, 1, ПозицияКурсора.КонецСтроки);
	ПозицияКурсора.КонецКолонки	 = ?(ПозицияКурсора.КонецКолонки  = 0, 1, ПозицияКурсора.КонецКолонки);
	
	Результат = Сред(Формула, 1, ПозицияКурсора.НачалоКолонки - 1);
	Результат = Результат + "[" + Префикс + ?(Префикс = "", "", ":") + Представление + "]";
	Результат = Результат + Сред(Формула, ПозицияКурсора.КонецКолонки, СтрДлина(Формула));
	
	Формула = Результат;
	
КонецПроцедуры

//Процедура открывать форму для отбора аналитик
//Параметры
// ЦелевойПоказатель 			- тип СправочникСсылка.KPI_ЦелевыеПоказатели
// КлючАналитики     			- тип СправочникСсылка.KPI_КлючиАналитики
// НаименованиеФильтраАналитик  - тип строка, наименование задааное для фильтра аналитик
// Владелец                     - элемент управляемой формы или управляемая форма,
// СтандартнаяОбработка         - тип булево, указавает необходимость использования стандартной обработки
Процедура НачалоВыбораАналитик(ЦелевойПоказатель, КлючАналитики, НаименованиеФильтраАналитик = "", Владелец, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ЦелевойПоказатель) Тогда
		Сообщить("Перед отбором аналитик необходимо выбрать целевой показатель.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЦП"                         , ЦелевойПоказатель);
	ПараметрыОткрытия.Вставить("НаименованиеФильтраАналитик", НаименованиеФильтраАналитик);
	ПараметрыОткрытия.Вставить("КлючАналитики"              , КлючАналитики);
	
	ОткрытьФорму("ОбщаяФорма.KPI_ФормаАналитик", ПараметрыОткрытия, Владелец);
	
КонецПроцедуры

//Процедура для открытия формы объекта документа "KPI_СмартЗадача"
//при делигировании смарт-задачи
//Параметры:
// Основание - тип ДокументСсылка.KPI_СмартЗадача, делегиремая задача.
Процедура ДелегироватьСмартЗадачу(Основание) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Делегировать");
	ЗначенияЗаполнения.Вставить("Основание"        ,Основание);
	
	ПараметрыОткрытия  = Новый Структура;		
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения",ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.KPI_СмартЗадача.ФормаОбъекта",ПараметрыОткрытия);
	
КонецПроцедуры

//Функция Выполняемая перед началом работы управляемого приложения
//Параметры:
// нет
//Возвращаемое значение:
// нет
Функция МодульУправляемогоПриложения_ПередНачаломРаботыСистемы() Экспорт
	
	KPI_глИспользоватьПодсистемуУПЦ = Истина;
	
	
	Если KPI_глИспользоватьПодсистемуУПЦ Тогда
		Если KPI_ОбщегоНазначенияСервер.ПолучитьРежимЗащиты() Тогда 
			//KPI_МодульСЛК.ПрочитатьКоординатыСервераСЛК();
			
			НаличиеКлючаЗащитыСтруктура = KPI_МодульСЛК.НаличиеКлючаЗащиты();
			НаличиеКлючаЗащиты = НаличиеКлючаЗащитыСтруктура.Ключ;
			ОписаниеОшибкиСЛК = НаличиеКлючаЗащитыСтруктура.ОписаниеОшибки;
			
			Если Не НаличиеКлючаЗащиты Тогда
				Если KPI_ОбщегоНазначенияСервер.ДоступностьРоли("ПолныеПрава") Тогда
					Если ОткрытьФормуМодально("ОбщаяФорма.KPI_ФормаНастройкиСервераСЛК", Новый Структура("ОписаниеОшибки", ОписаниеОшибкиСЛК)) = Истина Тогда 
						ЗавершитьРаботуСистемы(Ложь);
						Возврат Ложь;
					КонецЕсли;
					
					// проверим работоспособность СЛК еще раз
					НаличиеКлючаЗащитыСтруктура = KPI_МодульСЛК.НаличиеКлючаЗащиты();
					НаличиеКлючаЗащиты = НаличиеКлючаЗащитыСтруктура.Ключ;
					ОписаниеОшибкиСЛК = НаличиеКлючаЗащитыСтруктура.ОписаниеОшибки;
					
					Если Не НаличиеКлючаЗащиты Тогда
						Сообщить(ОписаниеОшибкиСЛК + "
						|Конфигурация ""Управление по целям и KPI"" не будет работать.
						|Установите правильные параметры сервера СЛК !");
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
		//KPI_МодульСЛК.УстановитьКоординатыСервераСЛК(Новый Структура("Хост, Порт", "192.168.0.93", 9099));
		//
		//Сообщить(KPI_МодульСЛК.ДанныеСеанса());
		//Сообщить("СЛК " + KPI_МодульСЛК.Версия());
		//Сообщить("Общее кол-во лицензий в ключах: " + KPI_МодульСЛК.ПолучитьОбщееКоличествоЛицензий());
		//Сообщить("Список ключей: " + KPI_МодульСЛК.ПолучитьСписокКлючей());
		//Попытка
		//	KPI_МодульСЛК.Запуск();
		//Исключение
		//	Сообщить("Ошибка запуска СЛК: " + ОписаниеОшибки());
		//	//ЗавершитьРаботуСистемы();
		//КонецПопытки;
		//
		
		
		//Сообщаем пользователю кол-во лицензий !!! (рабочий код)
		//KPI_МодульСЛК.ПолучитьКолВоЛицензийСОбработки();
		
	КонецЕсли;
	
КонецФункции

//Функция Выполняемая при началом работы управляемого приложения
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура МодульУправляемогоПриложения_ПриНачалеРаботыСистемы() Экспорт
	
	ОбновлениеИБ();
	ПараметрыОткрытия = Новый Структура("НаименованиеПанели","Портал сотрудника");
	ОткрытьФормуЗащищенногоОбъекта("KPI_ПанельВиджетов","Форма",ПараметрыОткрытия);
	
КонецПроцедуры

//Процедура первоначального заполнения ИБ
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура ПервоначальноеЗаполнениеИБ()
	Если НЕ KPI_ИнтерфейсВызовСервера.СтруктураКомпанииЗаполнена() Тогда
		ПараметрыОткрытия = Новый Структура("ПервоначальноеЗаполнение");
		Форма = ОткрытьФорму("Обработка.KPI_ЗаполнениеСтруктурыФилиала.Форма.Форма", ПараметрыОткрытия);
		
		Если Форма = Неопределено Тогда
			Предупреждение("Для первоначального заполнения структуры компании 
			|необходим пользователь с полными правами. 
			|Обратитесь к администратору системы.", , "Внимание!");
			ПрекратитьРаботуСистемы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Процедура обновления ИБ
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура ОбновлениеИБ()		
	// Проверка необходимости обновления информационной базы.
	Если KPI_глВерсияКонфигурации <> KPI_ОбщегоНазначенияСервер.ПолучитьВерсиюКонфигурации() Тогда	
		Если KPI_ОбщегоНазначенияСервер.ПолучитьВерсиюКонфигурации() <> "" Тогда
			Предупреждение("Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.", , "Управление по целям и KPI");
			
			//Проверка легальности
			Результат = ОткрытьФормуМодально("Обработка.ЛегальностьПолученияОбновлений.Форма",
			Новый Структура("ПоказыватьПредупреждениеОПерезапуске, ПринудительныйЗапуск", Ложь, Истина));
			
			Если Результат <> Истина Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат;
			КонецЕсли;
		Иначе
			// Это первый запуск
			// -= Здесь будет процедура первоначального заполнения  =-
			//Сообщить("Начальное заполнение информационной базы выполнено успешно.", СтатусСообщения.Информация);
			ПервоначальноеЗаполнениеИБ();
			KPI_ОбщегоНазначенияСервер.УстановитьПервоначальнуюВерсиюИБ(KPI_глВерсияКонфигурации);
			Возврат;
		КонецЕсли;
	Иначе
		// версия конфигурации не изменилась
		Возврат;
	КонецЕсли;
	
	
	Попытка
		KPI_ОбщегоНазначенияСервер.РаботатьМонопольно(Истина);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Предупреждение("Не удалось установить монопольный режим.
		|Обновление информационной базы будет отменено.
		|Завершите все сеансы работы с информационной базой и повторите попытку.");
		Возврат;
	КонецПопытки;
	
	
	//ВыполнитьОбновлениеИнфБазы(глТекущийПользователь,глТекущееПодразделение);
	KPI_ОбщегоНазначенияСервер.ВыполнитьОбновлениеИБ();
	
	KPI_ОбщегоНазначенияСервер.РаботатьМонопольно(Ложь);
	
	
	// Проверка выполнения обновления информационной базы.
	Если KPI_глВерсияКонфигурации <> KPI_ОбщегоНазначенияСервер.ПолучитьВерсиюКонфигурации() Тогда
		Текст = "Обновление информационной базы не выполнено!
		|Завершить работу системы?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПрекратитьРаботуСистемы();
		КонецЕсли;
	Иначе
		Сообщить("Обновление информационной базы выполнено успешно.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура открытия для форм, которые существуют и в открытом виде, и в защищенных обработках
//Параметры:
// ИмяОбъекта  - тип строка, имя обработки
// ИмяФормы    - тип строка, имя формы
// Параметры   - тип структура
// Владелец    - тип Управляемая форма, элемент формы
// Уникальность
// Окно 
Процедура ОткрытьФормуЗащищенногоОбъекта(ИмяОбъекта, ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, Окно = Неопределено) Экспорт
	Если KPI_ОбщегоНазначенияСервер.ПолучитьРежимЗащиты() Тогда
		// Используем закрытую обработку
		Попытка
			ЛокалИмяФормы = KPI_МодульСЛК.ПолучитьПолноеИмяЗащищенногоОбъекта(ИмяОбъекта) + ".Форма." + ИмяФормы;
			Форма = ОткрытьФорму(ЛокалИмяФормы, Параметры, Владелец, Уникальность, Окно);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Иначе 
		// Используем открытую обработку
		ОткрытьФорму("Обработка." + ИмяОбъекта + ".Форма." + ИмяФормы, Параметры, Владелец, Уникальность, Окно);
	КонецЕсли;
КонецПроцедуры

