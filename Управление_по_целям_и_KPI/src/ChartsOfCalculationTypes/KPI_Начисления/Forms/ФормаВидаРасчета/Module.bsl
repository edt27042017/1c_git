
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ФОРМУЛЫ

// ========= На сервере

&НаСервере
Функция ПроверитьФормулуНаСервере()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	""ПР:"" + Справочник.KPI_ПоказателиРасчета.Наименование КАК Наименование
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	""ЦП:"" + Справочник.KPI_ЦелевыеПоказатели.Наименование КАК Наименование
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Справочник.KPI_Шкалы.Наименование";
	//
	//РезультатЗапроса = Запрос.ВыполнитьПакет();
	//
	//ПредставленияПоказателейРасчета	= РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Наименование");
	//ПредставленияЦелевыхПоказателей = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Наименование");
	//ПредставленияШкал				= РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Наименование");
	
	ДеревоИспользуемыеПоказателиСервер = РеквизитФормыВЗначение("ДеревоИспользуемыеПоказатели");
	
	УзелПоказателиРасчета	= ДеревоИспользуемыеПоказателиСервер.Строки.Найти("Показатели расчета", "Элемент");
	УзелЦелевыеПоказатели	= ДеревоИспользуемыеПоказателиСервер.Строки.Найти("Целевые показатели", "Элемент");
	УзелШкалыРасчета		= ДеревоИспользуемыеПоказателиСервер.Строки.Найти("Шкалы",				"Элемент");
	
	ПредставленияПоказателейРасчета = УзелПоказателиРасчета.Строки.ВыгрузитьКолонку("Представление");
	ПредставленияЦелевыхПоказателей = УзелЦелевыеПоказатели.Строки.ВыгрузитьКолонку("Представление");
	ПредставленияШкал               = УзелШкалыРасчета.Строки.ВыгрузитьКолонку("Представление");
	
	КриптоМодуль = KPI_ОбщегоНазначенияСервер.ПолучитьКриптоМодуль();
	
	ФормулаКорректна = КриптоМодуль.ПроверитьФормулу(
		Объект.ФормулаРасчета,
		ПредставленияПоказателейРасчета,
		ПредставленияЦелевыхПоказателей,
		ПредставленияШкал);
	
	Возврат ФормулаКорректна;
КонецФункции

&НаСервере
Функция ЗаменитьЭлементВФормуле(СтрТипЭлемента, ПредставлениеИсходное, ПредставлениеНовое = "")
	КриптоМодуль = KPI_ОбщегоНазначенияСервер.ПолучитьКриптоМодуль();
	
	Возврат КриптоМодуль.ЗаменитьЭлементВФормуле(
		Объект.ФормулаРасчета,
		СтрТипЭлемента,
		ПредставлениеИсходное,
		ПредставлениеНовое);
		
КонецФункции

// ========= На клиенте

&НаКлиенте
Процедура ДобавитьШкалуВФормулу(Представление, Формула, ПозицияКурсора = Неопределено) Экспорт
	
	Если ПустаяСтрока(Представление) Тогда
		Сообщить("Представление показателя не может быть пустым");
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПозицияКурсора) Тогда
		ПозицияКурсора = Новый Структура(
			"НачалоСтроки,	НачалоКолонки,		КонецСтроки,	КонецКолонки",
			1,				СтрДлина(Формула),	1,				СтрДлина(Формула));	
	КонецЕсли;
		
	ПозицияКурсора.НачалоСтроки	 = ?(ПозицияКурсора.НачалоСтроки  = 0, 1, ПозицияКурсора.НачалоСтроки);
	ПозицияКурсора.НачалоКолонки = ?(ПозицияКурсора.НачалоКолонки = 0, 1, ПозицияКурсора.НачалоКолонки);
	ПозицияКурсора.КонецСтроки	 = ?(ПозицияКурсора.КонецСтроки   = 0, 1, ПозицияКурсора.КонецСтроки);
	ПозицияКурсора.КонецКолонки	 = ?(ПозицияКурсора.КонецКолонки  = 0, 1, ПозицияКурсора.КонецКолонки);
	
	Результат = Сред(Формула, 1, ПозицияКурсора.НачалоКолонки - 1);
	Результат = Результат + "<["+Представление+"];";
	Результат = Результат + Сред(Формула, ПозицияКурсора.НачалоКолонки, СтрДлина(Формула));
	Результат = Результат + ">";
	
	Формула = Результат;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ========= На сервере

&НаСервере
Процедура ЗаполнитьДеревоИспользуемыеПоказатели()
	ДеревоПоказателейСервер = РеквизитФормыВЗначение("ДеревоИспользуемыеПоказатели");
	
	УзелПоказателиРасчета = ДеревоПоказателейСервер.Строки.Найти("Показатели расчета");
	Если УзелПоказателиРасчета = Неопределено Тогда
		УзелПоказателиРасчета = ДеревоПоказателейСервер.Строки.Добавить();
		УзелПоказателиРасчета.Элемент	= "Показатели расчета";
	Иначе
		УзелПоказателиРасчета.Строки.Очистить();
	КонецЕсли;
	
	УзелЦелевыеПоказатели = ДеревоПоказателейСервер.Строки.Найти("Целевые показатели");
	Если УзелЦелевыеПоказатели = Неопределено Тогда
		УзелЦелевыеПоказатели = ДеревоПоказателейСервер.Строки.Добавить();
		УзелЦелевыеПоказатели.Элемент	= "Целевые показатели";
	Иначе
		УзелЦелевыеПоказатели.Строки.Очистить();
	КонецЕсли;
	
	УзелШкалы = ДеревоПоказателейСервер.Строки.Найти("Шкалы");
	Если УзелШкалы = Неопределено Тогда
		УзелШкалы = ДеревоПоказателейСервер.Строки.Добавить();
		УзелШкалы.Элемент	= "Шкалы";
	Иначе
		УзелШкалы.Строки.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	KPI_НачисленияПоказателиРасчета.ПоказательРасчета,
	|	KPI_НачисленияПоказателиРасчета.Представление,
	|	ВЫБОР
	|		КОГДА KPI_НачисленияПоказателиРасчета.ПоказательРасчета.Предопределенный
	|			ТОГДА 5
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	ПланВидовРасчета.KPI_Начисления.ПоказателиРасчета КАК KPI_НачисленияПоказателиРасчета
	|ГДЕ
	|	KPI_НачисленияПоказателиРасчета.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_НачисленияЦелевыеПоказатели.ЦелевойПоказатель,
	|	KPI_НачисленияЦелевыеПоказатели.Представление,
	|	KPI_НачисленияЦелевыеПоказатели.Ресурс,
	|	KPI_НачисленияЦелевыеПоказатели.Шкала,
	|	KPI_НачисленияЦелевыеПоказатели.НаименованиеФильтраАналитик,
	|	KPI_НачисленияЦелевыеПоказатели.МатрицаРаспределения,
	|	KPI_НачисленияЦелевыеПоказатели.КлючАналитики,
	|	ВЫБОР
	|		КОГДА KPI_НачисленияЦелевыеПоказатели.ЦелевойПоказатель.Предопределенный
	|			ТОГДА 5
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	ПланВидовРасчета.KPI_Начисления.ЦелевыеПоказатели КАК KPI_НачисленияЦелевыеПоказатели
	|ГДЕ
	|	KPI_НачисленияЦелевыеПоказатели.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_НачисленияШкалыРасчета.Шкала,
	|	KPI_НачисленияШкалыРасчета.Представление,
	|	ВЫБОР
	|		КОГДА KPI_НачисленияШкалыРасчета.Шкала.Предопределенный
	|			ТОГДА 5
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	ПланВидовРасчета.KPI_Начисления.ШкалыРасчета КАК KPI_НачисленияШкалыРасчета
	|ГДЕ
	|	KPI_НачисленияШкалыРасчета.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = УзелПоказателиРасчета.Строки.Добавить();
		Строка.Элемент			= Выборка.ПоказательРасчета;
		Строка.Представление	= Выборка.Представление;
		Строка.Картинка			= Выборка.Картинка;
	КонецЦикла;
		
	Выборка =  РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка					= УзелЦелевыеПоказатели.Строки.Добавить();
		Строка.Элемент			= Выборка.ЦелевойПоказатель;
		Строка.Представление	= Выборка.Представление;
		Строка.Ресурс			= Выборка.Ресурс;
		Строка.Шкала			= Выборка.Шкала;
		Строка.НаименованиеФильтраАналитик	= Выборка.НаименованиеФильтраАналитик;
		Строка.МатрицаРаспределения			= Выборка.МатрицаРаспределения;
		Строка.КлючАналитики	= Выборка.КлючАналитики;
		Строка.Картинка			= Выборка.Картинка;
	КонецЦикла;
		
	Выборка =  РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = УзелШкалы.Строки.Добавить();
		Строка.Элемент			= Выборка.Шкала;
		Строка.Представление	= Выборка.Представление;
		Строка.Картинка			= Выборка.Картинка;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПоказателейСервер, "ДеревоИспользуемыеПоказатели");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоВсеПоказатели()
	
	ДеревоВсеПоказателиСервер = РеквизитФормыВЗначение("ДеревоВсеПоказатели");
	
	УзелПоказателиРасчетаВсе = ДеревоВсеПоказателиСервер.Строки.Найти("Показатели расчета");
	Если УзелПоказателиРасчетаВсе = Неопределено Тогда
		УзелПоказателиРасчетаВсе = ДеревоВсеПоказателиСервер.Строки.Добавить();
		УзелПоказателиРасчетаВсе.Элемент	= "Показатели расчета";
	Иначе
		УзелПоказателиРасчетаВсе.Строки.Очистить();
	КонецЕсли;
	
	УзелЦелевыеПоказателиВсе = ДеревоВсеПоказателиСервер.Строки.Найти("Целевые показатели");
	Если УзелЦелевыеПоказателиВсе = Неопределено Тогда
		УзелЦелевыеПоказателиВсе = ДеревоВсеПоказателиСервер.Строки.Добавить();
		УзелЦелевыеПоказателиВсе.Элемент	= "Целевые показатели";
	Иначе
		УзелЦелевыеПоказателиВсе.Строки.Очистить();
	КонецЕсли;
	
	УзелШкалыВсе = ДеревоВсеПоказателиСервер.Строки.Найти("Шкалы");
	Если УзелШкалыВсе = Неопределено Тогда
		УзелШкалыВсе = ДеревоВсеПоказателиСервер.Строки.Добавить();
		УзелШкалыВсе.Элемент	= "Шкалы";
	Иначе
		УзелШкалыВсе.Строки.Очистить();
	КонецЕсли;
	
	ДеревоИспользуемыеПоказателиСервер = РеквизитФормыВЗначение("ДеревоИспользуемыеПоказатели");
	
	УзелПоказателиРасчетаИспользуемые = ДеревоИспользуемыеПоказателиСервер.Строки.Найти("Показатели расчета", "Элемент");
	УзелШкалыИспользуемые = ДеревоИспользуемыеПоказателиСервер.Строки.Найти("Шкалы", "Элемент");
	
	МассивПоказателей	= УзелПоказателиРасчетаИспользуемые.Строки.ВыгрузитьКолонку("Элемент");
	МассивШкал			= УзелШкалыИспользуемые.Строки.ВыгрузитьКолонку("Элемент");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	KPI_ПоказателиРасчета.Ссылка КАК Элемент,
	|	ВЫБОР
	|		КОГДА KPI_ПоказателиРасчета.Предопределенный
	|			ТОГДА 5
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Справочник.KPI_ПоказателиРасчета КАК KPI_ПоказателиРасчета
	|ГДЕ
	|	KPI_ПоказателиРасчета.ПометкаУдаления = ЛОЖЬ
	|	И НЕ KPI_ПоказателиРасчета.Ссылка В (&МассивПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	KPI_ПоказателиРасчета.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_ЦелевыеПоказатели.Ссылка КАК Элемент,
	|	ВЫБОР
	|		КОГДА KPI_ЦелевыеПоказатели.Предопределенный
	|			ТОГДА 5
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Справочник.KPI_ЦелевыеПоказатели КАК KPI_ЦелевыеПоказатели
	|ГДЕ
	|	KPI_ЦелевыеПоказатели.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	KPI_ЦелевыеПоказатели.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	KPI_Шкалы.Ссылка КАК Элемент,
	|	ВЫБОР
	|		КОГДА KPI_Шкалы.Предопределенный
	|			ТОГДА 5
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Справочник.KPI_Шкалы КАК KPI_Шкалы
	|ГДЕ
	|	KPI_Шкалы.ПометкаУдаления = ЛОЖЬ
	|	И НЕ KPI_Шкалы.Ссылка В (&МассивШкал)
	|
	|УПОРЯДОЧИТЬ ПО
	|	KPI_Шкалы.Наименование";
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	Запрос.УстановитьПараметр("МассивШкал", МассивШкал);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = УзелПоказателиРасчетаВсе.Строки.Добавить();
		Строка.Элемент	= Выборка.Элемент; 
		Строка.Картинка	= Выборка.Картинка;
	КонецЦикла;
		
	Выборка =  РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = УзелЦелевыеПоказателиВсе.Строки.Добавить();
		Строка.Элемент	= Выборка.Элемент;
		Строка.Картинка	= Выборка.Картинка;
	КонецЦикла;
		
	Выборка =  РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = УзелШкалыВсе.Строки.Добавить();
		Строка.Элемент	= Выборка.Элемент;
		Строка.Картинка	= Выборка.Картинка;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоВсеПоказателиСервер, "ДеревоВсеПоказатели");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВоВсеПоказатели(Элемент, Родитель)
	
	ДеревоВсеПоказателиСервер = РеквизитФормыВЗначение("ДеревоВсеПоказатели");
	
	Если ДеревоВсеПоказателиСервер.Строки.Найти(Элемент, "Элемент", Истина) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Узел = ДеревоВсеПоказателиСервер.Строки.Найти(Родитель, "Элемент");
	
	Строка = Узел.Строки.Добавить();
	Строка.Элемент	= Элемент; 
	Строка.Картинка	= ?(Элемент.Предопределенный, 5, 3);
	
	Узел.Строки.Сортировать("Элемент");
	ЗначениеВРеквизитФормы(ДеревоВсеПоказателиСервер, "ДеревоВсеПоказатели");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементИзВсехПоказателей(Элемент)
	
	ДеревоВсеПоказателиСервер = РеквизитФормыВЗначение("ДеревоВсеПоказатели");
	
	Строка = ДеревоВсеПоказателиСервер.Строки.Найти(Элемент, "Элемент", Истина);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.Родитель.Строки.Удалить(Строка);
	ЗначениеВРеквизитФормы(ДеревоВсеПоказателиСервер, "ДеревоВсеПоказатели");
	
КонецПроцедуры

//&НаСервере
//Процедура УдалитьИспользуемыйПоказательСервер(Индекс)
//	ДеревоПоказателей = РеквизитФормыВЗначение("ДеревоИспользуемыеПоказатели");
//	
//	ДеревоПоказателей.Строки.Удалить(Индекс);
//	
//	ЗначениеВРеквизитФормы(ДеревоПоказателей, "ДеревоИспользуемыеПоказатели");
//КонецПроцедуры

&НаСервере
Функция ПриИзмененииПредставленияСервер(ВведенныйТекст, ТекущиеДанныеПредставление, Родитель, СтандартнаяОбработка);
	
	Если ПустаяСтрока(ВведенныйТекст) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат "";
	КонецЕсли;
	
	ВведенныйТекст = СокрЛП(ВведенныйТекст);
	
	ДеревоПредставлений = РеквизитФормыВЗначение("ДеревоИспользуемыеПоказатели");
	Если ДеревоПредставлений.Строки.Найти(ВведенныйТекст, "Представление", Истина) <> Неопределено Тогда
		Сообщить("Представление '"+ВведенныйТекст+"' уже используется!");
		СтандартнаяОбработка = Ложь;
		Возврат "";
	КонецЕсли;
		
	Возврат ЗаменитьЭлементВФормуле(Родитель, ТекущиеДанныеПредставление, ВведенныйТекст);
КонецФункции

&НаСервере
Функция ВыборПоказателяСервер(Элемент)
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("ВыбранноеЗначение", Неопределено);
	РезультатВыбора.Вставить("СледующийЭлемент",  Неопределено);
	
	Если Элемент = Неопределено
		ИЛИ Не ЗначениеЗаполнено(Элемент)
		ИЛИ ТипЗнч(Элемент) = Тип("Строка") Тогда
		
		Возврат РезультатВыбора;
	КонецЕсли;
	
	СтрТипУзла = "";
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.KPI_ПоказателиРасчета") Тогда
		СтрТипУзла = "Показатели расчета";
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.KPI_ЦелевыеПоказатели") Тогда
		СтрТипУзла = "Целевые показатели";
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.KPI_Шкалы") Тогда
		СтрТипУзла = "Шкалы";
	Иначе
		Возврат РезультатВыбора;
	КонецЕсли;
	
	ДеревоПоказателей = РеквизитФормыВЗначение("ДеревоИспользуемыеПоказатели");
	
	Если СтрТипУзла <> "Целевые показатели" Тогда
		Если ДеревоПоказателей.Строки.Найти(Элемент, "Элемент", Истина) <> Неопределено Тогда
			Возврат РезультатВыбора;
		КонецЕсли;
	КонецЕсли;
	
	Узел = ДеревоПоказателей.Строки.Найти(СтрТипУзла, "Элемент");
	Если Узел = Неопределено Тогда
		Возврат РезультатВыбора;
	КонецЕсли;
	
	Строка = Узел.Строки.Добавить();
	Строка.Элемент = Элемент;
	Строка.Представление = ПолучитьУникальноеПредставление(Узел, СокрЛП(Элемент));
	Строка.Картинка = ?(Элемент.Предопределенный, 5, 3);
	
	Узел.Развернут = Истина;
	РезультатВыбора.ВыбранноеЗначение = Строка.Представление;
	
	// Определить значение элемента ДеревоВсеПоказатели, на котором необходимо
	//  спозиционироваться по завершении выбора
	Если СтрТипУзла = "Целевые показатели" Тогда
		
		РезультатВыбора.СледующийЭлемент = Элемент;
		
	Иначе
		
		ДеревоВсеПоказателиСервер = РеквизитФормыВЗначение("ДеревоВсеПоказатели");
		УзелВсеПоказатели = ДеревоВсеПоказателиСервер.Строки.Найти(Элемент, "Элемент", Истина);
		РезультатВыбора.СледующийЭлемент = НайтиСледующийЭлементВДереве(УзелВсеПоказатели);
		
		УдалитьЭлементИзВсехПоказателей(Элемент);
		Узел.Строки.Сортировать("Элемент", Истина);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоПоказателей, "ДеревоИспользуемыеПоказатели");
	Модифицированность = Истина;
	
	Возврат РезультатВыбора;
	
КонецФункции

&НаСервере
Функция НайтиСледующийЭлементВДереве(Дерево)
	
	Значение = Дерево.Элемент; 
	КоличествоСтрок = Дерево.Родитель.Строки.Количество() - 1;
	
	Если КоличествоСтрок <= 0 Тогда
		Возврат Дерево.Родитель.Элемент;
	КонецЕсли;
	
	Индекс = Дерево.Родитель.Строки.Индекс(Дерево);
	
	Если Индекс = КоличествоСтрок Тогда
		Индекс = Индекс - 1;
	Иначе
		Индекс = Индекс + 1;
	КонецЕсли;
	
	Возврат Дерево.Родитель.Строки[Индекс].Элемент;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.ТипРасчетаНачислений = Перечисления.KPI_ТипыРасчетаНачислений.ФиксированнойСуммой Тогда
		
		Элементы.УчитыватьОтработаноеВремя.Видимость	= Истина;
		Элементы.ГруппаПанельСтраниц.Доступность		= Ложь;
		
	Иначе
		
		Элементы.УчитыватьОтработаноеВремя.Видимость	= Ложь;
		Элементы.ГруппаПанельСтраниц.Доступность		= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

//&НаСервере
//Процедура УстановитьДоступностьКнопокИспользуемыеПоказатели(Доступность)
//	
//	МассивКнопок = Новый Массив;
//	МассивКнопок.Добавить(Элементы.КнопкаУдалитьПоказательИзИспользуемых);
//	МассивКнопок.Добавить(Элементы.ДеревоИспользуемыеПоказателиДобавитьВФормулу);
//	
//	Для Каждого Элемент Из МассивКнопок Цикл
//		Элемент.Доступность = Доступность;
//	КонецЦикла;
//	
//КонецПроцедуры

//&НаСервере
//Процедура УстановитьДоступностьКнопокВсеПоказатели(Доступность)
//	
//	МассивКнопок = Новый Массив;
//	МассивКнопок.Добавить(Элементы.КнопкаДобавитьПоказательВИспользуемые);
//	
//	Для Каждого Элемент Из МассивКнопок Цикл
//		Элемент.Доступность = Доступность;
//	КонецЦикла;
//	
//КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЭлементВФормуле(Формула, СтрТипЭлемента, Представление)
	
	КриптоМодуль = KPI_ОбщегоНазначенияСервер.ПолучитьКриптоМодуль();
	
	Возврат КриптоМодуль.НайтиЭлементВФормуле(Формула, СтрТипЭлемента, Представление);
	
КонецФункции

&НаСервере
Функция ПолучитьУникальноеПредставление(Дерево, Наименование)
	
	Если ТипЗнч(Дерево) = Тип("Строка") Тогда
		мДерево = РеквизитФормыВЗначение(Дерево);
	Иначе
		мДерево = Дерево;
	КонецЕсли;
	
	Представление = СокрЛП(Наименование);
	
	Сч = 1;
	Пока мДерево.Строки.Найти(Представление, "Представление", Истина) <> Неопределено Цикл
		Представление = "" + Наименование + "_" + Прав("00" + Сч, 2);
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат Представление;
КонецФункции

// ========= На клиенте

&НаКлиенте
Процедура ДобавитьТекущийПоказатель()
	
	ТекущиеДанные = Элементы.ДеревоИспользуемыеПоказатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Элемент) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Формула = Объект.ФормулаРасчета;
		
	ПозицияКурсора = Новый Структура(
		"НачалоСтроки,	НачалоКолонки,		КонецСтроки,	КонецКолонки",
		1,				СтрДлина(Формула),	1,				СтрДлина(Формула));
		
	Элементы.ФормулаРасчетаРедактируемая.ПолучитьГраницыВыделения(
		ПозицияКурсора.НачалоСтроки,	ПозицияКурсора.НачалоКолонки,
		ПозицияКурсора.КонецСтроки,		ПозицияКурсора.КонецКолонки);
		
	ДлинаФормулыДоРедактирования = СтрДлина(Формула);
	
	Показатель    = ТекущиеДанные.Элемент;
	Представление = ТекущиеДанные.Представление;
	Префикс		  = "";
	КорректировкаКурсора = 0;
	
	Если ТипЗнч(ТекущиеДанные.Элемент) = Тип("СправочникСсылка.KPI_ПоказателиРасчета") Тогда
		
		Префикс = "ПР";	
		KPI_ИнтерфейсКлиент.ВставитьВФормулу(Представление, Формула, Префикс, ПозицияКурсора);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Элемент) = Тип("СправочникСсылка.KPI_ЦелевыеПоказатели") Тогда
		
		Префикс = "ЦП";	
		KPI_ИнтерфейсКлиент.ВставитьВФормулу(Представление, Формула, Префикс, ПозицияКурсора);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Элемент) = Тип("СправочникСсылка.KPI_Шкалы") Тогда
		
		ДобавитьШкалуВФормулу(Представление, Формула, ПозицияКурсора);
		
	КонецЕсли;
	
	ДлинаФормулыПослеРедактирования = СтрДлина(Объект.ФормулаРасчета);
	ДлинаФормулыИзменение = ДлинаФормулыПослеРедактирования - ДлинаФормулыДоРедактирования;
	ПозицияКурсораПослеРедактирования = ПозицияКурсора.НачалоКолонки + ДлинаФормулыИзменение + КорректировкаКурсора;
	Если ПозицияКурсораПослеРедактирования = 0 Тогда
		ПозицияКурсораПослеРедактирования = ДлинаФормулыПослеРедактирования;
	КонецЕсли;
	
	Объект.ФормулаРасчета = Формула;
	ОбновитьОтображениеДанных();
	
	Попытка
		Элементы.ФормулаРасчетаРедактируемая.УстановитьГраницыВыделения(ПозицияКурсораПослеРедактирования, ПозицияКурсораПослеРедактирования);
	Исключение
		//Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ТекущийЭлемент = Элементы.ФормулаРасчетаРедактируемая;
	Модифицированность = Истина;
	
	Если ТипЗнч(ТекущиеДанные.Элемент) = Тип("СправочникСсылка.KPI_Шкалы") 
		И ПозицияКурсора.НачалоКолонки <>ПозицияКурсора.КонецКолонки Тогда
		
		ПроверитьФормулуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПоказателяКлиент()
	
	ТекущиеДанные = Элементы.ДеревоВсеПоказатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСостоянияУзлов(ДеревоИспользуемыеПоказатели, "ДеревоИспользуемыеПоказатели");
	ЗаполнитьСостоянияУзлов(ДеревоВсеПоказатели, "ДеревоВсеПоказатели");
	
	РезультатВыбора = ВыборПоказателяСервер(ТекущиеДанные.Элемент);
	
	Если РезультатВыбора.ВыбранноеЗначение = Неопределено
		И РезультатВыбора.СледующийЭлемент = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоИспользуемыеПоказатели.ТекущаяСтрока =
		KPI_ОбщегоНазначения.ПолучитьИдентификаторСтрокиДереваПоЗначению(РезультатВыбора.ВыбранноеЗначение, ДеревоИспользуемыеПоказатели, "Представление");
		
	Элементы.ДеревоВсеПоказатели.ТекущаяСтрока =
		KPI_ОбщегоНазначения.ПолучитьИдентификаторСтрокиДереваПоЗначению(РезультатВыбора.СледующийЭлемент, ДеревоВсеПоказатели, "Элемент");
		
	РазвернутьУзлыДерева(ДеревоИспользуемыеПоказатели, "ДеревоИспользуемыеПоказатели");
	РазвернутьУзлыДерева(ДеревоВсеПоказатели, "ДеревоВсеПоказатели");
	
	ТекущийЭлемент = Элементы.ДеревоВсеПоказатели;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУзлыДерева(Дерево, ИмяТаблицыФормы)
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		Если Элемент.Развернут Тогда
			Элементы[ИмяТаблицыФормы].Развернуть(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
		
		//	Рекурсивный вызов отключен за ненадобностью
		//КонтрольРазвернутыхУзловДерева(Элемент, ИмяТаблицыФормы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСостоянияУзлов(Дерево, ИмяТаблицыФормы, Рекурсивно = Ложь)
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		Элемент.Развернут = Элементы[ИмяТаблицыФормы].Развернут(Элемент.ПолучитьИдентификатор());
		
		Если Рекурсивно Тогда
			ЗаполнитьСостоянияУзлов(Элемент, ИмяТаблицыФормы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура ДобавитьПоказательВФормулу(Команда)
	
	ДобавитьТекущийПоказатель();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбщийСписокПоказателей(Команда)
	ЗаполнитьДеревоВсеПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	Если ПроверитьФормулуНаСервере() Тогда 
		Сообщить("Формула корректна");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказательВИспользуемые(Команда)
	ВыборПоказателяКлиент();
	ТекущийЭлемент = Элементы.ДеревоВсеПоказатели;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// ========= На сервере

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.ПериодРасчетаБазы = 1 Тогда
		ЭтаФорма.ПредставлениеПериодаРасчета  = "ТекущийМесяц";
	ИначеЕсли Объект.ПериодРасчетаБазы = 3 Тогда
		ЭтаФорма.ПредставлениеПериодаРасчета  = "ТекущийКвартал";
	ИначеЕсли Объект.ПериодРасчетаБазы = 12 Тогда
		ЭтаФорма.ПредставлениеПериодаРасчета  = "ТекущийГод";
	ИначеЕсли Объект.ПериодРасчетаБазы = -1 Тогда
		ЭтаФорма.ПредставлениеПериодаРасчета  = "ПредыдущийМесяц";
	ИначеЕсли Объект.ПериодРасчетаБазы = -3 Тогда
		ЭтаФорма.ПредставлениеПериодаРасчета  = "ПредыдущийКвартал";
	ИначеЕсли Объект.ПериодРасчетаБазы = -12 Тогда
		ЭтаФорма.ПредставлениеПериодаРасчета  = "ПредыдущийГод";
	Иначе
		ЭтаФорма.ПредставлениеПериодаРасчета  = "НесколькоМесяцев";
		ЭтаФорма.КоличествоМесяцевРасчетаБазы = - Объект.ПериодРасчетаБазы;
	КонецЕсли;
	
	ЗаполнитьДеревоИспользуемыеПоказатели();
	ЗаполнитьДеревоВсеПоказатели();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ПроверитьФормулуНаСервере() Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Если ЭтаФорма.ПредставлениеПериодаРасчета = "ТекущийМесяц" Тогда
		ТекущийОбъект.ПериодРасчетаБазы = 1;
	ИначеЕсли ЭтаФорма.ПредставлениеПериодаРасчета = "ТекущийКвартал" Тогда
		ТекущийОбъект.ПериодРасчетаБазы = 3;
	ИначеЕсли ЭтаФорма.ПредставлениеПериодаРасчета = "ТекущийГод" Тогда
		ТекущийОбъект.ПериодРасчетаБазы = 12;
	ИначеЕсли ЭтаФорма.ПредставлениеПериодаРасчета = "ПредыдущийМесяц" Тогда
		ТекущийОбъект.ПериодРасчетаБазы = -1;
	ИначеЕсли ЭтаФорма.ПредставлениеПериодаРасчета = "ПредыдущийКвартал" Тогда
		ТекущийОбъект.ПериодРасчетаБазы = -3;
	ИначеЕсли ЭтаФорма.ПредставлениеПериодаРасчета = "ПредыдущийГод" Тогда
		ТекущийОбъект.ПериодРасчетаБазы = -12;
	ИначеЕсли  ЭтаФорма.ПредставлениеПериодаРасчета = "НесколькоМесяцев" Тогда
		ТекущийОбъект.ПериодРасчетаБазы = - ЭтаФорма.КоличествоМесяцевРасчетаБазы; 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередЗаписьюНаСервере(Отказ, ПараметрыЗаписи, УдалениеЭлементовПодтверждено = Ложь)
	
	Объект.ПоказателиРасчета.Очистить();
	Объект.ЦелевыеПоказатели.Очистить();
	Объект.ШкалыРасчета.Очистить();
	
	Если Объект.ТипРасчетаНачислений = Перечисления.KPI_ТипыРасчетаНачислений.ФиксированнойСуммой Тогда
		
		Объект.ФормулаРасчета = "";
		
	Иначе
		
		ДеревоПоказателей		= РеквизитФормыВЗначение("ДеревоИспользуемыеПоказатели");
		УзелПоказателиРасчета	= ДеревоПоказателей.Строки.Найти("Показатели расчета", "Элемент");
		УзелЦелевыеПоказатели	= ДеревоПоказателей.Строки.Найти("Целевые показатели", "Элемент");
		УзелШкалы				= ДеревоПоказателей.Строки.Найти("Шкалы", "Элемент");
		
		Для Каждого СтрокаУзла Из УзелПоказателиРасчета.Строки Цикл
			Если НЕ НайтиЭлементВФормуле(Объект.ФормулаРасчета, "Показатели расчета", СтрокаУзла.Представление) Тогда
				Если НЕ УдалениеЭлементовПодтверждено Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
				
			Строка = Объект.ПоказателиРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаУзла);
			Строка.ПоказательРасчета = СтрокаУзла.Элемент;
		КонецЦикла;

		Для Каждого СтрокаУзла Из УзелЦелевыеПоказатели.Строки Цикл
			Если НЕ НайтиЭлементВФормуле(Объект.ФормулаРасчета, "Целевые показатели", СтрокаУзла.Представление) Тогда
				Если НЕ УдалениеЭлементовПодтверждено Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Строка = Объект.ЦелевыеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаУзла);
			Строка.ЦелевойПоказатель = СтрокаУзла.Элемент;
		КонецЦикла;
		
		Для Каждого СтрокаУзла Из УзелШкалы.Строки Цикл
			Если НЕ НайтиЭлементВФормуле(Объект.ФормулаРасчета, "Шкалы", СтрокаУзла.Представление) Тогда
				Если НЕ УдалениеЭлементовПодтверждено Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Строка = Объект.ШкалыРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаУзла);
			Строка.Шкала = СтрокаУзла.Элемент;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// ========= На клиенте

&НаКлиенте
Процедура КоличествоМесяцевРасчетаБазыРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЭтаФорма.КоличествоМесяцевРасчетаБазы = ЭтаФорма.КоличествоМесяцевРасчетаБазы + Направление;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПоказателиРасчетаПоказателиРасчетаПередУдалением(Элемент, Отказ)
//	
//	ТекстВопроса = "Удалить показатель из формулы?";
//	Ответ        = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		ТекущиеДанные           = Элементы.ПоказателиРасчета.ТекущиеДанные;
//		ПредставлениеПоказателя = "["+ ТекущиеДанные.Наименование +"]";
//		Объект.ФормулаРасчета   = СтрЗаменить(Объект.ФормулаРасчета,ПредставлениеПоказателя,"");
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЗаполнитьСостоянияУзлов(ДеревоВсеПоказатели, "ДеревоВсеПоказатели");
	ЗаполнитьСостоянияУзлов(ДеревоИспользуемыеПоказатели, "ДеревоИспользуемыеПоказатели");
	
	Если НЕ ПередЗаписьюНаСервере(Отказ, ПараметрыЗаписи) Тогда
		Если Вопрос("Не все показатели добавлены в формулу! Записать элемент?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ПередЗаписьюНаСервере(Отказ, ПараметрыЗаписи, Истина);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоИспользуемыеПоказатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Формула = ПриИзмененииПредставленияСервер(Текст, ТекущиеДанные.Представление, Родитель.Элемент, СтандартнаяОбработка);
	
	Если НЕ ПустаяСтрока(Формула) Тогда
		Объект.ФормулаРасчета = Формула;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Представление = СокрЛП(ТекущиеДанные.Представление);
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРасчетНачисленийПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоИспользуемыеПоказатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		
		НомерСтроки = Элементы.ДеревоИспользуемыеПоказатели.ТекущаяСтрока;
		УзелРазвернут = Элементы.ДеревоИспользуемыеПоказатели.Развернут(НомерСтроки);
		
		Если УзелРазвернут Тогда
			Элементы.ДеревоИспользуемыеПоказатели.Свернуть(НомерСтроки);
		Иначе	
			Элементы.ДеревоИспользуемыеПоказатели.Развернуть(НомерСтроки);
		КонецЕсли; 
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИспользуемыеТекущийЭлемент = Элемент.ТекущийЭлемент;
	Если ИспользуемыеТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Родитель.Элемент = "Целевые показатели" Тогда
		
		Если ИспользуемыеТекущийЭлемент.Имя = "ДеревоИспользуемыеПоказателиЭлемент" Тогда
			Отказ = Истина;
		Иначе
			Отказ = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ИспользуемыеТекущийЭлемент.Имя = "ДеревоИспользуемыеПоказателиПредставление" Тогда
			Отказ = Ложь;
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиПередУдалением(Элемент, Отказ)
	
	ТекущийЭлемент = Элементы.ДеревоИспользуемыеПоказатели;
	
	ТекущиеДанные = Элементы.ДеревоИспользуемыеПоказатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НайтиЭлементВФормуле(Объект.ФормулаРасчета, Родитель.Элемент, ТекущиеДанные.Представление) Тогда
		
		Если Вопрос("Элемент будет удален из формулы. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ФормулаРасчета = ЗаменитьЭлементВФормуле(Родитель.Элемент, ТекущиеДанные.Представление);
	КонецЕсли;
	
	Если НЕ Отказ И СокрЛП(Родитель.Элемент) <> "Целевые показатели" Тогда
		
		ЗаполнитьСостоянияУзлов(ДеревоВсеПоказатели, "ДеревоВсеПоказатели");
		
		ТекущиеДанныеВсеПоказатели = Элементы.ДеревоВсеПоказатели.ТекущиеДанные;
		ДобавитьЭлементВоВсеПоказатели(ТекущиеДанные.Элемент, СокрЛП(Родитель.Элемент));
		 
		Если ТекущиеДанныеВсеПоказатели <> Неопределено Тогда
			Элементы.ДеревоВсеПоказатели.ТекущаяСтрока =
				KPI_ОбщегоНазначения.ПолучитьИдентификаторСтрокиДереваПоЗначению(ТекущиеДанныеВсеПоказатели.Элемент, ДеревоВсеПоказатели, "Элемент");
		КонецЕсли;
				
		РазвернутьУзлыДерева(ДеревоВсеПоказатели, "ДеревоВсеПоказатели");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаполнитьДеревоИспользуемыеПоказатели();
	ЗаполнитьДеревоВсеПоказатели();
	
	РазвернутьУзлыДерева(ДеревоВсеПоказатели, "ДеревоВсеПоказатели");
	РазвернутьУзлыДерева(ДеревоИспользуемыеПоказатели, "ДеревоИспользуемыеПоказатели");
	
	УстановитьВидимость();
КонецПроцедуры

//&НаКлиенте
//Процедура ДеревоИспользуемыеПоказателиПриАктивизацииЯчейки(Элемент)
//	
//	//ТекущиеДанные = Элементы.ДеревоИспользуемыеПоказатели.ТекущиеДанные;
//	//Если ТекущиеДанные = Неопределено Тогда
//	//	УстановитьДоступностьКнопокИспользуемыеПоказатели(Ложь);
//	//	Возврат;
//	//КонецЕсли;
//	//
//	//УстановитьДоступностьКнопокИспользуемыеПоказатели(Булево(ТекущиеДанные.Картинка));
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ДеревоВсеПоказателиПриАктивизацииЯчейки(Элемент)
//	
//	//ТекущиеДанные = Элементы.ДеревоВсеПоказатели.ТекущиеДанные;
//	//Если ТекущиеДанные = Неопределено Тогда
//	//	УстановитьДоступностьКнопокВсеПоказатели(Ложь);
//	//	Возврат;
//	//КонецЕсли;
//	//
//	//УстановитьДоступностьКнопокВсеПоказатели(ТекущиеДанные.Картинка);
//	
//КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоказательИспользуемые(Команда)

	ТекущиеДанные = Элементы.ДеревоИспользуемыеПоказатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Элемент) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСправочника = ПолучитьЗначениеСвойстваОбъектаМетаданных(ТекущиеДанные.Элемент, "Имя");
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Элемент);
	ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеСвойстваОбъектаМетаданных(Ссылка, ИмяСвойства)
	Возврат Ссылка.Метаданные()[ИмяСвойства];
КонецФункции

&НаКлиенте
Процедура ОткрытьПоказательВсе(Команда)
	
	ТекущиеДанные = Элементы.ДеревоВсеПоказатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Элемент) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСправочника = ПолучитьЗначениеСвойстваОбъектаМетаданных(ТекущиеДанные.Элемент, "Имя");
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Элемент);
	ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Родитель = Элемент.ДанныеСтроки(ТекущиеДанные.ПолучитьИдентификатор()).ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли Родитель.Элемент = "Показатели расчета"
		ИЛИ Родитель.Элемент = "Шкалы" Тогда
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПолучитьУникальноеПредставление("ДеревоИспользуемыеПоказатели", СокрЛП(ТекущиеДанные.Элемент));
		ТекущиеДанные.Представление	= Представление;
		ТекущиеДанные.Картинка		= ПолучитьЗначениеКартинкиЭлемента(ТекущиеДанные.Элемент);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКартинкиЭлемента(Элемент)
	
	Возврат ?(Элемент.Предопределенный, 5, 3);
	
КонецФункции

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиНаименованиеФильтраАналитикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоИспользуемыеПоказатели.ТекущиеДанные;
	ЦП            = ТекущиеДанные.Элемент;
	КлючАналитики = ТекущиеДанные.КлючАналитики;
	НаименованиеФильтраАналитик = ТекущиеДанные.НаименованиеФильтраАналитик;
	
	KPI_ИнтерфейсКлиент.НачалоВыбораАналитик(
		ЦП, КлючАналитики, НаименованиеФильтраАналитик, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиНаименованиеФильтраАналитикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоИспользуемыеПоказатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИспользуемыеПоказателиНаименованиеФильтраАналитикОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КлючАналитики = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПоказателиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоВсеПоказатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		
		НомерСтроки = Элементы.ДеревоВсеПоказатели.ТекущаяСтрока;
		УзелРазвернут = Элементы.ДеревоВсеПоказатели.Развернут(НомерСтроки);
		
		Если УзелРазвернут Тогда
			Элементы.ДеревоВсеПоказатели.Свернуть(НомерСтроки);
		Иначе	
			Элементы.ДеревоВсеПоказатели.Развернуть(НомерСтроки);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;
	
	ВыборПоказателяКлиент();
	ТекущийЭлемент = Элементы.ДеревоВсеПоказатели;
		
КонецПроцедуры

