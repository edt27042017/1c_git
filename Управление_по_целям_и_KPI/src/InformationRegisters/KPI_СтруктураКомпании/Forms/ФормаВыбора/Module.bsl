&НаКлиенте
перем НайденныеИндексы;


&НаСервере
Процедура СформироватьДерево()
		ТекстЗапроса = "ВЫБРАТЬ
		|	KPI_СтруктураКомпанииСрезПоследних.СтруктураКомпании,
		|	ЕСТЬNULL(KPI_СтруктураКомпанииСрезПоследних.СтруктураКомпании.Должность.Наименование, """") + "" ("" + ЕСТЬNULL(KPI_СтруктураКомпанииСрезПоследних.Сотрудник.ФизическоеЛицо.Наименование, """") + "")"" + ЕСТЬNULL("" *("" + KPI_СтруктураКомпанииСрезПоследних.Сотрудник.Квалификация.Наименование + "")"", """") КАК СтруктураКомпанииПредставление,
		|	KPI_СтруктураКомпанииСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.KPI_СтруктураКомпании.СрезПоследних(&ДатаФормирования, &Филиал) КАК KPI_СтруктураКомпанииСрезПоследних
		|ГДЕ
		|	НЕ KPI_СтруктураКомпанииСрезПоследних.СтруктураУдалена
		|	И НЕ KPI_СтруктураКомпанииСрезПоследних.Уволен
		|
		|УПОРЯДОЧИТЬ ПО
		|	KPI_СтруктураКомпанииСрезПоследних.СтруктураКомпании ИЕРАРХИЯ";
	Если Параметры.Свойство("Филиал") И ЗначениеЗаполнено(Параметры.Филиал) Тогда	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Филиал","СтруктураКомпании.Филиал = &Филиал");
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Филиал","");
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("Филиал",Параметры.Филиал);
	
	Запрос.УстановитьПараметр("ДатаФормирования", КонецДня(ДатаФормированияСтруктуры));

	
	
	Результат = Запрос.Выполнить();

	Дерево = РеквизитФормыВЗначение("ДеревоКомпании");
	Дерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКомпании");   
КонецПроцедуры


&НаКлиенте
Процедура ДатаФормированияСтруктурыПриИзменении(Элемент)
	
	СформироватьДерево();
	РаскрытьВсеУровни();
	KPI_ОбщегоНазначения.СпозиционироватьКурсорВДереве(ДеревоКомпании.ПолучитьЭлементы(), "СтруктураКомпании", ТекущаяСтруктураКомпании, Элементы.ДеревоКомпании.ТекущаяСтрока);
	НайденныеИндексы = Неопределено;
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьЭлементСтруктуры(Команда)
	
	НайденныеИндексы = Неопределено;
	ТекущиеДанные             = Элементы.ДеревоКомпании.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура;
	ЗначенияЗаполнения = Новый Структура;
	Если ТекущиеДанные <> Неопределено Тогда	
		ЗначенияЗаполнения.Вставить("Родитель",ТекущиеДанные.СтруктураКомпании);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения"   ,ЗначенияЗаполнения);
	ПараметрыОткрытия.Вставить("ДатаСозданияСтруктуры",ЭтаФорма.ДатаФормированияСтруктуры);
	
	ОткрытьФорму("Справочник.KPI_СтруктураКомпании.Форма.ФормаЭлемента", ПараметрыОткрытия , ЭтаФорма);
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.Свойство("ОтображатьДатуФормирования") Тогда
		Элементы.ДатаФормированияСтруктуры.Видимость = Параметры.ОтображатьДатуФормирования;
	КонецЕсли;
	
	Параметры.Свойство("Дата", ДатаФормированияСтруктуры);
	ОбъектУправления = Неопределено;
	
	Если Параметры.Свойство("ОбъектУправления",ОбъектУправления)Тогда
		Если ТипЗнч(ОбъектУправления) = Тип("СправочникСсылка.KPI_Сотрудники") Тогда
			 ЭтаФорма.ТекущаяСтруктураКомпании = ОбъектУправления.СтруктураКомпании;
		 ИначеЕсли ТипЗнч(ОбъектУправления) = Тип("СправочникСсылка.KPI_СтруктураКомпании") Тогда
			 ЭтаФорма.ТекущаяСтруктураКомпании = ОбъектУправления;
		КонецЕсли;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДатаФормированияСтруктуры) Тогда
		ДатаФормированияСтруктуры = ТекущаяДата();
	КонецЕсли;
	
	СформироватьДерево();
	
	ЭтаФорма.Заголовок = "Структура компании на " + Формат(КонецДня(ДатаФормированияСтруктуры), "ДЛФ=Д");
	
	Если Параметры.Свойство("ЗакрыватьПриВыборе") Тогда
		ЭтаФорма.ЗакрыватьПриВыборе = ?(Параметры.ЗакрыватьПриВыборе = Истина, Истина, Ложь);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РаскрытьВсеУровни()
	КоллекцияСтрок = ДеревоКомпании.ПолучитьЭлементы();
	Для Каждого стр Из КоллекцияСтрок Цикл
		Идентификатор = стр.ПолучитьИдентификатор();
		Элементы.ДеревоКомпании.Развернуть(Идентификатор, Истина);
	КонецЦикла;	
КонецПроцедуры	


&НаКлиенте
Процедура ДеревоКомпанииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//Если ЭтаФОрма.ВладелецФормы <> Неопределено и ЭтаФорма.ВладелецФормы.ИмяФормы = "Документ.KPI_ПриказОНазначенииНаДолжность.Форма.ФормаДокумента" Тогда
	//	ВыборЭлементаДокументомПриказОНазначенииНаДолжность(Элемент, СтандартнаяОбработка);
	//ИначеЕсли ЭтаФОрма.ВладелецФормы <> Неопределено и ЭтаФорма.ВладелецФормы.ИмяФормы = "Документ.KPI_ПриказОСнятииСДолжности.Форма.ФормаДокумента" Тогда	
	//	ВыборЭлементаДокументомПриказОСнятииСДолжности(Элемент, СтандартнаяОбработка);  	
	//ИначеЕсли ЭтаФОрма.ВладелецФормы <> Неопределено и ЭтаФорма.ВладелецФормы.ИмяФормы = "Документ.KPI_ПриказОПереводе.Форма.ФормаДокумента" и ЭтаФорма.ВладелецФормы.Элементы.Сотрудники.ТекущийЭлемент.Имя = "СотрудникиСтараяДолжность" Тогда 
	//	ВыборЭлементаДокументомПриказОСнятииСДолжности(Элемент, СтандартнаяОбработка);
	//ИначеЕсли ЭтаФОрма.ВладелецФормы <> Неопределено и ЭтаФорма.ВладелецФормы.ИмяФормы = "Документ.KPI_ПриказОПереводе.Форма.ФормаДокумента" и ЭтаФорма.ВладелецФормы.Элементы.Сотрудники.ТекущийЭлемент.Имя = "СотрудникиСтруктураКомпании" Тогда	
	//	ВыборЭлементаДокументомПриказОНазначенииНаДолжность(Элемент, СтандартнаяОбработка);
	//Иначе
	//	ВыборЭлементаОбщий(Элемент);
	//КонецЕсли;
	
	ВыборЭлементаОбщий(Элемент);
		
КонецПроцедуры


//&НаСервере
//Процедура ИзменитьРодителяСтруктурыКомпании(ИдентификаторСтроки)
//	
//	
//	
//КонецПроцедуры


//&НаКлиенте
//Процедура ВыборЭлементаДокументомПриказОНазначенииНаДолжность(Элемент, СтандартнаяОбработка)
//	ФизическоеЛицо = ПолучитьФизЛицоПоСтруктуреНаДатуНаСервере(Элемент.ТекущиеДанные.СтруктураКомпании, ДатаФормированияСтруктуры);
//	
//	//+Проверка на идентичное физ лицо для документа перевода на другую должность
//	ОдинакФизЛицо = Ложь;
//	Если ЭтаФорма.ВладелецФормы.ИмяФормы <> "Документ.KPI_ПриказОНазначенииНаДолжность.Форма.ФормаДокумента" Тогда
//		ФизическоеЛицоПеревод = ПолучитьФизЛицоПоСтруктуреНаДатуНаСервере(ПолучитьСтруктуруПоСотрудникуНаСервере(ЭтаФорма.ВладелецФормы.ТекущийЭлемент.ТекущиеДанные.СтараяДолжность), ДатаФормированияСтруктуры);
//		
//		
//		Если ЭтаФорма.ВладелецФормы.ИмяФормы = "Документ.KPI_ПриказОПереводе.Форма.ФормаДокумента" Тогда
//			Если ФизическоеЛицо = ФизическоеЛицоПеревод Тогда
//				ОдинакФизЛицо = Истина;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;	
//	//-
//	
//	Если Не ЗначениеЗаполнено(ФизическоеЛицо) или (ОдинакФизЛицо И ЭтаФорма.ВладелецФормы.ИмяФормы = "Документ.KPI_ПриказОПереводе.Форма.ФормаДокумента") Тогда	
//		Если ПроверкаНаВозможностьПроведенияЗаднимЧисломСервер(Элемент.ТекущиеДанные.СтруктураКомпании, ДатаФормированияСтруктуры) Тогда
//			Структура = Новый Структура("СтруктураКомпании", Элемент.ТекущиеДанные.СтруктураКомпании);
//			ОповеститьОВыборе(Структура);
//		Иначе
//			Сообщить("Невозможно выбрать текущую должность, т.к. на эту должность назначен сотрудник документом с более поздней датой");
//			СтандартнаяОбработка = Ложь;
//		КонецЕсли;		
//	Иначе   		 
//		Сообщить("Нельзя выбирать должность, занятую сотрудником");
//		СтандартнаяОбработка = Ложь; 	
//	КонецЕсли;
//КонецПроцедуры


&НаКлиенте
Процедура ВыборЭлементаОбщий(Элемент)
	Структура = Новый Структура;
	Структура.Вставить("СтруктураКомпании", Элемент.ТекущиеДанные.СтруктураКомпании);
	Структура.Вставить("СтруктураКомпанииПредставление", Элемент.ТекущиеДанные.СтруктураКомпанииПредставление);
	Структура.Вставить("Сотрудник", KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(Элемент.ТекущиеДанные.СтруктураКомпании, ДатаФормированияСтруктуры));
	
	ОповеститьОВыборе(Структура);
КонецПроцедуры


//&НаКлиенте
//Процедура ВыборЭлементаДокументомПриказОСнятииСДолжности(Элемент, СтандартнаяОбработка)
//	ФизическоеЛицо = ПолучитьФизЛицоПоСтруктуреНаДатуНаСервере(Элемент.ТекущиеДанные.СтруктураКомпании, ДатаФормированияСтруктуры);
//	
//	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
//		Сообщить("На данную должность нет назначенного сотрудника");
//		СтандартнаяОбработка = Ложь;
//	Иначе
//		Структура = Новый Структура("СтруктураКомпании", Элемент.ТекущиеДанные.СтруктураКомпании);
//		Структура.Вставить("СтруктураКомпанииПредставление", Элемент.ТекущиеДанные.СтруктураКомпанииПредставление);
//		Структура.Вставить("Сотрудник", KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(Элемент.ТекущиеДанные.СтруктураКомпании, ДатаФормированияСтруктуры));

//		ОповеститьОВыборе(Структура);
//	КонецЕсли;
//КонецПроцедуры	


//&НаСервере
//Функция ПроверкаНаВозможностьПроведенияЗаднимЧисломСервер(СтруктураКомпании, Дата)
//	Возврат KPI_ОбщегоНазначенияСервер.ПроверкаНаВозможностьПроведенияЗаднимЧислом(СтруктураКомпании, Дата);
//КонецФункции	


&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	KPI_ОбщегоНазначения.СпозиционироватьКурсорВДереве(ДеревоКомпании.ПолучитьЭлементы(), "СтруктураКомпании", ТекущаяСтруктураКомпании, Элементы.ДеревоКомпании.ТекущаяСтрока);
	
КонецПроцедуры


&НаКлиенте
Процедура НайтиСтрокуДерева(НаправлениеПоиска = 1)
	
	 Если НайденныеИндексы = Неопределено Тогда
		НайденныеИндексы = Новый Массив;	
		НайтиСтрокиВхождений(ДеревоКомпании.ПолучитьЭлементы(),НайденныеИндексы);
		Если ЗначениеЗаполнено(НайденныеИндексы) Тогда
			Элементы.ДеревоКомпании.ТекущаяСтрока = НайденныеИндексы[0];
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(НайденныеИндексы) Тогда
			МаксимальныйИндекс    = НайденныеИндексы.ВГраница();
			ТекущиеДанные         = Элементы.ДеревоКомпании.ТекущиеДанные;
			ТекущаяПозицияПоиска  = Неопределено;
			Если НЕ ТекущиеДанные = Неопределено Тогда	
				ТекущаяПозицияПоиска = НайденныеИндексы.Найти(ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
			Если НЕ ТекущаяПозицияПоиска = Неопределено Тогда
				Если НаправлениеПоиска = 1 И МаксимальныйИндекс = ТекущаяПозицияПоиска Тогда
					Элементы.ДеревоКомпании.ТекущаяСтрока = НайденныеИндексы[0];
				ИначеЕсли НаправлениеПоиска = -1 И ТекущаяПозицияПоиска = 0 Тогда
					Элементы.ДеревоКомпании.ТекущаяСтрока = НайденныеИндексы[МаксимальныйИндекс];
				Иначе 
					Элементы.ДеревоКомпании.ТекущаяСтрока = НайденныеИндексы[ТекущаяПозицияПоиска+НаправлениеПоиска];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры


&НаКлиенте
Процедура НайтиСтрокиВхождений(СтрокиДерева,НайденныеИндексы)
	
	Для  Каждого Стр из СтрокиДерева Цикл
		Если Найти(ВРег(Стр.СтруктураКомпанииПредставление),ВРег(ЭтаФорма.СтрокаПоиска)) Тогда
			НайденныеИндексы.Добавить(Стр.ПолучитьИдентификатор());
		КонецЕсли;
		НайтиСтрокиВхождений(Стр.ПолучитьЭлементы(),НайденныеИндексы);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборНаименованиеПриИзменении(Элемент)
	
	НайденныеИндексы = Неопределено;
	
КонецПроцедуры


&НаКлиенте
Процедура СледующаяСтруктура(Команда)
	
	НайтиСтрокуДерева(1);
	
КонецПроцедуры


&НаКлиенте
Процедура ПредыдущаяСтруктура(Команда)
	
	НайтиСтрокуДерева(1);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСтруктурыКомпании" Тогда
		СформироватьДерево();
		РаскрытьВсеУровни();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьСтруктуруКомпании(Команда)
	
	ТекущиеДанные = Элементы.ДеревоКомпании.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.СтруктураКомпании);	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьРодителяСтруктуры(Команда)
	
	Элементы.ДеревоКомпании.РазрешитьНачалоПеретаскивания = Истина;
	Элементы.ДеревоКомпании.РазрешитьПеретаскивание = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура Выбрать(Команда)
	ДеревоКомпанииВыбор(Элементы.ДеревоКомпании, Элементы.ДеревоКомпании.ТекущаяСтрока, Элементы.ДеревоКомпании.ПодчиненныеЭлементы.ДеревоКомпанииПредставление, Истина);
КонецПроцедуры

