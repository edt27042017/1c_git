&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Для добавления файла объект должен быть записан");
		Возврат;
	КонецЕсли;	
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = "Выберите файл";
	Если Диалог.Выбрать() Тогда 
		Файл = Новый Файл(Диалог.ПолноеИмяФайла);
		ДвоичДанные = Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла);
		ЗаписьФайла(ДвоичДанные, Файл.Имя);	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьФайла(ДвоичДанные, Имя)
	
	
	Запись = РегистрыСведений.KPI_Файлы.СоздатьМенеджерЗаписи();
	Запись.Объект = Объект.Ссылка;
	Запись.НазваниеФайла = Имя;
	Запись.Файл = Новый ХранилищеЗначения(ДвоичДанные);
	Запись.Записать();	
	ОбновлениеТаблицыФайлов();
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьФайлНаДиск(Команда)
	
	Попытка
		ИмяФайла = Элементы.ФайлыТаб.ТекущиеДанные.НазваниеФайла;
		ДвоичДанные = СохранитьФайл(ИмяФайла);
		
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		Диалог = Новый ДиалогВыбораФайла(Режим);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.Заголовок = "Сохранить файл";
		Если Диалог.Выбрать() Тогда
			ДвоичДанные.Записать(Диалог.Каталог + ИмяФайла);
		КонецЕсли;
	Исключение
		Сообщить("Выберите файл для сохранения");
	КонецПопытки;	
	
	
КонецПроцедуры

&НаСервере
Функция СохранитьФайл(Имя)
	
	
	Запись = РегистрыСведений.KPI_Файлы.СоздатьМенеджерЗаписи();
	Запись.Объект = Объект.Ссылка;
	Запись.НазваниеФайла = Имя;
	Запись.Прочитать();
	
	ДвоичДанные = Запись.Файл.Получить();
	
	Возврат ДвоичДанные;
	
КонецФункции	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеТаблицНаФорме();
	
	УстановитьЗаголовки();
	
	ВидимостьКнопокКомманднойПанели();
	
	ВидСмартЗадачи = KPI_ОбщегоНазначенияСервер.ПолучитьВидРасчетаСмартЗадачи(Объект.Дата, Объект.СтруктураКомпании, Объект.ПериодичностьПланирования);
	
	ОбновитьПолеВводаФакта();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
	Попытка
		ИмяФайла = Элементы.ФайлыТаб.ТекущиеДанные.НазваниеФайла;
		УдалитьФайлНаСервере(ИмяФайла);
	Исключение
		Сообщить("Выберите файл для сохранения");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлНаСервере(Имя)
	
	Запись = РегистрыСведений.KPI_Файлы.СоздатьМенеджерЗаписи();
	Запись.Объект = Объект.Ссылка;
	Запись.НазваниеФайла = Имя;
	Запись.Прочитать();
	Запись.Удалить(); 
	ОбновлениеТаблицыФайлов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеТаблицыФайлов()
	
	Набор = РегистрыСведений.KPI_Файлы.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Объект.Ссылка);
	Набор.Прочитать();
	ЗначениеВДанныеФормы(Набор, Файлы);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновлениеТаблицыСвязанныхЗадач()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДеревоСвязанныеЗадачи = Документы.KPI_СмартЗадача.СвязанныеЗадачи(Объект.Ссылка);
		ЗначениеВРеквизитФормы(ДеревоСвязанныеЗадачи,"СвязанныеЗадачи");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеВводаФакта()
	
	Если ВидСмартЗадачи = Перечисления.KPI_ВидыРасчетаСмартЗадач.Абсолютный Тогда
		Элементы.Факт.Видимость = Истина;
		Элементы.ФактПолзунок.Видимость = Истина;
		Элементы.Факт.Доступность = Не Объект.Проверено;
		Элементы.ФактПолзунок.Доступность = Не Объект.Проверено;
		Элементы.Вес.Заголовок = "План";
	Иначе 
		Элементы.Факт.Видимость = Ложь;
		Элементы.ФактПолзунок.Видимость = Ложь;
		Элементы.Вес.Заголовок = "Вес";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Утвердить(Команда)
	
	ИзменитьСтатусЗадачи("Утверждение");
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ИзменитьСтатусЗадачи("Проверка");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	ИзменитьСтатусЗадачи("Выполнение");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусЗадачи(Статус)
	
	СмартЗадача = РеквизитФормыВЗначение("Объект");
	Отказ = Ложь;
	СмартЗадача.ИзменитьСтатусЗадачи(Статус,Отказ);
	ЗначениеВРеквизитФормы(СмартЗадача,"Объект");
	
	Прочитать();
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьЗаголовки();
	ВидимостьКнопокКомманднойПанели();
	
	Если ВРег(Статус) = "ПРОВЕРКА" Тогда
		ОбновитьПолеВводаФакта();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовки()
	Элементы.Утвердить.Заголовок = ?(Объект.Утверждено, "Отменить утверждение", "Утвердить");
	Элементы.Выполнить.Заголовок = ?(Объект.Выполнено,  "Отменить выполнение",  "Выполнить");
	Элементы.Проверить.Заголовок = ?(Объект.Проверено,  "Отменить проверку",    "Проверить");
КонецПроцедуры			

&НаСервере
Процедура ВидимостьКнопокКомманднойПанели(ТекущийОбъект = Неопределено) 	
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		Элементы.Проверить.Видимость               = ТекущийОбъект.Выполнено;
		Элементы.Выполнить.Видимость               = Истина;
		Элементы.Утвердить.Видимость               = Истина;
		Элементы.ДелигироватьСмартЗадачу.Видимость = Истина;
		Элементы.ДелигироватьСмартЗадачу.Заголовок   = "Делегировать";
		
	Иначе 
		Элементы.Проверить.Видимость               = Ложь;		
		Элементы.Выполнить.Видимость               = Ложь;
		Элементы.Утвердить.Видимость               = Ложь;
		Элементы.ДелигироватьСмартЗадачу.Видимость = Ложь;
	КонецЕсли;
	
	
	
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьСвязаннуюСмартЗадачу(Команда)
	
	//Заполняем список значений и открываем формы для выбора действия пользователем
	Список = Новый СписокЗначений;
	Список.Добавить("Что то еще");
	
	Элемент = Список.ВыбратьЭлемент();
	Если Элемент <> Неопределено Тогда
		Связь = Элемент.Значение;
	КонецЕсли;
	
	//Создаем документ, в зависимости от вида связи
	Форма = ПолучитьФорму("Документ.KPI_СмартЗадача.ФормаОбъекта");
	Форма.ВладелецФормы = ЭтаФорма;
	Данные = Форма.Объект;
	Задача = СозданиеСвязанногоДокумента(Связь, Данные);
	Если Задача <> Неопределено Тогда
		КопироватьДанныеФормы(Задача, Форма.Объект);
		Форма.Открыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
функция СозданиеСвязанногоДокумента(ВидСвязи, ФормаИсх)
	
	Если ВидСвязи = "" Тогда
		Задача = Документы.KPI_СмартЗадача.СоздатьДокумент();
		Задача.Дата               = Объект.Дата;
		Задача.ВыполнитьДо        = Объект.ВыполнитьДо;
		Задача.АвторДокумента     = ПараметрыСеанса.KPI_ТекущийСотрудник.СтруктураКомпании;
		Задача.ЕдиницаИзмерения   = Объект.ЕдиницаИзмерения;
		Задача.НаименованиеЗадачи = Объект.НаименованиеЗадачи;
		Задача.КритерийВыполнения = Объект.КритерийВыполнения;
		Задача.Этап               = Объект.Этап;
		Задача.Проект             = Объект.Проект;
		Задача.Вес                = Объект.Вес;
		Задача.ГруппаСмартЗадач   = Объект.ГруппаСмартЗадач;
		Задача.Основание = Объект.Ссылка;
		//Задача.ВидСвязи = Перечисления.KPI_ВидыСвязиСмартЗадач.;
		
		Преемник = ДанныеФормыВЗначение(ФормаИсх, Тип("ДокументОбъект.KPI_СмартЗадача"));
		
		ЗаполнитьЗначенияСвойств(Преемник, Задача);
		ЗначениеВДанныеФормы(Преемник, ФормаИсх);
		
		Возврат ФормаИсх;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура СтруктураКомпанииПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Сообщить("Не заполнена дата");
		Возврат;
	КонецЕсли;
	
	ОбъектУправления = KPI_ОбщегоНазначения.ОбработкаВыбораПолучитьСтруктуруКомпанииНаДату(Объект.Дата, ЭтаФорма, СтандартнаяОбработка, , Объект.СтруктураКомпании);
	
	Если Не ОбъектУправления = Неопределено Тогда
		Объект.СтруктураКомпании = ОбъектУправления.СтруктураКомпании;
		Объект.СтруктураКомпанииПредставление = ОбъектУправления.СтруктураКомпанииПредставление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураКомпанииПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	Объект.СтруктураКомпании = ПредопределенноеЗначение("Справочник.KPI_СтруктураКомпании.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.KPI_СтруктураКомпании.Форма.ФормаСписка" Тогда
		Объект.Сотрудник = ВыбранноеЗначение.Идентификатор;
	КонецЕсли;	
	Если ИсточникВыбора.ИмяФормы = "Документ.KPI_СмартЗадача.Форма.ФормаДокумента" Тогда
		ОбновлениеТаблицНаФорме();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		Оповестить("ЗаписьДелегированнойЗадачи",Объект.Основание);
	КонецЕсли;
	
	Оповестить("ОбновитьСмартЗадачи"       ,Объект.Ссылка,ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеТаблицНаФорме()
	
	ОбновлениеТаблицыФайлов();	
	ОбновлениеТаблицыСвязанныхЗадач();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриЗакрытии()
	
	Структура = Новый Структура("ОбновитьФорму", Истина);
	ОповеститьОВыборе(Структура);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.СтруктураКомпании) Тогда
		Сообщить("Перед изменением даты необходимо очистить поле ""Объект управления""");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Проект) И Не ЗначениеЗаполнено(Объект.Этап) Тогда
		Сообщить("Не заполнено поле ""Этап""");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Прочитать();
	ВидимостьКнопокКомманднойПанели(ТекущийОбъект);
	УстановитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактПолзунокПриИзменении(Элемент)
	Объект.Факт = Объект.Вес * Ползунок / 100; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПолзунка()
	Ползунок = ?(Объект.Вес = 0, 0, Цел(100 * Объект.Факт / Объект.Вес));
	Ползунок = ?(Ползунок > 100, 100, Ползунок);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьЗначениеПолзунка();
КонецПроцедуры

&НаКлиенте
Процедура ВесПриИзменении(Элемент)
	УстановитьЗначениеПолзунка();
КонецПроцедуры

&НаКлиенте
Процедура ФактПриИзменении(Элемент)
	УстановитьЗначениеПолзунка();
КонецПроцедуры

&НаКлиенте
Процедура ДелегироватьСмартЗадачу(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = "Делегировать можно только созданую (записаную) задачу. Создать?";
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе 
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	КонецЕсли;
	
	KPI_ИнтерфейсКлиент.ДелегироватьСмартЗадачу(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьДелегированнойЗадачи" И Параметр = Объект.Ссылка Тогда
		 Прочитать();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СвязанныеЗадачиТабВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СвязаннаяЗадача = Элемент.ТекущиеДанные.СмартЗадача;
	ОткрытьЗначение(СвязаннаяЗадача);
	
КонецПроцедуры






