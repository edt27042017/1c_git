//Переносит смарт-задачи в следующий период
//Параметры:
// Смарт-задачи      - тип таблица значений
// Копировать задачи - тип булево, признак создания новых документов
//						Истина - создать новые документы,
//						Ложь   - изменить текущие документы.
//Возвращаемое значение:
// нет
Процедура ПеренестиСмартЗадачи(СмартЗадачи,КопироватьЗадачи) Экспорт
	
	Для Каждого СтрокаСмартЗадача из СмартЗадачи Цикл
		
		Если НЕ СтрокаСмартЗадача.Перенести Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = "";
		Попытка
			Оригинал = СтрокаСмартЗадача.Ссылка;
			Если КопироватьЗадачи Тогда
				Если ЗначениеЗаполнено(Оригинал.ВидСвязи) Тогда
					KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Не удалось скопировать задачу " + Оригинал + ". Данная задача является делегированной и ее можно только перенести."); 
					Продолжить;	
				КонецЕсли;
				ПеренесеннаяЗадача = Оригинал.Скопировать();
				ПеренесеннаяЗадача.Заполнить(Оригинал);
				Если Оригинал.Выполнено Тогда
					ПеренесеннаяЗадача.Вес = Оригинал.Вес - Оригинал.Факт;
				Иначе 
					ПеренесеннаяЗадача.Вес = Оригинал.Вес;
				КонецЕсли;
				ПеренесеннаяЗадача.Факт = 0;
				ТекстСообщения = "Задача " + Оригинал + " скопирована в другой учетный период.";	
			Иначе 
				ПеренесеннаяЗадача = Оригинал.ПолучитьОбъект();
				ТекстСообщения = "Задача " + Оригинал + " перенесена в другой учетный период.";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаСмартЗадача.НовыйСрокИсполнения) Тогда
				ПеренесеннаяЗадача.ВыполнитьДо = СтрокаСмартЗадача.НовыйСрокИсполнения;
				ГраницыПериода                 = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ПеренесеннаяЗадача.ВыполнитьДо,ПеренесеннаяЗадача.ПериодичностьПланирования);
				ПеренесеннаяЗадача.Дата        = ГраницыПериода.НачалоПериода;
			Иначе 
				ПеренесеннаяЗадача.ПеренестиДокументВСледующийПериод();
			КонецЕсли;
			ПеренесеннаяЗадача.Записать();	
		Исключение
			ТекстСообщения = "Не удалось перенести задачу "+Строка(Оригинал)+", "+ОписаниеОшибки();
		КонецПопытки;
		KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
		
	КонецЦикла;
		
КонецПроцедуры

//Получить дерево связанных задач
//Параметры:
// Смарт-задача - ДокументСсылка.KPI_СмартЗадача
//Возвращаемое значение:
// дерево связаных задач, тип дерево значений
Функция СвязанныеЗадачи(СмартЗадача) Экспорт
	
	ДеревоЗадач = Новый ДеревоЗначений;
	ДеревоЗадач.Колонки.Добавить("СмартЗадача",Новый ОписаниеТипов("ДокументСсылка.KPI_СмартЗадача"));
	ДеревоЗадач.Колонки.Добавить("ВидСвязи",Новый ОписаниеТипов("ПеречислениеСсылка.KPI_ВидыСвязиСмартЗадач"));
	
	ЗаполнитьСвязанныеЗадачи(ДеревоЗадач,СмартЗадача);
	Возврат ДеревоЗадач;
	
КонецФункции

Процедура ЗаполнитьСвязанныеЗадачи(УровеньОснование,СмартЗадача)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	KPI_СвязанныеЗадачи.СмартЗадача,
	|	KPI_СвязанныеЗадачи.ВидСвязи
	|ИЗ
	|	РегистрСведений.KPI_СвязанныеЗадачи КАК KPI_СвязанныеЗадачи
	|ГДЕ
	|	KPI_СвязанныеЗадачи.Основание = &Основание";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание",СмартЗадача);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаСвязаннаяЗадача = УровеньОснование.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСвязаннаяЗадача,Выборка);
		ЗаполнитьСвязанныеЗадачи(СтрокаСвязаннаяЗадача,Выборка.СмартЗадача);
		
	КонецЦикла;
		
КонецПроцедуры

//Процедура устанавливает оформление таблицы смарт-задач в виджетах
//Параметры:
// Форма                             - тип Управляемая форма, форма в которой расположена таблицаъ
// Имя таблицы                       - тип строка, имя таблицы со смарт-задач
// НаименованиеРеквизитаДелегирована - тип строка, наименование реквизита в таблице
// НаименованиеРеквизитаУтверждено   - тип строка, наименование реквизита в таблице
// НаименованиеРеквизитаВыполнено    - тип строка, наименование реквизита в таблице
// НаименованиеРеквизитаПроверено    - тип строка, наименование реквизита в таблице
Процедура УстановитьОформлениеСмартЗадач(Форма,ИмяТаблицы = "СмартЗадачи",
	НаименованиеРеквизитаДелегирована = "Делегирована",
	НаименованиеРеквизитаУтверждено   = "Утверждена",
	НаименованиеРеквизитаВыполнено    = "Выполнена",
	НаименованиеРеквизитаПроверено    = "Проверена") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	ЭлементУсловногоОформленияЗадач  = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияЗадач.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Аквамарин);
	ЭлементУсловногоОформленияЗадач.Использование = Истина;
	
	ЭлементОтбораСмартЗадач = ЭлементУсловногоОформленияЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСмартЗадач.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы+"."+НаименованиеРеквизитаДелегирована);
	ЭлементОтбораСмартЗадач.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораСмартЗадач.ПравоеЗначение = Истина;
	ЭлементОтбораСмартЗадач.Использование  = Истина;
	
	ОформляемоеПолеСмартЗадач               = ЭлементУсловногоОформленияЗадач.Поля.Элементы.Добавить();
	ОформляемоеПолеСмартЗадач.Поле          = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	ОформляемоеПолеСмартЗадач.Использование = Истина;

	
	//Оформление утвержденых задач
	ЭлементУсловногоОформленияЗадач  = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияЗадач.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоРозовый);
	ЭлементУсловногоОформленияЗадач.Использование = Истина;
	
	ЭлементОтбораСмартЗадач = ЭлементУсловногоОформленияЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСмартЗадач.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы+"."+НаименованиеРеквизитаУтверждено);
	ЭлементОтбораСмартЗадач.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораСмартЗадач.ПравоеЗначение = Истина;
	ЭлементОтбораСмартЗадач.Использование  = Истина;
	
	ОформляемоеПолеСмартЗадач               = ЭлементУсловногоОформленияЗадач.Поля.Элементы.Добавить();
	ОформляемоеПолеСмартЗадач.Поле          = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	ОформляемоеПолеСмартЗадач.Использование = Истина;
	
	//Оформление выполненных задач
	ЭлементУсловногоОформленияЗадач  = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияЗадач.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоКоричневый);
	ЭлементУсловногоОформленияЗадач.Использование = Истина;
	
	ЭлементОтбораСмартЗадач = ЭлементУсловногоОформленияЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСмартЗадач.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы+"."+НаименованиеРеквизитаВыполнено);
	ЭлементОтбораСмартЗадач.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораСмартЗадач.ПравоеЗначение = Истина;
	ЭлементОтбораСмартЗадач.Использование  = Истина;
	
	ОформляемоеПолеСмартЗадач               = ЭлементУсловногоОформленияЗадач.Поля.Элементы.Добавить();
	ОформляемоеПолеСмартЗадач.Поле          = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	ОформляемоеПолеСмартЗадач.Использование = Истина;


	//Оформление провереных задач
	ЭлементУсловногоОформленияЗадач  = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияЗадач.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);
	ЭлементУсловногоОформленияЗадач.Использование = Истина;
	
	ЭлементОтбораСмартЗадач = ЭлементУсловногоОформленияЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСмартЗадач.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы+"."+НаименованиеРеквизитаПроверено);
	ЭлементОтбораСмартЗадач.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораСмартЗадач.ПравоеЗначение = Истина;
	ЭлементОтбораСмартЗадач.Использование  = Истина;
	
	ОформляемоеПолеСмартЗадач               = ЭлементУсловногоОформленияЗадач.Поля.Элементы.Добавить();
	ОформляемоеПолеСмартЗадач.Поле          = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	ОформляемоеПолеСмартЗадач.Использование = Истина;
		
КонецПроцедуры