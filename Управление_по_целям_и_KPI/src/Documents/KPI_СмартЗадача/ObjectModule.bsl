
Процедура СоздатьДвиженияПоИсторииСмартЗадачи(ЭтапВыполнения)
	
	НаборЗаписей = РегистрыСведений.KPI_ИсторияСмартЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись               = НаборЗаписей.Добавить();
	Запись.Активность    = Истина;
	Запись.Регистратор   = Ссылка;
	Запись.Период        = ТекущаяДата();
	Запись.Ответственный = ПараметрыСеанса.KPI_ТекущийСотрудник.СтруктураКомпании;
	Запись.Этап          = ЭтапВыполнения;
	Запись.СмартЗадача   = Ссылка;
	
	НаборЗаписей.Записать();
	                                    
КонецПроцедуры	                               
      
Процедура ПриЗаписи(Отказ)
	
	Если ПометкаУдаления Тогда
		ОчиститьДвижения(Отказ);
		
		НаборЗаписей = РегистрыСведений.KPI_ИсторияСмартЗадач.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Для Каждого Запись из НаборЗаписей Цикл
			Запись.Активность = Ложь;
		КонецЦикла;
		НаборЗаписей.Записать();
		
	Иначе 
		ДобавитьДвижения(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДвижения(Отказ)
	
	//Делаем запись в регистр плана только при утверждении, а факта, только при проверке
	Движения.KPI_Планы.Очистить();
	Движения.KPI_Факты.Очистить();
	
	НаборЗаписей = РегистрыСведений.KPI_ИсторияСмартЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	Для Каждого Запись из НаборЗаписей Цикл
		Запись.Активность = Истина;
	КонецЦикла;
	НаборЗаписей.Записать();

	Движения.KPI_ИсторияСмартЗадач.Записывать = Ложь;
	
	Если Не ПометкаУдаления Тогда
		ВидСмартЗадачи = KPI_ОбщегоНазначенияСервер.ПолучитьВидРасчетаСмартЗадачи(Дата, СтруктураКомпании, ПериодичностьПланирования);
		
		Если Утверждено Тогда 		      		
			//Если ВидСмартЗадачи = Перечисления.KPI_ВидыРасчетаСмартЗадач.Абсолютный Тогда
				Движение = Движения.KPI_Планы.Добавить();
				Движение.Регистратор = Ссылка;
				Движение.Период = Дата;
				Движение.СтруктураКомпании = СтруктураКомпании;
				Движение.ЦелевойПоказатель = Справочники.KPI_ЦелевыеПоказатели.СмартЗадача;
				Движение.План = Вес;
				Движение.ПериодичностьПланирования = ПериодичностьПланирования;
				Движение.ВидРасчетаСмартЗадач = ВидСмартЗадачи;
			//КонецЕсли;
			
			Если Проверено Или ВидСмартЗадачи = Перечисления.KPI_ВидыРасчетаСмартЗадач.Относительный Тогда 		
				Движение = Движения.KPI_Факты.Добавить();
				Движение.Регистратор = Ссылка;
				Движение.Период = Дата;
				Движение.СтруктураКомпании = СтруктураКомпании;
				Движение.ЦелевойПоказатель = Справочники.KPI_ЦелевыеПоказатели.СмартЗадача;
				
				Если ВидСмартЗадачи = Перечисления.KPI_ВидыРасчетаСмартЗадач.Абсолютный И Проверено Тогда
					Движение.Факт = Факт;
				ИначеЕсли Проверено Тогда 
					Движение.Факт = Вес;
				Иначе 
					Движение.Факт = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
				
		//Движения по регистру РС для различных видов связи
		Если ЗначениеЗаполнено(Основание) И ЗначениеЗаполнено(ВидСвязи) Тогда
			Движение = РегистрыСведений.KPI_СвязанныеЗадачи.СоздатьМенеджерЗаписи();
			Движение.Основание = Основание;
			Движение.Прочитать();
			Движение.Удалить();
			Движение.Период = ТекущаяДата();
			Движение.Основание = Основание;
			Движение.СмартЗадача = Ссылка;
			Движение.ВидСвязи = ВидСвязи;
			Движение.Записать();
		КонецЕсли;
	
	КонецЕсли;
	
	Движения.KPI_Планы.Записать();
	Движения.KPI_Факты.Записать();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	KPI_ИсторияСмартЗадачСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.KPI_ИсторияСмартЗадач.СрезПоследних(, Регистратор = &Регистратор) КАК KPI_ИсторияСмартЗадачСрезПоследних");
	
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Если Запрос.Выполнить().Пустой() Тогда
		ИзменитьСтатусЗадачи("Создание",Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДвижения(Отказ)
	
	Движения.KPI_Планы.Очистить();
	Движения.KPI_Факты.Очистить();
	Движения.KPI_Планы.Записать();
	Движения.KPI_Факты.Записать();
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	ОчиститьДвижения(Отказ);
	
	НаборЗаписей = РегистрыСведений.KPI_ИсторияСмартЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	//нужно очистить записи основания о делегировании
	Если ЗначениеЗаполнено(Основание) и Делегирована Тогда
		НаборЗаписей = РегистрыСведений.KPI_ИсторияСмартЗадач.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Основание);
		НаборЗаписей.Отбор.Этап.Установить(Перечисления.KPI_ЭтапыВыполненияСмартЗадач.Делегирование);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Делегировать") Тогда
				
			Заполнить(ДанныеЗаполнения.Основание);
			ВидСвязи = Перечисления.KPI_ВидыСвязиСмартЗадач.Делегирование;
			Делегирована = Истина;
			Если НЕ Найти(НаименованиеЗадачи,"Делегированная задача: ") Тогда
				НаименованиеЗадачи = "Делегированная задача: " + НаименованиеЗадачи;
			КонецЕсли;
			
		Иначе 	
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.KPI_СмартЗадача") Тогда
		
		Основание                 = ДанныеЗаполнения;
		СтруктураКомпании         = Основание.СтруктураКомпании;
		ПериодичностьПланирования = Основание.ПериодичностьПланирования;
		ВыполнитьДо               = Основание.ВыполнитьДо;
		ЕдиницаИзмерения          = Основание.ЕдиницаИзмерения;
		Приоритет                 = Основание.Приоритет; 
		Вес                       = Основание.Вес;
		Факт                      = Основание.Факт;
		НаименованиеЗадачи        = Основание.НаименованиеЗадачи;
		КритерийВыполнения        = Основание.КритерийВыполнения;
		Комментарий               = Основание.Комментарий;
		ГруппаСмартЗадач          = Основание.ГруппаСмартЗадач;
		ВидСвязи                  = Основание.ВидСвязи;
		Проект                    = Основание.Проект;
		Этап                      = Основание.Этап;
		Утверждено                = Ложь;
		Выполнено                 = Ложь;
		Проверено                 = Ложь;
		Дата                      = ТекущаяДата();
		
	КонецЕсли;
	
	АвторДокумента = ПараметрыСеанса.KPI_ТекущийСотрудник;
	Если НЕ ЗначениеЗаполнено(ВыполнитьДо) 
		И ЗначениеЗаполнено(ПериодичностьПланирования) 
		И ЗначениеЗаполнено(Дата) Тогда
		ГраницыПериода = KPI_ИнтерфейсВызовСервера.ГраницыПериода(Дата,ПериодичностьПланирования);
		ВыполнитьДо = ГраницыПериода.КонецПериода;
	ИначеЕсли ЗначениеЗаполнено(ВыполнитьДо) Тогда
		ГраницыПериода = KPI_ИнтерфейсВызовСервера.ГраницыПериода(ВыполнитьДо,ПериодичностьПланирования);
		Если ГраницыПериода.НачалоПериода > Дата Тогда
			Дата = ГраницыПериода.НачалоПериода;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураКомпанииПредставление = KPI_ОбщегоНазначенияСервер.ПолучитьПредставлениеПоСтруктуреКомпанииНаДату(СтруктураКомпании, Дата);
	
КонецПроцедуры

//Переносит смарт-задачу в следующий период
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура ПеренестиДокументВСледующийПериод() Экспорт
	
	ГраницыПериода           = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ВыполнитьДо, ПериодичностьПланирования);
	КонецТекущегоПериода     = ГраницыПериода.КонецПериода;
	НачалоСледующегоПериода  = КонецТекущегоПериода + 1;
	ГраницыСледующегоПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(НачалоСледующегоПериода, ПериодичностьПланирования);
	КонецСледующегоПериода   = ГраницыСледующегоПериода.КонецПериода;
	
	Дата        = KPI_ИнтерфейсКлиентСервер.ПолучитьДатуВСледующемПериоде(Дата, ПериодичностьПланирования, 1);
	ВыполнитьДо = КонецСледующегоПериода;
	Записать();
		
КонецПроцедуры

//Переносит изменяет реквизиты документа смарт-задачи
//Параметры:
// Значения реквизитов - тип Структура;
//Возвращаемое значение:
// нет
Функция ИзменитьРеквизиты(ЗначенияРеквизитов) Экспорт
	
	Отказ = Ложь;
	СообщениеПользователю = "";
	ПараметрыИзменений = Новый Структура;
	Если ЗначенияРеквизитов.Свойство("Факт") Тогда
		Если Не Выполнено Тогда
			ИзменитьСтатусЗадачи("Выполнение",Отказ,ЗначенияРеквизитов);
			Если Отказ Тогда
				СообщениеПользователю = "Не изменены реквизиты SMART-задачи " + Ссылка + ".";
			Иначе
				СообщениеПользователю = "SMART-задача " + Ссылка + " отмечена как выполненная.";
			КонецЕсли;
			ПараметрыИзменений.Вставить("Выполнено",Выполнено)
		Иначе 
			Факт = ЗначенияРеквизитов.Факт;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Свойство("Комментарий") Тогда
		Комментарий = ЗначенияРеквизитов.Комментарий;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
		ПараметрыИзменений.Вставить("СообщениеПользователю",СообщениеПользователю);
	КонецЕсли;
	
	Записать();
	
	Возврат ПараметрыИзменений;
	
КонецФункции

//Изменяет статус задачи
//Параметры:
// Статус                    - тип строка
// Отказ                     - тип булево, признак отказа от изменения статуса
// Дополнительнгые параметры - тип структура;
//Возвращаемое значение:
// нет
Процедура ИзменитьСтатусЗадачи(Статус,Отказ,ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	ВРегСтатус = ВРег(Статус);
	ЭтапВыполнения = Неопределено;
	Если ВРегСтатус = "СОЗДАНИЕ" Тогда
		ЭтапВыполнения = Перечисления.KPI_ЭтапыВыполненияСмартЗадач.Создание;
		
		//Проверим возможность записи делегированой задачи
		Если Делегирована Тогда
			Если НЕ ЗначениеЗаполнено(Основание) Тогда
				 KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Не указана делегируемая задача.");
				 Отказ = Истина;
				 Возврат;
			КонецЕсли;
			Если Основание.СтруктураКомпании = СтруктураКомпании Тогда
				KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Объекты управления в делегируемой задачи и делегированной задачи одинаковые.");
				Отказ = Истина;
			КонецЕсли;
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	KPI_СтруктураКомпании.Ссылка
			|ИЗ
			|	Справочник.KPI_СтруктураКомпании КАК KPI_СтруктураКомпании
			|ГДЕ
			|	KPI_СтруктураКомпании.Ссылка В ИЕРАРХИИ(&ОбъектУправленияДелегируемый)
			|	И KPI_СтруктураКомпании.Ссылка = &ОбъектУправления";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ОбъектУправленияДелегируемый",Основание.СтруктураКомпании);
			Запрос.УстановитьПараметр("ОбъектУправления",СтруктураКомпании);
			Если Запрос.Выполнить().Пустой() Тогда
				KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Делегировать задачу можно только подчиненному объекту управления.");
				Отказ = Истина;	
			Иначе 
				ВидСвязи = Перечисления.KPI_ВидыСвязиСмартЗадач.Делегирование;
			КонецЕсли;
			//Обновим данные делигированной задачи
			ОснованиеОбъект = Основание.ПолучитьОбъект();
			ОснованиеОбъект.ИзменитьСтатусЗадачи("Делегирована",Отказ);
			//
		КонецЕсли;
		
	ИначеЕсли ВРегСтатус = "УТВЕРЖДЕНИЕ" Тогда
		Утвердить(ЭтапВыполнения,Отказ);
	ИначеЕсли ВРегСтатус = "ВЫПОЛНЕНИЕ" Тогда
		ВыполнитьЗадачу(ЭтапВыполнения,Отказ,ДополнительныеПараметры);
	ИначеЕсли ВРегСтатус = "ПРОВЕРКА" Тогда
		Проверить(ЭтапВыполнения,Отказ);
	ИначеЕсли ВРегСтатус = "ДЕЛЕГИРОВАНА" Тогда
		ЭтапВыполнения = Перечисления.KPI_ЭтапыВыполненияСмартЗадач.Делегирование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтапВыполнения) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Попытка
			Если НЕ ВРегСтатус = "СОЗДАНИЕ" Тогда
			Записать();
			КонецЕсли;
			СоздатьДвиженияПоИсторииСмартЗадачи(ЭтапВыполнения);
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе 
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура Утвердить(ЭтапВыполнения,Отказ)
	
	//Вставить Проверку на право
			
	//Если Выполнено И НЕ ИзменяемыеРеквизиты.Утверждено  Тогда
	Если Выполнено И  Утверждено  Тогда
		KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Нельзя отменить утверждение, если задача выполнена.");
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;

	Если Не Проверено Тогда
		Утверждено = Не Утверждено;	
		Если Утверждено Тогда
			ЭтапВыполнения = Перечисления.KPI_ЭтапыВыполненияСмартЗадач.Утверждение;
			АвторУтверждения = ПараметрыСеанса.KPI_ТекущийСотрудник;
		Иначе
			ЭтапВыполнения = Перечисления.KPI_ЭтапыВыполненияСмартЗадач.ОтменаУтверждения;
			АвторУтверждения = Неопределено;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Проверить(ЭтапВыполнения,Отказ)
	
	//Вставить Проверку на право 
	Если Не Выполнено И НЕ Проверено Тогда
		KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Нельзя проверить задачу, если она не выполнена.");
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Проверено = Не Проверено;
	Если Проверено Тогда
		АвторПроверки = ПараметрыСеанса.KPI_ТекущийСотрудник;
		ЭтапВыполнения          = Перечисления.KPI_ЭтапыВыполненияСмартЗадач.Проверка;
	Иначе
		ЭтапВыполнения          = Перечисления.KPI_ЭтапыВыполненияСмартЗадач.ОтменаПроверки;
		АвторПроверки = Неопределено;
	КонецЕсли;	
		
КонецПроцедуры

Процедура ВыполнитьЗадачу(ЭтапВыполнения,Отказ,ДополнительныеПараметры = Неопределено)
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("Факт") Тогда
			Факт = ДополнительныеПараметры.Факт;
		КонецЕсли;	
	КонецЕсли;
	
	Если Факт = 0 и Не Выполнено Тогда
		Факт = Вес;
	КонецЕсли;	
	
	Если Проверено И Выполнено Тогда
		KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Нельзя отменить выполнение, если задача проверена.");
		Отказ = Истина;	
	ИначеЕсли Не Утверждено И НЕ Выполнено Тогда
		KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Нельзя выполнить задачу, если задача не утверждена.");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
    //Вставить Проверку на право  	
	Если Не Проверено Тогда	
		Выполнено = Не Выполнено;
		Если Выполнено Тогда
			ЭтапВыполнения = Перечисления.KPI_ЭтапыВыполненияСмартЗадач.Выполнение;
		Иначе
			ЭтапВыполнения = Перечисления.KPI_ЭтапыВыполненияСмартЗадач.ОтменаВыполнения;
		КонецЕсли;	
	Иначе
		KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Невозможно отменить выполнение проверенной задачи.");
	КонецЕсли;	

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Утверждено = Ложь;
	Выполнено  = Ложь;
	Проверено  = Ложь;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ВыполнитьДо,ПериодичностьПланирования);
	Если Дата < ГраницыПериода.НачалоПериода Тогда
		Отказ = Истина;
		KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Дата документа  и срок выполнения принаджежат разным периодам планирования.");
	КонецЕсли;
	
КонецПроцедуры
