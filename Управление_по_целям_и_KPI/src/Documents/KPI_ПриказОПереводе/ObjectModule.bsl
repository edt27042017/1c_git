
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Движения.KPI_ПлановыеНачисления.Записать();
	Движения.KPI_ПлановыеНачисления.Записывать = Истина;
	Движения.KPI_ГрафикиРаботыСотрудников.Записать();
	Движения.KPI_ГрафикиРаботыСотрудников.Записывать = Истина;
	
	ОбработкаУдаленияПроведения(Отказ);          
	КритерийПоиска       = Новый Структура("СтруктураКомпании");
	Для каждого Строка Из Сотрудники Цикл
		//Проверка на занятость должности сотрудником
		Сотрудник = KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(Строка.СтараяДолжность, Дата);
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда      			
			Сообщить("Сотрудник " + Сотрудник.ФизическоеЛицо + " не занимает должность """ + Строка.СтараяДолжность.Должность + """ на данную дату");
			УдалитьПроведение = Истина;			
		Иначе
			//Проверка на возможность проведения задним числом
			Если НачалоДня(Дата) >= НачалоДня(ТекущаяДата()) Или KPI_ОбщегоНазначенияСервер.ПроверкаНаВозможностьПроведенияЗаднимЧислом(Строка.СтараяДолжность, Дата, Истина) Тогда
				УдалитьПроведение = Ложь;
			Иначе
				УдалитьПроведение = Истина;
				Сообщить("Проведение задним числом невозможно, т.к. существуют документы снятия с должности """ + Строка.СтараяДолжность.Должность + """ на более позднюю дату (Строка №" + Строка.НомерСтроки + ")");
			КонецЕсли;
		КонецЕсли;	
		
		
		СотрудникНов = KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(Строка.СтруктураКомпании, Дата);
		//Проверка на занятость должности сотрудником
		//Проверка на занятость должности сотрудником
		Если Не ИзменятьКвалификацию И Строка.СтараяДолжность = Строка.СтруктураКомпании  Тогда 
			Сообщить("Нельзя назначать сотрудника на должность уже занимаемую им без смены квалификации (Строка №" + Строка.НомерСтроки + ")");
			УдалитьПроведение = Истина;
		ИначеЕсли ЗначениеЗаполнено(СотрудникНов) и (Сотрудник <>  СотрудникНов)  Тогда      			
			Сообщить("Должность """ + Строка.СтруктураКомпании.Должность + """ уже занята другим сотрудником");
			УдалитьПроведение = Истина;
			
		Иначе	
			//Проверка на возможность проведения задним числом
			Если НачалоДня(Дата) >= НачалоДня(ТекущаяДата()) Или KPI_ОбщегоНазначенияСервер.ПроверкаНаВозможностьПроведенияЗаднимЧислом(Строка.СтруктураКомпании, Дата) Тогда
				УдалитьПроведение = Ложь;
			Иначе
				УдалитьПроведение = Истина;
				Сообщить("Проведение задним числом невозможно, т.к. существуют документы назначения на должность """ + Строка.СтруктураКомпании.Должность + """ на более позднюю дату (Строка №" + Строка.НомерСтроки + ")");
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
	//Движения по РС
	Если Не УдалитьПроведение Тогда
		Для каждого Строка Из Сотрудники Цикл
			СтарыйСотрудник = KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(Строка.СтараяДолжность,Дата-1);
			//////Увольнение
			Запись = РегистрыСведений.KPI_СтруктураКомпании.СоздатьМенеджерЗаписи();
			Запись.СтруктураКомпании = Строка.СтараяДолжность;
			Запись.Период = Дата-1;
			Запись.Прочитать();
			Запись.СтруктураКомпании = Строка.СтараяДолжность;
			Запись.Уволен = Истина;
			Запись.Сотрудник = СтарыйСотрудник;
			Запись.Период = Дата-1;
			Запись.Записать();  
			
			//Делаем запись о пустом структурном подразделении
			Запись = РегистрыСведений.KPI_СтруктураКомпании.СоздатьМенеджерЗаписи();
			Запись.СтруктураКомпании = Строка.СтараяДолжность;
			Запись.Период = Дата;
			Запись.Уволен = Ложь;
			Запись.Период = Дата;
			Запись.Записать(); 

			//закроем начисления по уволеному сотруднику
			Начисления = KPI_ИнтерфейсВызовСервера.СрезПлановыхНачисленийОбъектаУправления(Дата,СтарыйСотрудник,Ложь);
			
			Пока Начисления.Следующий() Цикл
				Движение                = Движения.KPI_ПлановыеНачисления.Добавить();
				Движение.Период         = Дата;
				Движение.Сотрудник      = СтарыйСотрудник;
				Движение.ДатаОкончания  = Дата;
				Движение.Начисление     = Начисления.ВидНачисления;
			КонецЦикла;
			
			//////Прием
			
			Сотрудник = Справочники.KPI_Сотрудники.СоздатьЭлемент();
			Сотрудник.СтруктураКомпании = Строка.СтруктураКомпании;
			Сотрудник.ФизическоеЛицо    = СтарыйСотрудник.ФизическоеЛицо;
			Сотрудник.Квалификация      = ?(ИзменятьКвалификацию и ЗначениеЗаполнено(Строка.Квалификация), Строка.Квалификация,  СтарыйСотрудник.Квалификация);
			Сотрудник.Наименование      = Строка.СтруктураКомпании.Наименование + " (" + СтарыйСотрудник.ФизическоеЛицо + ")";
			Сотрудник.Записать();
			
			//Делаем запись о приеме сотрудника
			Запись = РегистрыСведений.KPI_СтруктураКомпании.СоздатьМенеджерЗаписи();
			Запись.СтруктураКомпании = Строка.СтруктураКомпании;
			Запись.Период            = Дата;
			Запись.Прочитать();
			Запись.СтруктураКомпании = Строка.СтруктураКомпании;
			Запись.Уволен            = Ложь;
			Запись.Сотрудник         = Сотрудник.Ссылка;
			Запись.Период            = Дата;
			Запись.Записать(); 
			
			Движение              = Движения.KPI_ГрафикиРаботыСотрудников.Добавить();
			Движение.Период       = Дата;
			Движение.Сотрудник    = Сотрудник.Ссылка;
			Движение.ГрафикРаботы = Строка.ГрафикРаботы;
			
			
			КритерийПоиска.СтруктураКомпании = Строка.СтруктураКомпании;
			НачисленияСотрудника = ПлановыеНачисления.НайтиСтроки(КритерийПоиска);
			
			Для Каждого НачислениеСотрудника из НачисленияСотрудника Цикл
				Движение                     = Движения.KPI_ПлановыеНачисления.Добавить();
				Движение.Активность          = Истина;
				Движение.Период              = Дата;
				Движение.Регистратор         = Ссылка;
				Движение.Сотрудник           = Сотрудник.Ссылка;
				Движение.Начисление          = НачислениеСотрудника.Начисление;
				Движение.Сумма               = НачислениеСотрудника.Сумма;
				Движение.ДатаНачала          = Дата;
			КонецЦикла;
			
			
			КриптоМодуль = KPI_ОбщегоНазначенияСервер.ПолучитьКриптоМодуль();
			КриптоМодуль.ЗадатьСопоставлениеСотрудникПользователь(Сотрудник,СтарыйСотрудник.ИдентификаторПользователяИБ);
			
		КонецЦикла;	
	КонецЕсли;
	
	Если УдалитьПроведение Тогда
		ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Для каждого Строка Из Сотрудники Цикл
		
		//////Увольнение
		//Удаляем записи об увольнении сотрудника
		Запись = РегистрыСведений.KPI_СтруктураКомпании.СоздатьМенеджерЗаписи();
		Запись.СтруктураКомпании = Строка.СтараяДолжность;
		Запись.Период = Дата-1;
		Запись.Прочитать();
		Запись.Удалить();  
		
		//Удаляем записи о пустом структурном подразделении
		Запись = РегистрыСведений.KPI_СтруктураКомпании.СоздатьМенеджерЗаписи();
		Запись.СтруктураКомпании = Строка.СтараяДолжность;
		Запись.Период = Дата;
		Запись.Прочитать();
		Запись.Удалить();
		
		//////Прием
		Запись = РегистрыСведений.KPI_СтруктураКомпании.СоздатьМенеджерЗаписи();
		Запись.СтруктураКомпании = Строка.СтруктураКомпании;
		Запись.Период = Дата;
		Запись.Прочитать();
		Запись.Удалить();

		
	КонецЦикла;		
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Ответственный = ПараметрыСеанса.KPI_ТекущийСотрудник.СтруктураКомпании;
	
КонецПроцедуры
