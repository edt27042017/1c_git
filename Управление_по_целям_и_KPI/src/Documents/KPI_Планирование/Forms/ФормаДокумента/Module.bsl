&НаКлиенте
Перем мКолвоСтрокОтветственных;


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Подписан.Заголовок = ?(Объект.Подписан, "Отменить подписание", "Подписать");
	Элементы.Подписан.ЦветТекста = ?(Не Объект.Подписан, WebЦвета.Синий, WebЦвета.ЛососьТемный);
	
	ВидимостьВкладкиСтандарты();
	
	ОбновитьОформлениеСамооценки();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьОформлениеСамооценки()
	
	УсловноеОформление.Элементы.Очистить();
	ЭлементОформлениеСамооценки = УсловноеОформление.Элементы.Добавить();
	ЭлементОформлениеСамооценки.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ВесеннеЗеленый);
	
	ЭлементОтбораСамооценки = ЭлементОформлениеСамооценки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСамооценки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтандартыОтветственные.Ответственный");
	ЭлементОтбораСамооценки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораСамооценки.ПравоеЗначение = Объект.СтруктураКомпании;
	ЭлементОтбораСамооценки.Использование = Истина;
	
	ОформляемоеПолеСамооценки = ЭлементОформлениеСамооценки.Поля.Элементы.Добавить();
	ОформляемоеПолеСамооценки.Поле = Новый ПолеКомпоновкиДанных("СтандартыОтветственные");
	ОформляемоеПолеСамооценки.Использование = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ДоступностьРучнойОперации();
	
	ЗаполнитьПредставлениеОбъектаУправления();
	ЗаполнитьПредставлениеОтветственныхВПланах();
	ЗаполнитьПредставлениеОтветственныхПоСтандартам();
	
	мКолвоСтрокОтветственных = Объект.СтандартыОтветственные.Количество();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПредставлениеОбъектаУправления()
	СтруктураКомпанииПредставление = KPI_ОбщегоНазначенияСервер.ПолучитьПредставлениеПоСтруктуреКомпанииНаДату(Объект.СтруктураКомпании, Объект.Дата);
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПредставлениеОтветственныхВПланах()
	Для каждого Стр Из Объект.Планы Цикл
		Стр.ОтветственныйПредставление = KPI_ОбщегоНазначенияСервер.ПолучитьПредставлениеПоСтруктуреКомпанииНаДату(Стр.Ответственный, Объект.Дата);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПредставлениеОтветственныхПоСтандартам()
	Для каждого Стр Из Объект.СтандартыОтветственные Цикл
		Стр.ОтветственныйПредставление = KPI_ОбщегоНазначенияСервер.ПолучитьПредставлениеПоСтруктуреКомпанииНаДату(Стр.Ответственный, Объект.Дата);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ОбъектУправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбъектУправления = KPI_ОбщегоНазначения.ОбработкаВыбораПолучитьСтруктуруКомпанииНаДату(Объект.Дата, ЭтаФорма, СтандартнаяОбработка, , Объект.СтруктураКомпании);
	
	Если Не ОбъектУправления = Неопределено Тогда
		Объект.СтруктураКомпании = ОбъектУправления.СтруктураКомпании;
		СтруктураКомпанииПредставление = ОбъектУправления.СтруктураКомпанииПредставление;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбъектУправленияОчистка(Элемент, СтандартнаяОбработка)
	Объект.СтруктураКомпании = ПредопределенноеЗначение("Справочник.KPI_СтруктураКомпании.ПустаяСсылка");
КонецПроцедуры


&НаКлиенте
Процедура ДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.СтруктураКомпании) Тогда		
		Сообщить("Перед изменением даты необходимо очистить поле ""Структура компании""");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) и Объект.СтандартыОтветственные.Количество() <> 0 Тогда
		Сообщить("Перед изменением даты необходимо очистить список ответственных по стандартам");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Объект.Планы.Количество() > 0 Тогда
		Сообщить("Перед изменением даты необходимо очистить матрицу показателей");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПланыНазваниеАналитикиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Запрещаем выбор названия аналитик для СмартЗадачи и Стандарта
	Если ТекущийЭлемент.ТекущиеДанные.ЦелевойПоказатель = ПредопределенноеЗначение("Справочник.KPI_ЦелевыеПоказатели.СмартЗадача")
		ИЛИ ТекущийЭлемент.ТекущиеДанные.ЦелевойПоказатель = ПредопределенноеЗначение("Справочник.KPI_ЦелевыеПоказатели.Стандарт") Тогда 
		Сообщить("Для целевого показателя """ + ТекущийЭлемент.ТекущиеДанные.ЦелевойПоказатель + """ нельзя устанавливать аналитики");
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Планы.ТекущиеДанные;
	ЦП            = ТекущиеДанные.ЦелевойПоказатель;
	КлючАналитики = ТекущиеДанные.КлючАналитики;
	НаименованиеФильтраАналитик = ТекущиеДанные.НазваниеФильтраАналитик;
	
	KPI_ИнтерфейсКлиент.НачалоВыбораАналитик(ЦП, КлючАналитики, НаименованиеФильтраАналитик, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьМодель(Команда)
	
	Если Объект.Планы.Количество() = 0 Тогда
		Сообщить("Нет целевых показателей для занесения в модель");
		Возврат;
	КонецЕсли;
	
	//Выдаем ошибку, если вес по планам не 100 %
	Если Объект.Планы.Итог("Вес") <> 100 Тогда 
		Сообщить("Общий вес планов должен быть равен 100%");
		Возврат;
	КонецЕсли;	
	
	//Выдаем ошибку, если вес по стандартам не 100 %
	Если Объект.Стандарты.Количество() > 0 Тогда 
		Если Объект.Стандарты.Итог("Вес") <> 100 Тогда 
			Сообщить("Общий вес планов должен быть равен 100%");
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	
	
	//Задаем вопрос о привязке модели к сотруднику или должности и квалификации
	Ответ = Вопрос("Связать модель с сотрудником ?", РежимДиалогаВопрос.ДаНет , , , "");
	Если Ответ = КодВозвратаДиалога.Да Тогда             
		мМодель = ПолучитьСуществующуюМодельПоСотруднику(Объект.Дата); 
		СозданиеПоСотруднику = Истина;
		Если ЗначениеЗаполнено(мМодель) Тогда
			Ответ = Вопрос("Для данного сотрудника уже существует модель.
			|Перезаписать?", РежимДиалогаВопрос.ДаНет, , , "");
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СозданиепоСотруднику = Ложь;
		Выборка = ПолучитьСуществующуюМодельПоДолжностиИКвалификации(Объект.Дата); 
		
		Если Выборка <> Неопределено Тогда
			Ответ = Вопрос("Для данной связки должности и квалификации уже существует модель.
			|Перезаписать?", РежимДиалогаВопрос.ДаНет, , , "");
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			мМодель = Выборка;
		Иначе
			мМодель = Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мМодель) Тогда
		НаименованиеМодели = Строка(мМодель);
	Иначе 
		ВвестиСтроку(НаименованиеМодели, "Введите название модели");
	КонецЕсли;
	
	
	СозданиеМоделиНаСервере(мМодель, НаименованиеМодели, СозданиеПоСотруднику);	
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСуществующуюМодельПоДолжностиИКвалификации(ДатаФормирования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	KPI_МоделиПланирования.Ссылка
	|ИЗ
	|	Справочник.KPI_МоделиПланирования КАК KPI_МоделиПланирования
	|ГДЕ
	|	KPI_МоделиПланирования.Квалификация = &Квалификация
	|	И KPI_МоделиПланирования.Должность = &Должность";
	
	Запрос.УстановитьПараметр("Должность", Объект.СтруктураКомпании.Должность);
	Запрос.УстановитьПараметр("Квалификация", KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(Объект.СтруктураКомпании, ДатаФормирования).Квалификация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); 
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе	
		Возврат Выборка.Ссылка;
	КонецЕсли;	
	
КонецФункции


&НаСервере
Функция ПолучитьСуществующуюМодельПоСотруднику(ДатаФормирования)
	
	Возврат Справочники.KPI_МоделиПланирования.НайтиПоРеквизиту("Сотрудник", KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(Объект.СтруктураКомпании, ДатаФормирования));
	
КонецФункции


&НаСервере
Процедура СозданиеМоделиНаСервере(Модель, Имя, СозданиеПоСотруднику)
	
	Если Модель <> Неопределено и ЗначениеЗаполнено(Модель) Тогда
		МодельОбъект = Модель.ПолучитьОбъект();
	Иначе
		МодельОбъект = Справочники.KPI_МоделиПланирования.СоздатьЭлемент();
	КонецЕсли;
	
	ОбъектПланирование = РеквизитФормыВЗначение("Объект");									   
	МодельОбъект.Наименование = Имя;  
	МодельОбъект.ДанныеМодели.Очистить();
	МодельОбъект.Стандарты.Очистить();
	
	Для каждого стр Из ОбъектПланирование.Планы Цикл
		НовСтрока = МодельОбъект.ДанныеМодели.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, стр);
	КонецЦикла;	
	
	Для каждого стр Из ОбъектПланирование.Стандарты Цикл
		НовСтрока = МодельОбъект.Стандарты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, стр);
	КонецЦикла;
	
	Сотрудник = KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(Объект.СтруктураКомпании, Объект.Дата);
	
	Если СозданиеПоСотруднику Тогда
		МодельОбъект.Сотрудник = Сотрудник;
	Иначе
		МодельОбъект.Должность = Объект.СтруктураКомпании.Должность;
		МодельОбъект.Квалификация = Сотрудник.Квалификация;
	КонецЕсли;	
	
	МодельОбъект.ИспользоватьПривязкуМоделиКСотруднику = СозданиеПоСотруднику;
	МодельОбъект.Записать();
	
	Объект.Модель = МодельОбъект.Ссылка;
	
КонецПроцедуры	


&НаКлиенте
Процедура ЗагрузитьИзМодели(Команда)
	Если Не ЗначениеЗаполнено(Объект.Модель) Тогда
		Сообщить("Не выбрана модель для загрузки");
		Возврат;
	КонецЕсли;
	
	
	Если Объект.Планы.Количество() > 0 Или Объект.Стандарты.Количество() > 0 Или Объект.СтандартыОтветственные.Количество() > 0 Тогда
		
		Если Вопрос("Табличные части целевых показателей, стандартов и ответственных будут очищены.
			|Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Вопрос("Добавить в ответственные по каждому стандарту вышестоящий объект управления?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		РодительОтветственный = Истина;
	Иначе 
		РодительОтветственный = Ложь;
	КонецЕсли;
	
	
	ЗагрузитьИзМоделиНаСервере(РодительОтветственный);
	ВидимостьВкладкиСтандартов();
	Элементы.Стандарты.Обновить();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьИзМоделиНаСервере(РодительОтветственный)
	
	Объект.Планы.Очистить();
	Объект.СтандартыОтветственные.Очистить();
	Объект.Стандарты.Очистить();
	
	Для Каждого стр Из Объект.Модель.ДанныеМодели Цикл
		НовСтрока = Объект.Планы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, стр);
	КонецЦикла;	
	
	Для Каждого стр Из Объект.Модель.Стандарты Цикл
		НовСтрока = Объект.Стандарты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, стр);
		ДобавитьСамооценку(стр.Стандарт);
		Если РодительОтветственный Тогда
			ДобавитьОценкуОценивающего(стр.Стандарт, стр.Вес);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	


&НаКлиенте
Процедура ВидимостьВкладкиСтандартов()
	
	Элементы.Группа6.Видимость = ВидимостьВкладкиСтандарты();
	Если Не ВидимостьВкладкиСтандарты() Тогда
		Объект.Стандарты.Очистить();
		Объект.СтандартыОтветственные.Очистить();
	КонецЕсли;
	
КонецПроцедуры	


&НаСервере
Функция ВидимостьВкладкиСтандарты()
	
	ТЧ = РеквизитФормыВЗначение("Объект").Планы;
	Если ТЧ.Найти(Справочники.KPI_ЦелевыеПоказатели.Стандарт, "ЦелевойПоказатель") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции	


&НаКлиенте
Процедура ПланыПриИзменении(Элемент)
	
	ВидимостьВкладкиСтандартов();
	
КонецПроцедуры


&НаКлиенте
Процедура Подписан(Команда)
	
	ПодписанНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура ПодписанНаСервере()
	
	Объект.Подписан              = Не Объект.Подписан;
	Элементы.Подписан.Заголовок  = ?(Объект.Подписан, "Отменить утверждение", "Утвердить");
	Элементы.Подписан.ЦветТекста = ?(Не Объект.Подписан, WebЦвета.Синий, WebЦвета.ЛососьТемный);
	ЭтаФорма.Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьОтветственногоПоСтандарту(Команда)
	Если Элементы.Стандарты.ТекущиеДанные <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Элементы.Стандарты.ТекущиеДанные.Стандарт) Тогда
			Сообщить("Не указан стандарт в списке стандартов");
			Возврат;
		КонецЕсли;
		
		
		//Проверим наличие оценок для текущего стандарта
		ТекущийСтандарт = Элементы.СтандартыОтветственные.ТекущиеДанные.Стандарт;
		
		Если ПроверкаНаличияОценокДляСтандарта(ТекущийСтандарт) Тогда
			Если Вопрос("Для стандарта """ + ТекущийСтандарт + """ уже введены оценки.
				|При добавлении ответственного по данному стандарту эти оценки будут удалены.
				|Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Добавление ответственного по стандарту") = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе 
				УдалитьОценкиДляСтандарта(ТекущийСтандарт);
			КонецЕсли;
		КонецЕсли;
		
		
		НовСтр = Объект.СтандартыОтветственные.Добавить();
		НовСтр.Стандарт = Элементы.Стандарты.ТекущиеДанные.Стандарт;
		НовСтр.ДатаОценки = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Объект.Дата, Объект.ПериодичностьПланирования).КонецПериода;
		
		ОбновитьСтрокиОтветственных(Элементы.Стандарты.ТекущиеДанные.Стандарт);
		
		Элементы.СтандартыОтветственные.ТекущаяСтрока = мКолвоСтрокОтветственных;
		Элементы.СтандартыОтветственные.ИзменитьСтроку();
		
		мКолвоСтрокОтветственных = мКолвоСтрокОтветственных + 1;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПолучитьОценкиДляСтандарта(Стандарт)
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Объект.Дата, Объект.ПериодичностьПланирования);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_Факты.КлючАналитики.Аналитика1 КАК Стандарт,
	|	KPI_Факты.Факт,
	|	KPI_Факты.Регистратор
	|ИЗ
	|	РегистрНакопления.KPI_Факты КАК KPI_Факты
	|ГДЕ
	|	KPI_Факты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И KPI_Факты.Регистратор ССЫЛКА Документ.KPI_ВводОценокСтандартов
	|	И KPI_Факты.ЦелевойПоказатель = ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.Стандарт)
	|	И KPI_Факты.КлючАналитики.Аналитика2 = &ПериодичностьПланирования
	|	И KPI_Факты.КлючАналитики.Аналитика1 = &Стандарт";
	
	Запрос.УстановитьПараметр("НачалоПериода"            , ГраницыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"             , ГраницыПериода.КонецПериода);
	Запрос.УстановитьПараметр("Стандарт"                 , Стандарт);
	Запрос.УстановитьПараметр("ПериодичностьПланирования", Объект.ПериодичностьПланирования);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции


&НаСервере
Функция ПроверкаНаличияОценокДляСтандарта(Стандарт)
	Если ПолучитьОценкиДляСтандарта(Стандарт).Количество() > 0 Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции


&НаСервере
Процедура УдалитьОценкиДляСтандарта(Стандарт)
	Регистраторы = ПолучитьОценкиДляСтандарта(Стандарт).ВыгрузитьКолонку("Регистратор");
	
	Для Каждого Рег Из Регистраторы Цикл
		ДокОбъект = Рег.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСтрокиОтветственных(Стандарт)
	Если Элементы.Стандарты.ТекущиеДанные <> Неопределено Тогда 
		ПараметрыОтбора = Новый Структура("Стандарт", Стандарт);
		Элементы.СтандартыОтветственные.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);	
		
		Элементы.СтандартыОтветственные.Обновить();
		Элементы.Стандарты.Обновить();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УдалитьСтандарт(Команда)
	Если Элементы.Стандарты.ТекущиеДанные <> Неопределено Тогда 
		УдалитьСтандартИОтветственных(Элементы.Стандарты.ТекущиеДанные.Стандарт);
		Элементы.СтандартыОтветственные.Обновить();
		Элементы.Стандарты.Обновить();
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура УдалитьСтандартИОтветственных(Стандарт)
	НачатьТранзакцию();
	
	//удалим стандарт
	ст = 0;
	Пока ст < Объект.Стандарты.Количество() Цикл
		Если Объект.Стандарты.Получить(ст).Стандарт = Стандарт Тогда
			Объект.Стандарты.Удалить(ст);
		Иначе 
			ст = ст + 1;	
		КонецЕсли;
	КонецЦикла;
	
	//удалим ответственных
	отв = 0;
	Пока отв < Объект.СтандартыОтветственные.Количество() Цикл
		Если Объект.СтандартыОтветственные.Получить(отв).Стандарт = Стандарт Тогда
			Объект.СтандартыОтветственные.Удалить(отв);
		Иначе 
			отв = отв + 1;	
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры


&НаКлиенте
Процедура СтандартыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ОбновитьСтрокиОтветственных(Элемент.ТекущиеДанные.Стандарт);
	КонецЕсли;
	
	ПересчитатьСуммуВесовПоОтветственным();
	
	//ДоступностьРучнойОперации();	
КонецПроцедуры


&НаКлиенте
Процедура СтандартыПередУдалением(Элемент, Отказ)
	
	Структура = Новый Структура("Стандарт", Элемент.ТекущиеДанные.Стандарт);
	МассивСтрок = Объект.СтандартыОтветственные.НайтиСтроки(Структура);
	Для каждого Строка Из МассивСтрок Цикл
		Объект.СтандартыОтветственные.Удалить(Строка);
	КонецЦикла;	
	
КонецПроцедуры


&НаКлиенте
Процедура ОтветственныйПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбъектУправления = KPI_ОбщегоНазначения.ОбработкаВыбораПолучитьСтруктуруКомпанииНаДату(Объект.Дата, ЭтаФорма, СтандартнаяОбработка, , ТекущийЭлемент.ТекущиеДанные.Ответственный);
	
	Если Не ОбъектУправления = Неопределено Тогда
		ТекущийЭлемент.ТекущиеДанные.Ответственный = ОбъектУправления.СтруктураКомпании;
		ТекущийЭлемент.ТекущиеДанные.ОтветственныйПредставление = ОбъектУправления.СтруктураКомпанииПредставление;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтветственныйПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	ТекущийЭлемент.ТекущиеДанные.Ответственный = ПредопределенноеЗначение("Справочник.KPI_СтруктураКомпании.ПустаяСсылка");
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Приведем дату к началу периода
	ТекущийОбъект.Дата = KPI_ОбщегоНазначенияСервер.ГраницыПериода(ТекущийОбъект.Дата, ТекущийОбъект.ПериодичностьПланирования).НачалоПериода;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ТипРасчетаЗначенияПланаЦелевогоПоказателя(ЦП)
	Возврат ЦП.ТипРасчетаЗначенияПлана;
КонецФункции


&НаКлиенте
Процедура ПланыПланОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипРасчетаЗначенияПланаЦелевогоПоказателя(Элементы.Планы.ТекущиеДанные.ЦелевойПоказатель) = ПредопределенноеЗначение("Перечисление.KPI_ТипыРасчетаПлана.ПоФормуле") Тогда 
		//СтандартнаяОбработка = Ложь;
		Сообщить("Для целевого показателя """ + Элементы.Планы.ТекущиеДанные.ЦелевойПоказатель + """ значение плана расчитывается по формуле");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	
	Если Элементы.Планы.ТекущиеДанные.ЦелевойПоказатель = ПредопределенноеЗначение("Справочник.KPI_ЦелевыеПоказатели.СмартЗадача") И Объект.ВидСмартЗадач = ПредопределенноеЗначение("Перечисление.KPI_ВидыРасчетаСмартЗадач.Абсолютный") Тогда
		Сообщить("Для абсолютных смарт-задач значение плана рассчитывается на основании документов смарт-задач");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПланыПланНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипРасчетаЗначенияПланаЦелевогоПоказателя(Элементы.Планы.ТекущиеДанные.ЦелевойПоказатель) = ПредопределенноеЗначение("Перечисление.KPI_ТипыРасчетаПлана.ПоФормуле") Тогда 
		СтандартнаяОбработка = Ложь;
		Сообщить("Для целевого показателя """ + Элементы.Планы.ТекущиеДанные.ЦелевойПоказатель + """ значение плана расчитывается по формуле");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПланыНазваниеФильтраАналитикОчистка(Элемент, СтандартнаяОбработка)
	Элементы.Планы.ТекущиеДанные.КлючАналитики = Неопределено;
КонецПроцедуры


&НаКлиенте
Процедура ПланыНазваниеФильтраАналитикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	//Запрещаем изменение названия аналитик для СмартЗадачи и Стандарта
	Если ТекущийЭлемент.ТекущиеДанные.ЦелевойПоказатель = ПредопределенноеЗначение("Справочник.KPI_ЦелевыеПоказатели.СмартЗадача")
		ИЛИ ТекущийЭлемент.ТекущиеДанные.ЦелевойПоказатель = ПредопределенноеЗначение("Справочник.KPI_ЦелевыеПоказатели.Стандарт") Тогда 
		Сообщить("Для целевого показателя """ + ТекущийЭлемент.ТекущиеДанные.ЦелевойПоказатель + """ нельзя устанавливать аналитики");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПланыНазваниеФильтраАналитикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные = Элементы.Планы.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтандартыОтветственныеВесПриИзменении(Элемент)
	ИзменениеСамооценки();
	
	ПересчитатьСуммуВесовПоОтветственным();
КонецПроцедуры


&НаКлиенте
Процедура ПересчитатьСуммуВесовПоОтветственным()
	СуммаВесов = 0;
	
	Для каждого Стр Из Объект.СтандартыОтветственные Цикл
		Если Стр.Стандарт = Элементы.Стандарты.ТекущиеДанные.Стандарт Тогда
			СуммаВесов = СуммаВесов + Стр.Вес;
		КонецЕсли;
	КонецЦикла;
	
	СуммаВесовПоОтветственным = СуммаВесов;
КонецПроцедуры


&НаКлиенте
Процедура ИзменениеСамооценки()
	ТекущиеДанные = Элементы.СтандартыОтветственные.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Ответственный = Объект.СтруктураКомпании Тогда
			Если ТекущиеДанные.Вес <> 0 Тогда
				KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Вес оценки для самооценки может быть равен только 0");
			КонецЕсли;
			ТекущиеДанные.Вес = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере 
Процедура ДобавитьСамооценку(Стандарт)
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Объект.Дата, Объект.ПериодичностьПланирования);
	КонецПериода   = ГраницыПериода.КонецПериода;
	
	СтрокаСамооценки               = Объект.СтандартыОтветственные.Добавить();
	СтрокаСамооценки.Стандарт      = Стандарт;
	СтрокаСамооценки.Ответственный = Объект.СтруктураКомпании;
	СтрокаСамооценки.ОтветственныйПредставление = KPI_ОбщегоНазначенияСервер.ПолучитьПредставлениеПоСтруктуреКомпанииНаДату(Объект.СтруктураКомпании, Объект.Дата);
	СтрокаСамооценки.ДатаОценки    = КонецПериода;
	СтрокаСамооценки.Комментарий   = "Самооценка";
КонецПроцедуры


&НаСервере 
Процедура ДобавитьОценкуОценивающего(Стандарт, ВесСтандарта)
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Объект.Дата, Объект.ПериодичностьПланирования);
	КонецПериода   = ГраницыПериода.КонецПериода;
	
	СтрокаСамооценки               = Объект.СтандартыОтветственные.Добавить();
	СтрокаСамооценки.Стандарт      = Стандарт;
	СтрокаСамооценки.Ответственный = Объект.СтруктураКомпании.Родитель;//ПараметрыСеанса.KPI_ТекущийСотрудник.СтруктураКомпании;
	СтрокаСамооценки.ОтветственныйПредставление = KPI_ОбщегоНазначенияСервер.ПолучитьПредставлениеПоСтруктуреКомпанииНаДату(Объект.СтруктураКомпании.Родитель, Объект.Дата);
	СтрокаСамооценки.ДатаОценки    = КонецПериода;
	СтрокаСамооценки.Вес           = 100;
	СтрокаСамооценки.ВесСтандарта  = ВесСтандарта;
КонецПроцедуры


&НаКлиенте
Процедура СтандартыОтветственныеПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.СтандартыОтветственные.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Ответственный = Объект.СтруктураКомпании Тогда
			KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Строка не удалена. Самооценка по каждому из стандартов обязательна.");
			Отказ = Истина;
		КонецЕсли;
		
		
		//Проверим наличие оценок для текущего стандарта
		ТекущийСтандарт = ТекущиеДанные.Стандарт;
		
		Если ПроверкаНаличияОценокДляСтандарта(ТекущийСтандарт) Тогда
			Если Вопрос("Для стандарта """ + ТекущийСтандарт + """ уже введены оценки.
				|При удалении ответственного по данному стандарту эти оценки будут удалены.
				|Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Удаление ответственного по стандарту") = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе 
				УдалитьОценкиДляСтандарта(ТекущийСтандарт);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПланыПланПриИзменении(Элемент)
	Элементы.Планы.ТекущиеДанные.ВерхняяГраница = Элементы.Планы.ТекущиеДанные.План;
	Элементы.Планы.ТекущиеДанные.НижняяГраница = Элементы.Планы.ТекущиеДанные.План;
КонецПроцедуры


&НаКлиенте
Процедура ПланыНижняяГраницаПриИзменении(Элемент)
	Если Элементы.Планы.ТекущиеДанные.НижняяГраница > Элементы.Планы.ТекущиеДанные.ВерхняяГраница Тогда
		Сообщить("Нижняя граница не может быть больше верхней границы");
		Элементы.Планы.ТекущиеДанные.НижняяГраница = Элементы.Планы.ТекущиеДанные.План;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПланыВерхняяГраницаПриИзменении(Элемент)
	Если Элементы.Планы.ТекущиеДанные.ВерхняяГраница < Элементы.Планы.ТекущиеДанные.НижняяГраница Тогда
		Сообщить("Верхняя граница не может быть меньше нижней границы");
		Элементы.Планы.ТекущиеДанные.ВерхняяГраница = Элементы.Планы.ТекущиеДанные.План;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтандартыОтветственныеОтветственныйПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбъектУправления = KPI_ОбщегоНазначения.ОбработкаВыбораПолучитьСтруктуруКомпанииНаДату(Объект.Дата, Элемент, СтандартнаяОбработка, , ТекущийЭлемент.ТекущиеДанные.Ответственный);
	
	Если Не ОбъектУправления = Неопределено Тогда
		ТекущийЭлемент.ТекущиеДанные.Ответственный = ОбъектУправления.СтруктураКомпании;
		ТекущийЭлемент.ТекущиеДанные.ОтветственныйПредставление = ОбъектУправления.СтруктураКомпанииПредставление;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтандартыОтветственныеОтветственныйПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	ТекущийЭлемент.ТекущиеДанные.Ответственный = ПредопределенноеЗначение("Справочник.KPI_СтруктураКомпании.ПустаяСсылка");
КонецПроцедуры


&НаКлиенте
Процедура СтандартыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	КритерийПоиска = Новый Структура("Стандарт", ПредопределенноеЗначение("Справочник.KPI_Стандарты.ПустаяСсылка"));
	СтрокиСтандартов = Объект.Стандарты.НайтиСтроки(КритерийПоиска);
	
	Если СтрокиСтандартов.Количество() > 0 Тогда
		Сообщить("Перед добавлением новой строки выберите стандарт в незаполненной строке");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтандартыСтандартОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стандарты.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Стандарт = ВыбранноеЗначение Тогда
		КритерийПоиска = Новый Структура("Стандарт", ВыбранноеЗначение);
		СтрокиСтандартов = Объект.Стандарты.НайтиСтроки(КритерийПоиска);
		
		Если СтрокиСтандартов.Количество() > 0 Тогда
			Сообщить("Стандарт """ + ВыбранноеЗначение + """ уже присутствует в списке стандартов");
			Возврат;
		КонецЕсли;
		
		
		КритерийПоиска = Новый Структура("Стандарт", ТекущиеДанные.Стандарт);
		СтрокиОтветственных = Объект.СтандартыОтветственные.НайтиСтроки(КритерийПоиска);
		Для каждого Стр Из СтрокиОтветственных Цикл
			Объект.СтандартыОтветственные.Удалить(Стр);
			мКолвоСтрокОтветственных = мКолвоСтрокОтветственных - 1;
		КонецЦикла;
		
		ТекущиеДанные.Стандарт = ВыбранноеЗначение;
		
		ДобавитьСамооценку(ВыбранноеЗначение);
		мКолвоСтрокОтветственных = мКолвоСтрокОтветственных + 1;
		
		СтандартыПриАктивизацииСтроки(Элементы.Стандарты);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтандартыОтветственныеОтветственныйПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СтандартыОтветственные.ТекущиеДанные;
	СтарыйОтветственный = ТекущиеДанные.Ответственный;
	СтарыйОтветственныйПредставление = ТекущиеДанные.ОтветственныйПредставление;
	
	Если Не СтарыйОтветственный = ВыбранноеЗначение.СтруктураКомпании Тогда
		КритерийПоиска = Новый Структура("Стандарт, Ответственный", ТекущиеДанные.Стандарт, ВыбранноеЗначение.СтруктураКомпании);
		СтрокиОтветственных = Объект.СтандартыОтветственные.НайтиСтроки(КритерийПоиска);
		
		Если СтрокиОтветственных.Количество() > 0 Тогда
			Сообщить("Ответственный """ + ВыбранноеЗначение.СтруктураКомпании + """ уже присутствует в списке ответственных");
			ВыбранноеЗначение.СтруктураКомпании = СтарыйОтветственный;
			ВыбранноеЗначение.СтруктураКомпанииПредставление = СтарыйОтветственныйПредставление;
			Возврат;
		КонецЕсли;
		
		ИзменениеСамооценки();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаполнитьПредставлениеОбъектаУправления();
	ЗаполнитьПредставлениеОтветственныхВПланах();
	ЗаполнитьПредставлениеОтветственныхПоСтандартам();
	
	Оповестить("ДокПланированиеЗаписан", Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ВидСмартЗадачНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Для каждого Стр Из Объект.Планы Цикл
		Если Стр.ЦелевойПоказатель = ПредопределенноеЗначение("Справочник.KPI_ЦелевыеПоказатели.СмартЗадача") Тогда
			Сообщить("Для изменения вида расчета смарт-задач необходимо удалить строку со смарт-задачей из табличного поля планов");
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СтандартыОтветственныеПриАктивизацииСтроки(Элемент)
	ПересчитатьСуммуВесовПоОтветственным();
КонецПроцедуры


&НаКлиенте
Процедура ПланыПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.ЦелевойПоказатель = ПредопределенноеЗначение("Справочник.KPI_ЦелевыеПоказатели.Стандарт")
		И Объект.Стандарты.Количество() > 0 Тогда
		Если Вопрос("Таблицы на вкладке Стандарты будут очищены", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Подтвердите действие") = 
			КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры









