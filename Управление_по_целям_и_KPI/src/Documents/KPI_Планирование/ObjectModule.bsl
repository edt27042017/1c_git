
Процедура ОбработкаПроведения(Отказ, Режим)
	
	//Проверка на уже введенные планы для сотрудника в этом периоде
	ПроверитьНаличиеПлановВЭтомПериоде(Отказ);
	
	//Проверка на задвоенность строк для пар [ЦелевойПоказатель<=>Аналитика]
	ПроверитьДублированныеСтроки(Отказ);
	
	
	//Проверка на соответствие веса 100 %
	Если Планы.Итог("Вес") <> 100 Тогда
		Сообщить("Общий вес целевых показателей должен быть 100%");
		Отказ = Истина;
	КонецЕсли;
	
	Если Планы.Найти(Справочники.KPI_ЦелевыеПоказатели.Стандарт, "ЦелевойПоказатель") <> Неопределено Тогда
		ПроверитьВесаСтандартыОтветственные(Отказ);
		ПроверитьВесаСтандарты(Отказ);
	КонецЕсли;
	
	
	//Проверка значения плана смарт-задачи
	ПроверитьПланСмартЗадачи(Отказ);
	
	
	//Проверка даты стандарта на принадлежность текущему периоду
	ПроверитьДатыОценокСтандартов(Отказ);
	
	
	
	Если Отказ Тогда 
		Возврат;  
	КонецЕсли;
	
	
	
	//Делаем движения в РН Планы
	
	Движения.KPI_Планы.Записывать = Истина;
	Для Каждого ТекСтрокаПланы Из Планы Цикл
		Движение = Движения.KPI_Планы.Добавить();
		
		Движение.Период                    = Дата;
		Движение.СтруктураКомпании         = СтруктураКомпании;
		Движение.ЦелевойПоказатель         = ТекСтрокаПланы.ЦелевойПоказатель;
		Движение.ПериодичностьПланирования = ПериодичностьПланирования;
		Движение.КлючАналитики             = ТекСтрокаПланы.КлючАналитики;
		Движение.План                      = ТекСтрокаПланы.План;
		Движение.Вес                       = ТекСтрокаПланы.Вес;
		Движение.НижняяГраница             = ТекСтрокаПланы.НижняяГраница;
		Движение.ВерхняяГраница            = ТекСтрокаПланы.ВерхняяГраница;
		Движение.ВидРасчетаСмартЗадач      = ВидСмартЗадач;
		Движение.НазваниеФильтраАналитик   = ТекСтрокаПланы.НазваниеФильтраАналитик;
		Движение.Ответственный             = ТекСтрокаПланы.Ответственный;
	КонецЦикла;
	
	
	//Очищаем набор записей по текущему документу по РС Стандарты
	Набор = РегистрыСведений.KPI_Стандарты.СоздатьНаборЗаписей();
	Набор.Отбор.Основание.Установить(Ссылка);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
	//Создаем записи в РС Стандарты
	Для каждого стр Из СтандартыОтветственные Цикл
		Запись = РегистрыСведений.KPI_Стандарты.СоздатьМенеджерЗаписи();
		Запись.Основание                 = Ссылка;
		Запись.Период                    = ?(стр.ДатаОценки = Дата(1, 1, 1), Дата, стр.ДатаОценки);
		Запись.ДатаОценки                = ?(стр.ДатаОценки = Дата(1, 1, 1), Дата, стр.ДатаОценки);
		Запись.Стандарт                  = стр.Стандарт;
		Запись.Ответственный             = стр.Ответственный;
		Запись.Оцениваемый               = СтруктураКомпании;
		
		СтрокаСтандарата = Стандарты.Найти(Стр.Стандарт, "Стандарт");
		
		Запись.ВесСтандарта              = СтрокаСтандарата.Вес;
		Запись.ВесОтветственного         = стр.Вес;
		Запись.ПериодичностьПланирования = ПериодичностьПланирования;
		Запись.Записать();
	КонецЦикла;
	
	//Перепроводим все документы KPI_ВводОценокСтандартов, которые связаны с этим документом
	ПерепровестиВсеСвязанныеОценки();
	
КонецПроцедуры

Процедура ПерепровестиВсеСвязанныеОценки()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИзФактов.Регистратор
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	(ВЫБРАТЬ
	|		KPI_Стандарты.Стандарт КАК Стандарт,
	|		KPI_Стандарты.ДатаОценки КАК ДатаОценки,
	|		KPI_Стандарты.Ответственный КАК Ответственный
	|	ИЗ
	|		РегистрСведений.KPI_Стандарты КАК KPI_Стандарты
	|	ГДЕ
	|		KPI_Стандарты.ДатаОценки МЕЖДУ &ДатНач И &ДатКон
	|		И KPI_Стандарты.Основание ССЫЛКА Документ.KPI_Планирование
	|		И KPI_Стандарты.Ответственный = &Ответственный) КАК ИзПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			KPI_Факты.КлючАналитики.Аналитика1 КАК Стандарт,
	|			KPI_Факты.КлючАналитики.Аналитика2 КАК ДатаОценки,
	|			KPI_Факты.КлючАналитики.Аналитика3 КАК Ответственный,
	|			KPI_Факты.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрНакопления.KPI_Факты КАК KPI_Факты
	|		ГДЕ
	|			KPI_Факты.Период МЕЖДУ &ДатНач И &ДатКон
	|			И KPI_Факты.Регистратор ССЫЛКА Документ.KPI_ВводОценокСтандартов
	|			И KPI_Факты.ЦелевойПоказатель = ЗНАЧЕНИЕ(Справочник.KPI_ЦелевыеПоказатели.Стандарт)
	|			И KPI_Факты.КлючАналитики.Аналитика3 = &Ответственный) КАК ИзФактов
	|		ПО ИзПланирования.Стандарт = ИзФактов.Стандарт
	|			И ИзПланирования.ДатаОценки = ИзФактов.ДатаОценки
	|			И ИзПланирования.Ответственный = ИзФактов.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Регистратор.Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Регистратор ЕСТЬ НЕ NULL ";
	
	ГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Дата, ПериодичностьПланирования);
	
	Запрос.УстановитьПараметр("ДатНач"       , ГраницыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ДатКон"       , ГраницыПериода.КонецПериода);
	Запрос.УстановитьПараметр("Ответственный", АвторДокумента);
	
	Результат = Запрос.Выполнить();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ = Результат.Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Док = Стр.РегистраторСсылка.ПолучитьОбъект();
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьВесаСтандарты(Отказ)
	
	Если Стандарты.Количество() = 0 Тогда
		Сообщить("Не введено ни одного стандарта на закладке ""Стандарты""!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Стандарты.Итог("Вес") <> 100 Тогда
		Сообщить("Общий вес стандартов должен быть 100%");
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

//Функция проверки общего веса оценок ответсвенных по стандарту
//Параметры:
// Отказ - тип булево
//Возвращаемое значение:
// Нет
Процедура ПроверитьВесаСтандартыОтветственные(Отказ)  Экспорт
	
	//нужно уточнить необходимость этого блока
	//ТЗ = СтандартыОтветственные.Выгрузить( , "ДатаОценки, Стандарт, Ответственный, Вес");
	//ТЗ.Свернуть("ДатаОценки, Стандарт","Вес");
	//Для каждого строка Из ТЗ Цикл
	//	Если строка.ДатаОценки <> Дата(1, 1, 1) Тогда
	//		Если Строка.Вес <> 100 Тогда
	//			Сообщить("За период " + строка.ДатаОценки + " по стандарту " + строка.Стандарт +" общий вес по ответственным не равен 100%");
	//			Отказ = Истина;
	//		КонецЕсли;
	//	Иначе 
	//		Если Строка.Вес <> 100 Тогда 
	//			Сообщить("По стандарту """ + строка.Стандарт + """ общий вес по ответственным не равен 100%");
	//			Отказ = Истина;
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЦикла;	
	
	ТЗ = СтандартыОтветственные.Выгрузить( , "Стандарт, Вес");
	ТЗ.Свернуть("Стандарт", "Вес");
	Для каждого Стр Из ТЗ Цикл
		Если Стр.Вес <> 100 Тогда
			Сообщить("Сумма весов ответственных по стандарту """ + Стр.Стандарт + """ должна быть 100%");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	 	
    КритерийПоискаСамооценки = Новый Структура("Ответственный, Стандарт", СтруктураКомпании);
	//Проверим, что введен ответственный самооценки
	Для Каждого Стр из Стандарты Цикл
		 КритерийПоискаСамооценки.Стандарт = Стр.Стандарт;
		 СтрокиСамооценки = СтандартыОтветственные.НайтиСтроки(КритерийПоискаСамооценки);
		 Если НЕ ЗначениеЗаполнено(СтрокиСамооценки) Тогда
			 Отказ = Истина;
			 KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Не введена самоценка по стандарту " +Стр.Стандарт);
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого мСтандарт Из Стандарты Цикл
		
		Структура = Новый Структура("Стандарт", мСтандарт.Стандарт);
		Массив = СтандартыОтветственные.НайтиСтроки(Структура);
		Вес = 0;
		
		Для каждого стр Из Массив Цикл
			Вес = стр.Вес + Вес;
		КонецЦикла;
		
		Если Вес = 0 Тогда
			Сообщить("По стандарту """ +  мСтандарт.Стандарт + """ не введено ни одного ответственного !");
			Отказ = Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьПланСмартЗадачи(Отказ)
	НайденнаяСтрока = Планы.Найти(Справочники.KPI_ЦелевыеПоказатели.СмартЗадача, "ЦелевойПоказатель"); 
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ВидСмартЗадач = Перечисления.KPI_ВидыРасчетаСмартЗадач.Относительный И НайденнаяСтрока.План <> 0 Тогда
			Сообщить("Для относительных смарт-задач значение плана должно равняться 0");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

Процедура ПроверитьДатыОценокСтандартов(Отказ)
	СтруктураГраницДаты = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Дата, ПериодичностьПланирования);
	
	Для каждого Стр Из СтандартыОтветственные Цикл
		Если Стр.ДатаОценки < СтруктураГраницДаты.НачалоПериода Или Стр.ДатаОценки > СтруктураГраницДаты.КонецПериода Тогда 
			Сообщить("Дата оценки стандарта """ + Стр.Стандарт + """ не входит в диапазон данного периода");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьНаличиеПлановВЭтомПериоде(Отказ)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	KPI_Планирование.Дата,
	|	KPI_Планирование.Номер
	|ИЗ
	|	Документ.KPI_Планирование КАК KPI_Планирование
	|ГДЕ
	|	KPI_Планирование.Проведен = ИСТИНА
	|	И KPI_Планирование.СтруктураКомпании = &СтруктураКомпании
	|	И KPI_Планирование.ПериодичностьПланирования = &ПериодичностьПланирования
	|	И KPI_Планирование.Дата >= &ДатНач
	|	И KPI_Планирование.Дата <= &ДатКон
	|	И KPI_Планирование.Ссылка <> &Ссылка";
	
	СтруктураГраницыПериода = KPI_ОбщегоНазначенияСервер.ГраницыПериода(Дата, ПериодичностьПланирования);
	
	Запрос.УстановитьПараметр("Ссылка"                   , Ссылка);
	Запрос.УстановитьПараметр("СтруктураКомпании"        , СтруктураКомпании);
	Запрос.УстановитьПараметр("ПериодичностьПланирования", ПериодичностьПланирования);
	Запрос.УстановитьПараметр("ДатНач"                   , СтруктураГраницыПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ДатКон"                   , СтруктураГраницыПериода.КонецПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Сообщить("Для структуры " + СтруктураКомпании + " уже введены планы за период с " 	
		+ Формат(СтруктураГраницыПериода.НачалоПериода, "ДЛФ=Д")  
		+ " по " + Формат(СтруктураГраницыПериода.КонецПериода, "ДЛФ=Д")
		+ " в документе №" + Выборка.Номер + " от " + Формат(Выборка.Дата, "ДЛФ=Д"));
		
		Отказ = Истина;
		Возврат;
	КонецЦикла;	
КонецПроцедуры

Процедура ПроверитьДублированныеСтроки(Отказ)
	Для н = 0 По Планы.Количество() - 2 Цикл
		Для к = н + 1 По Планы.Количество() - 1 Цикл
			Если Планы.Получить(н).ЦелевойПоказатель = Планы.Получить(к).ЦелевойПоказатель
				И Планы.Получить(н).НазваниеФильтраАналитик = Планы.Получить(к).НазваниеФильтраАналитик Тогда
				//не найдено ни одного документа с планами для сотрудника за заданный период
				Сообщить("В документе имеются задвоенные строки с целевым показателем """ + Планы.Получить(н).ЦелевойПоказатель
				+ """" + ?(ПустаяСтрока(Планы.Получить(н).НазваниеФильтраАналитик), "", " и с аналитикой " + Планы.Получить(н).НазваниеФильтраАналитик));
				
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	АвторДокумента = ПараметрыСеанса.KPI_ТекущийСотрудник;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("ОбъектУправления") Тогда
			СтруктураКомпании = ДанныеЗаполнения.ОбъектУправления;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Период")
			И ДанныеЗаполнения.Свойство("ПериодичностьПланирования") Тогда
			ДатаФормирования    = ДанныеЗаполнения.Период;
			ПериодичностьПланирования = ДанныеЗаполнения.ПериодичностьПланирования;
			ГраницыПериода      = KPI_ИнтерфейсВызовСервера.ГраницыПериода(ДатаФормирования, ПериодичностьПланирования);
				
			Если ДанныеЗаполнения.Свойство("ПереносПланов") Тогда
				ПредыдущиеПланы = Документы.KPI_Планирование.ПолучитьДокПланирование(ДатаФормирования, ПериодичностьПланирования, СтруктураКомпании);
				Если ЗначениеЗаполнено(ПредыдущиеПланы) Тогда
					НачалоПериодаПереноса   = ГраницыПериода.КонецПериода + 1;
					ГраницыПериодаПереноса  = KPI_ИнтерфейсВызовСервера.ГраницыПериода(НачалоПериодаПереноса, ПериодичностьПланирования);
					
					ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПредыдущиеПланы);
					ЭтотОбъект.Подписан = Ложь;
					ЭтотОбъект.Номер = "";
					Для Каждого Стр из  ПредыдущиеПланы.Планы Цикл
						нСтр = ЭтотОбъект.Планы.Добавить();
						ЗаполнитьЗначенияСвойств(нСтр,Стр);	
					КонецЦикла;	
					
					Для Каждого Стр из  ПредыдущиеПланы.Стандарты Цикл
						нСтр = ЭтотОбъект.Стандарты.Добавить();
						ЗаполнитьЗначенияСвойств(нСтр,Стр);	
					КонецЦикла;
					
					ПродолжительностьПериода = ГраницыПериодаПереноса.НачалоПериода - ГраницыПериода.НачалоПериода;
					
					Для Каждого Стр из  ПредыдущиеПланы.СтандартыОтветственные Цикл
						
						РазницаОтНачалаПериода = Стр.ДатаОценки - Дата;
						
						нСтр = ЭтотОбъект.СтандартыОтветственные.Добавить();
						ЗаполнитьЗначенияСвойств(нСтр,Стр);	

						Если Стр.ДатаОценки + ПродолжительностьПериода < ГраницыПериодаПереноса.КонецПериода Тогда
							нСтр.ДатаОценки = Стр.ДатаОценки + ПродолжительностьПериода; 
						Иначе 
							нСтр.ДатаОценки = ГраницыПериодаПереноса.КонецПериода;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;		
				Дата   = НачалоПериодаПереноса;	
			Иначе
				Дата = ГраницыПериода.НачалоПериода;
			КонецЕсли;
			
		КонецЕсли;	
		
		ДанныеЗаполнения.Свойство("ОбъектУправления", СтруктураКомпании);
		ДанныеЗаполнения.Свойство("СтруктураКомпанииПредставление", KPI_ОбщегоНазначенияСервер.ПолучитьПредставлениеПоСтруктуреКомпанииНаДату(СтруктураКомпании, Дата));
		
	КонецЕсли;
	
КонецПроцедуры

//Функция изменения статуса планов
//Параметры:
// нет
//Возвращаемое значение:
// Нет
Процедура ИзменитьСтатусПланов() Экспорт
	
	Подписан = Не Подписан;
	Записать();
	
КонецПроцедуры

