Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Ответственный = ПараметрыСеанса.KPI_ТекущийСотрудник.ФизическоеЛицо;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ОбработкаУдаленияПроведения(Отказ);
	
	УдалитьПроведение = Ложь;
	ПроверитьВозможностьПроведения(Отказ, УдалитьПроведение);
	
	//Вторым циклом мы исключаем создание элементов справочника KPI_Сотрудники при отмене проведения
	Если Не УдалитьПроведение Тогда
		
		НазначитьСотрудников(Движения);
		
	КонецЕсли;
	
	Если УдалитьПроведение Тогда
		ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьВозможностьПроведения(Отказ, УдалитьПроведение) 
	
	Для каждого Строка Из Сотрудники Цикл
		
		//Проверка на занятость должности сотрудником
		Сотрудник = KPI_ОбщегоНазначенияСервер.ПолучитьСотрудникаПоСтруктуреКомпанииНаДату(Строка.СтруктураКомпании, НачалоДня(Дата));
		Если ЗначениеЗаполнено(Сотрудник) Тогда      			
			Сообщить("Должность """ + Строка.СтруктураКомпании.Должность + """ уже занята другим сотрудником");
			УдалитьПроведение = Истина;
			Отказ = Истина;
		Иначе
			//Проверка на возможность проведения задним числом
			Если НачалоДня(Дата) >= НачалоДня(ТекущаяДата()) Или KPI_ОбщегоНазначенияСервер.ПроверкаНаВозможностьПроведенияЗаднимЧислом(Строка.СтруктураКомпании, НачалоДня(Дата)) Тогда
				УдалитьПроведение = Ложь;
			Иначе
				УдалитьПроведение = Истина;
				Сообщить("Проведение задним числом невозможно, т.к. существуют документы назначения на должность """ + Строка.СтруктураКомпании.Должность + """ на более позднюю дату (Строка №" + Строка.НомерСтроки + ")");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура НазначитьСотрудников(ДвиженияДокумента)
	
	ДвиженияДокумента.KPI_ГрафикиРаботыСотрудников.Записывать = Истина;
	ДвиженияДокумента.KPI_ГрафикиРаботыСотрудников.Записать();
	ДвиженияДокумента.KPI_ПлановыеНачисления.Записывать = Истина;
	ДвиженияДокумента.KPI_ПлановыеНачисления.Записать();
	
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	Попытка	
		
		//найдем пары структура/физ.лицо, которым не соответствуют существующие или работающие сотрудники
		//а затем создадим сотрудников на основе этих данных
		ТекстЗапроса = "ВЫБРАТЬ
		|	KPI_ПриказОНазначенииНаДолжностьСотрудники.СтруктураКомпании,
		|	KPI_ПриказОНазначенииНаДолжностьСотрудники.ФизЛицо,
		|	KPI_ПриказОНазначенииНаДолжностьСотрудники.Квалификация,
		|	KPI_Сотрудники.Ссылка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.KPI_ПриказОНазначенииНаДолжность.Сотрудники КАК KPI_ПриказОНазначенииНаДолжностьСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.KPI_Сотрудники КАК KPI_Сотрудники
		|		ПО KPI_ПриказОНазначенииНаДолжностьСотрудники.СтруктураКомпании = KPI_Сотрудники.СтруктураКомпании
		|			И KPI_ПриказОНазначенииНаДолжностьСотрудники.ФизЛицо = KPI_Сотрудники.ФизическоеЛицо
		|ГДЕ
		|	KPI_ПриказОНазначенииНаДолжностьСотрудники.Ссылка = &СсылкаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СтруктураКомпании,
		|	ВТ.ФизЛицо,
		|	ВТ.Квалификация,
		|	ВТ.Ссылка,
		|	KPI_СтруктураКомпанииСрезПоследних.Уволен
		|ПОМЕСТИТЬ ВТ2
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.KPI_СтруктураКомпании.СрезПоследних(&Дата, НЕ СтруктураУдалена) КАК KPI_СтруктураКомпанииСрезПоследних
		|		ПО ВТ.СтруктураКомпании = KPI_СтруктураКомпанииСрезПоследних.СтруктураКомпании
		|			И ВТ.Ссылка = KPI_СтруктураКомпанииСрезПоследних.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ2.СтруктураКомпании,
		|	ВТ2.ФизЛицо,
		|	ВТ2.Квалификация
		|ИЗ
		|	ВТ2 КАК ВТ2
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ2.Ссылка ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВТ2.Уволен ЕСТЬ НЕ NULL 
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОНЕЦ";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("СсылкаДокумента", Ссылка);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Для каждого Стр Из ТЗ Цикл
			Сотрудник = Справочники.KPI_Сотрудники.СоздатьЭлемент();
			Сотрудник.УстановитьНовыйКод();
			Сотрудник.СтруктураКомпании       = Стр.СтруктураКомпании;
			Сотрудник.ФизическоеЛицо          = Стр.ФизЛицо;
			Сотрудник.Квалификация            = Стр.Квалификация;
			Сотрудник.Наименование            = Стр.СтруктураКомпании.Наименование + " (" + Стр.ФизЛицо.Наименование + ")";
			КриптоМодуль = KPI_ОбщегоНазначенияСервер.ПолучитьКриптоМодуль();
			КриптоМодуль.ЗадатьСопоставлениеСотрудникПользователь(Сотрудник);
			Сотрудник.Записать();
		КонецЦикла;
		
		//Примим на должность уже созданных сотрудников
		//и заполним их начисления
		ТекстЗапроса = "ВЫБРАТЬ
		|	KPI_Сотрудники.Ссылка КАК Сотрудник,
		|	KPI_ПриказОНазначенииНаДолжностьСотрудники.Квалификация КАК Квалификация,
		|	KPI_ПриказОНазначенииНаДолжностьСотрудники.ФизЛицо КАК ФизЛицо,
		|	KPI_ПриказОНазначенииНаДолжностьСотрудники.ГрафикРаботы КАК ГрафикРаботы,
		|	KPI_ПриказОНазначенииНаДолжностьСотрудники.СтруктураКомпании КАК СтруктураКомпании,
		|	KPI_ПриказОНазначенииНаДолжностьПлановыеНачисления.Начисление КАК Начисление,
		|	KPI_ПриказОНазначенииНаДолжностьПлановыеНачисления.Сумма КАК Сумма
		|ИЗ
		|	Документ.KPI_ПриказОНазначенииНаДолжность.Сотрудники КАК KPI_ПриказОНазначенииНаДолжностьСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.KPI_Сотрудники КАК KPI_Сотрудники
		|		ПО KPI_ПриказОНазначенииНаДолжностьСотрудники.ФизЛицо = KPI_Сотрудники.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.KPI_ПриказОНазначенииНаДолжность.ПлановыеНачисления КАК KPI_ПриказОНазначенииНаДолжностьПлановыеНачисления
		|		ПО KPI_ПриказОНазначенииНаДолжностьСотрудники.СтруктураКомпании = KPI_ПриказОНазначенииНаДолжностьПлановыеНачисления.СтруктураКомпании
		|ГДЕ
		|	KPI_ПриказОНазначенииНаДолжностьСотрудники.Ссылка = &СсылкаДокумента
		|	И KPI_Сотрудники.ФизическоеЛицо В(&ФизическоеЛицо)
		|	И KPI_ПриказОНазначенииНаДолжностьПлановыеНачисления.Ссылка = &СсылкаДокумента
		|	И НЕ KPI_Сотрудники.ПометкаУдаления
		|ИТОГИ
		|	МАКСИМУМ(Квалификация),
		|	МАКСИМУМ(ФизЛицо),
		|	МАКСИМУМ(ГрафикРаботы),
		|	МАКСИМУМ(СтруктураКомпании),
		|	СУММА(Сумма)
		|ПО
		|	Сотрудник,
		|	Начисление";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		ФизЛицаСотрудников = Сотрудники.Выгрузить().ВыгрузитьКолонку("ФизЛицо");
		
		Запрос.УстановитьПараметр("СсылкаДокумента", Ссылка);
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицаСотрудников);
		
		
		ВыборкаСотрудники = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСотрудники.Следующий() Цикл		
			Сотрудник = ВыборкаСотрудники.Сотрудник.ПолучитьОбъект();
			
			//Делаем запись о приеме сотрудника
			Запись                            = РегистрыСведений.KPI_СтруктураКомпании.СоздатьМенеджерЗаписи();
			Запись.СтруктураКомпании          = ВыборкаСотрудники.СтруктураКомпании;
			Запись.Период                     = Дата;
			Запись.Прочитать();
			Запись.СтруктураКомпании          = ВыборкаСотрудники.СтруктураКомпании;
			Запись.Уволен                     = Ложь;
			Запись.Сотрудник                  = Сотрудник.Ссылка;
			Запись.Период                     = Дата;
			Запись.Записать(); 		
			
			Движение                          = ДвиженияДокумента.KPI_ГрафикиРаботыСотрудников.Добавить();
			Движение.Период                   = Дата;
			Движение.Сотрудник                = Сотрудник.Ссылка;
			Движение.Активность               = Истина;
			Движение.ГрафикРаботы             = ВыборкаСотрудники.ГрафикРаботы;
			
			
			ВыборкаНачислений = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаНачислений.Следующий() Цикл
				Движение                     = ДвиженияДокумента.KPI_ПлановыеНачисления.Добавить();
				Движение.Активность          = Истина;
				Движение.Период              = Дата;
				Движение.Регистратор         = Ссылка;
				Движение.Сотрудник           = ВыборкаСотрудники.Сотрудник;
				Движение.Начисление          = ВыборкаНачислений.Начисление;
				Движение.Сумма               = ВыборкаНачислений.Сумма;
				Движение.ДатаНачала          = Дата;
			КонецЦикла;		
		КонецЦикла;
		
	Исключение
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Если ЕстьОшибки Тогда 
		ОтменитьТранзакцию();
	Иначе 	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Для Каждого Строка Из Сотрудники Цикл
		Запись = РегистрыСведений.KPI_СтруктураКомпании.СоздатьМенеджерЗаписи();
		Запись.СтруктураКомпании = Строка.СтруктураКомпании;
		Запись.Период = Дата;
		Запись.Прочитать();
		Запись.Удалить();		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Для Каждого Сотрудник из Сотрудники Цикл
		КритерийПоиска = Новый Структура("СтруктураКомпании", Сотрудник.СтруктураКомпании);
		Если Не ЗначениеЗаполнено(ПлановыеНачисления.НайтиСтроки(КритерийПоиска)) Тогда
			KPI_ИнтерфейсКлиентСервер.СообщитьОбОшибке("Ошибка! Для сотрудника " + Сотрудник.СтруктураКомпании + " не назначено ни одного начисления.");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Заполняет табличную часть начисления
//Параметры:
// нет
//Возвращаемое значение:
// нет
Процедура ЗаполнитьПлановыеНачисления() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ОбъектыУправления.СтруктураКомпании,
	|	ОбъектыУправления.Должность
	|ПОМЕСТИТЬ ОбъектыУправления
	|ИЗ
	|	&ТЗ КАК ОбъектыУправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыУправления.СтруктураКомпании,
	|	KPI_ДолжностиПлановыеНачисления.Ссылка,
	|	KPI_ДолжностиПлановыеНачисления.Начисление,
	|	KPI_ДолжностиПлановыеНачисления.Сумма
	|ИЗ
	|	ОбъектыУправления КАК ОбъектыУправления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.KPI_Должности.ПлановыеНачисления КАК KPI_ДолжностиПлановыеНачисления
	|		ПО ОбъектыУправления.Должность = KPI_ДолжностиПлановыеНачисления.Ссылка
	|ГДЕ
	|	KPI_ДолжностиПлановыеНачисления.Ссылка В(&Должности)";
	
	Запрос = Новый Запрос(ТекстЗапроса);  
	
	ОбъектыУправления = Сотрудники.Выгрузить();
	
	ОбъектыУправления.Колонки.Удалить("ФизЛицо");
	ОбъектыУправления.Колонки.Удалить("Квалификация");
	ОбъектыУправления.Колонки.Удалить("ГрафикРаботы");
	
	ОбъектыУправления.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.KPI_Должности"));
	
	Для каждого Элемент Из ОбъектыУправления Цикл
		Элемент.Должность = Элемент.СтруктураКомпании.Должность;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТЗ", ОбъектыУправления);
	Запрос.УстановитьПараметр("Должности", ОбъектыУправления.ВыгрузитьКолонку("Должность"));
	
	Результат = Запрос.Выполнить();
	ПлановыеНачисления.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры





